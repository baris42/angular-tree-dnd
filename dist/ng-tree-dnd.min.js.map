{"version":3,"sources":["ng-tree-dnd.js"],"names":["fnInitTreeDnD","$timeout","$http","$compile","$parse","$window","$document","$templateCache","$TreeDnDTemplate","$TreeDnDClass","$TreeDnDHelper","$TreeDnDPlugin","$TreeDnDViewport","restrict","scope","replace","controller","$scope","$element","$attrs","passedExpand","_clone","indent","indent_plus","indent_unit","$tree_class","primary_key","$type","colDefinitions","$globals","$class","treeData","tree_nodes","angular","copy","extend","icon","1","iconExpand","0","iconCollapse","-1","iconLeaf","for_all_descendants","node","fn","parent","checkSibling","isFunction","_i","_len","_nodes","__children__","length","getLastDescendant","last_child","n","tree","selected_node","getElementChilds","element","querySelector","onClick","isDefined","on_click","setTimeout","onSelect","select_node","on_select","toggleExpand","fnCallback","$callbacks","expand","__expanded__","_fnGetHash","__parent__","getHash","setHash","_hashKey","isUndefinedOrNull","__hashKey__","accept","dropEnabled","calsIndent","level","skipUnit","skipEdge","unit","edge","droppable","draggable","dragEnabled","beforeDrop","changeKey","_key","__uid__","Math","random","__selected__","clone","this","remove","_this","delayReload","temp","splice","__index__","reload_data","clearInfo","__inited__","__visible__","add","pos","push","deleteScope","_hash","setScope","getScope","enableDrag","enableDrop","placeElm","horizontal","dragDelay","enabledMove","statusMove","enabledHotkey","enabledCollapse","statusElm","dragging","beforeDrag","dragStop","info","passed","changed","drag","target","dropped","_node","_nodeAdd","_move","move","_parent","_parentRemove","_parentAdd","isMove","dragStart","event","dragMove","setDragging","dragInfo","enableMove","val","enableStatus","enabledStatus","hideStatus","addClass","hidden","refreshStatus","statusElmOld","getMove","getCopy","attr","find","append","removeClass","setPositionStatus","e","css","left","pageX","top","pageY","z-index","status","targeting","getPrevSibling","_index","__parent_real__","getNode","index","initPlace","dragElm","isTable","document","createElement","_len_down","empty","place","height","parentNode","insertBefore","hidePlace","showPlace","getScopeTree","$safeApply","phase","$root","$$phase","$apply","hiddenChild","nodeScope","_fnInitFilter","_fnInitOrderBy","_fnGetControl","w","i","len","_curW","_typeW","_nameW","_defaultW","_scopeW","_NotW","_AfterW","_BeforeW","timeReloadData","tmpTreeData","_defaultFilterOption","showParent","showChild","beginAnd","_watches","isHotkey","templateCopy","_url","get","setCopy","templateMove","setMove","treeClass","test","trim","getExpandOn","expandOn","expandingProperty","$tree","getColDefs","colDefs","isArray","orderBy","filters","_passed","_iF","_keysF","Object","keys","_lenF","enabledFilter","option","isObject","filterOptions","primaryKey","indentUnit","optCallbacks","forEach","value","key","lenW","check_exist_attr","generateWatch","$watch","equals","timeLoadData","attrs","existAttr","isAnd","isUndefined","exist","for_each_attrs","type","nameAttr","valDefault","nameScope","fnNotExist","fnAfter","fnBefore","indexOf","_firstNode","_keys","_regex","RegExp","_col_defs","field","do_f","root","parent_real","visible","_icon","_index_real","_dept","expandLevel","__index_real__","__level__","__icon__","__icon_class__","__dept__","init_data","data","oData","_data","_tree_nodes","columnDefs","filter","updateLimit","$TreeLimit","compile","tElement","$_Template","_element","html","_fnInitDrag","ready","checkTreeTable","template","attrInclude","elemNode","treeInclude","cache","then","response","tempDiv","innerHTML","setTemplate","templateNode","promiseCheck","templateUrl","getPath","fnInitTreeDnDViewport","$q","updateTimeout","renderTime","viewport","isUpdating","isRender","updateAgain","items","$initViewport","setViewport","getViewport","updateDelayed","getItems","eWindow","on","update","width","prop","documentElement","clientWidth","clientHeight","body","scrollTop","scrollLeft","recursivePromise","number","cancel","module","constant","nodes","handle","directive","link","new_val","compileReplace","replaceWith","$node_class","childsElem","enabledDnD","keyNode","treeDndNode","first","getData","getScopeNode","objexpr","objprops","keyO","lenO","hashKey","skipAttr","keepAttr","lenKeep","join","newVal","oldVal","nodeOf","parentReal","_childs","$on","$nodes_class","$inject","factory","line2tree","parentKey","callback","parentId","rootIds","item","_primary","treeObjs","console","error","log","tree2tree","access_child","containKey","_copy","_child","_tree","nodrag","targetElm","eventObj","obj","undefined","targetTouches","originalEvent","drop","offset","boundingClientRect","getBoundingClientRect","pageYOffset","pageXOffset","positionStarted","offsetX","offsetY","startX","lastX","startY","lastY","nowX","nowY","distX","distY","dirAx","dirX","dirY","lastDirX","lastDirY","distAxX","distAxY","positionMoved","firstMoving","newAx","abs","moving","replaceIndent","children","$injector","name","has","scopes","path","$id","movePath","copyPath","$filter","options","keyChild","_filter","_fnConvert","_state","_fnBeforeClear","_fnAfter","filter_index","_fnBefore","fieldChild","parentPassed","_nodePassed","_childPassed","_filter_index","_fnCheck","err","_fnProccess","condition","conditions","for_each_filter","_iO","_keysO","_lenO","_callback","isNodePassed","isChildPassed","isParentPassed","__filtered__","__filtered_visible__","__filtered_index__","_fnOrderBy","fnOrderBy","_fnOrder","list","isString","_fnDragMove","$params","_$scope","dragStarted","preventDefault","getSelection","removeAllRanges","selection","leftElmPos","topElmPos","document_height","document_width","offsetEdge","top_scroll","window","bottom_scroll","innerHeight","scrollBy","targetScope","targetBefore","targetOffset","isEmpty","isSwapped","_scope","_target","fnSwapTree","targetX","targetY","isChanged","isVeritcal","_info","_drag","_drop","treeScope","isHolder","_offset","_fnPlaceHolder","elementFromPoint","_height","_prev","dragBorder","after","prepend","dragDelaying","_fnDragEnd","$$apply","_status","clearData","_fnBindDrag","unbind","dragEndEvent","dragMoveEvent","dragCancelEvent","_fnDragStartEvent","hasTouch","button","which","uiTreeDragging","eventElm","eventScope","dragScope","eventElmTagName","toLowerCase","_tbody","_frag","_width","_needCollapse","_copied","createDocumentFragment","bind","max","scrollHeight","offsetHeight","scrollWidth","offsetWidth","_fnDragStart","dragTimer","bindDrag","dragEnd","keydownHandler","keyCode","shiftKey","_fnKeydownHandler","keyupHandler","_fnKeyupHandler","fnSetCollapse","fnSetExpand","expand_all_parents","deselect_node","get_parent","for_all_ancestors","collapse_all_parents","add_node","new_node","add_node_root","expand_all","collapse_all","remove_node","expand_node","collapse_node","get_selected_node","get_first_node","get_children","get_siblings","get_next_sibling","get_prev_sibling","get_first_child","get_closest_ancestor_next_sibling","get_next_node","get_prev_node","get_last_descendant","select_parent_node","select_first_node","firstNode","select_next_sibling","select_prev_sibling","select_next_node","select_prev_node","run","put"],"mappings":"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","file":"ng-tree-dnd.min.js","sourcesContent":["/**\n * The MIT License (MIT)\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to\n * deal in the Software without restriction, including without limitation the\n * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n * sell copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS\n * IN THE SOFTWARE.\n * @preserve\n */\n\n/**\n * Implementing TreeDnD & Event DrapnDrop (allow drag multi tree-table include all type: table, ol, ul)\n * Demo: http://thienhung1989.github.io/angular-tree-dnd\n * Github: https://github.com/thienhung1989/angular-tree-dnd\n * @version 3.0.7\n * @preserve\n * (c) 2015 Nguyuễn Thiện Hùng - <nguyenthienhung1989@gmail.com>\n */\n(function () {\n    'use strict';\n    angular.isUndefinedOrNull = isUndefinedOrNull;\n\n    angular.isDefined = isDefined;\n\n    angular.module('ntt.TreeDnD', ['template/TreeDnD/TreeDnD.html'])\n        .constant('$TreeDnDClass', {\n            tree:   'tree-dnd',\n            empty:  'tree-dnd-empty',\n            hidden: 'tree-dnd-hidden',\n            node:   'tree-dnd-node',\n            nodes:  'tree-dnd-nodes',\n            handle: 'tree-dnd-handle',\n            place:  'tree-dnd-placeholder',\n            drag:   'tree-dnd-drag',\n            status: 'tree-dnd-status',\n            icon:   {\n                '1':  'glyphicon glyphicon-minus',\n                '0':  'glyphicon glyphicon-plus',\n                '-1': 'glyphicon glyphicon-file'\n            }\n        });angular.module('ntt.TreeDnD')\n    .directive('compile', [\n        '$compile',\n        function ($compile) {\n            return {\n                restrict: 'A',\n                link:     function (scope, element, attrs) {\n                    scope.$watch(\n                        attrs.compile, function (new_val) {\n                            if (new_val) {\n                                if (angular.isFunction(element.empty)) {\n                                    element.empty();\n                                } else {\n                                    element.html('');\n                                }\n\n                                element.append($compile(new_val)(scope));\n                            }\n                        }\n                    );\n                }\n            };\n        }]\n    )\n    .directive('compileReplace', [\n        '$compile',\n        function ($compile) {\n            return {\n                restrict: 'A',\n                link:     function (scope, element, attrs) {\n                    scope.$watch(\n                        attrs.compileReplace, function (new_val) {\n                            if (new_val) {\n                                element.replaceWith($compile(new_val)(scope));\n                            }\n                        }\n                    );\n                }\n            };\n        }]\n    );\n\nangular.module('ntt.TreeDnD')\r    .directive('treeDndNodeHandle', function () {\r        return {\r            restrict: 'A',\r            scope:    true,\r            link:     function (scope, element/*, attrs*/) {\r                scope.$type = 'TreeDnDNodeHandle';\r                if (scope.$class.handle) {\r                    element.addClass(scope.$class.handle);\r                }\r            }\r        };\r    });\n\nangular.module('ntt.TreeDnD')\n    .directive('treeDndNode', [\n        '$TreeDnDViewport',\n        function ($TreeDnDViewport) {\n            return {\n                restrict: 'A',\n                replace:  true,\n                link:     fnLink\n            };\n\n            function fnLink(scope, element, attrs) {\n\n                scope.$node_class = '';\n\n                if (scope.$class.node) {\n                    element.addClass(scope.$class.node);\n                    scope.$node_class = scope.$class.node;\n                }\n                var enabledDnD = typeof scope.dragEnabled === 'boolean' || typeof scope.dropEnabled === 'boolean',\n                    keyNode    = attrs.treeDndNode,\n                    first      = true,\n                    childsElem;\n                $TreeDnDViewport.add(scope, element);\n\n                if (enabledDnD) {\n                    scope.$type = 'TreeDnDNode';\n\n                    scope.getData = function () {\n                        return scope[keyNode];\n                    };\n                }\n\n                scope.$element            = element;\n                scope[keyNode].__inited__ = true;\n\n                scope.getElementChilds = function () {\n                    return angular.element(element[0].querySelector('[tree-dnd-nodes]'));\n                };\n\n                scope.setScope(scope, scope[keyNode]);\n\n                scope.getScopeNode = function () {\n                    return scope;\n                };\n\n                var objprops = [],\n                    objexpr,\n                    i, keyO  = Object.keys(scope[keyNode]),\n                    lenO     = keyO.length,\n                    hashKey  = scope[keyNode].__hashKey__,\n                    skipAttr = [\n                        '__visible__',\n                        '__children__',\n                        '__level__',\n                        '__index__',\n                        '__index_real__',\n\n                        '__parent__',\n                        '__parent_real__',\n                        '__dept__',\n                        '__icon__',\n                        '__icon_class__'\n                    ],\n                    keepAttr = [\n                        '__expanded__'\n                    ],\n                    lenKeep  = keepAttr.length;\n\n                // skip __visible__\n                for (i = 0; i < lenO + lenKeep; i++) {\n                    if (i < lenO) {\n                        if (skipAttr.indexOf(keyO[i]) === -1) {\n                            objprops.push(keyNode + '.' + keyO[i]);\n                        }\n                    } else {\n                        if (keyO.indexOf(keepAttr[i - lenO]) === -1) {\n                            objprops.push(keyNode + '.' + keepAttr[i - lenO]);\n                        }\n                    }\n                }\n\n                objexpr = '[' + objprops.join(',') + ']';\n\n                scope.$watch(objexpr, fnWatchNode, true);\n\n                scope.$on('$destroy', function () {\n                    scope.deleteScope(scope, scope[keyNode]);\n                });\n\n                function fnWatchNode(newVal, oldVal, scope) {\n\n                    var nodeOf = scope[keyNode],\n                        _icon;\n\n                    if (first) {\n                        _icon                 = nodeOf.__icon__;\n                        nodeOf.__icon_class__ = scope.$class.icon[_icon];\n                    } else {\n\n                        var parentReal = nodeOf.__parent_real__,\n                            parentNode = scope.tree_nodes[parentReal] || null,\n                            _childs    = nodeOf.__children__,\n                            _len       = _childs.length,\n                            _i;\n\n                        if (!nodeOf.__inited__) {\n                            nodeOf.__inited__ = true;\n                        }\n\n                        if (nodeOf.__hashKey__ !== hashKey) {\n                            // clear scope in $globals\n                            scope.deleteScope(scope, nodeOf);\n\n                            // add new scope into $globals\n                            scope.setScope(scope, nodeOf);\n                            hashKey = nodeOf.__hashKey__;\n                        }\n\n                        if (parentNode && (!parentNode.__expanded__ || !parentNode.__visible__)) {\n                            element.addClass(scope.$class.hidden);\n                            nodeOf.__visible__ = false;\n                        } else {\n                            element.removeClass(scope.$class.hidden);\n                            nodeOf.__visible__ = true;\n                        }\n\n                        if (_len === 0) {\n                            _icon = -1;\n                        } else {\n                            if (nodeOf.__expanded__) {\n                                _icon = 1;\n                            } else {\n                                _icon = 0;\n                            }\n                        }\n\n                        nodeOf.__icon__       = _icon;\n                        nodeOf.__icon_class__ = scope.$class.icon[_icon];\n\n                        if (scope.isTable) {\n                            for (_i = 0; _i < _len; _i++) {\n                                scope.for_all_descendants(_childs[_i], scope.hiddenChild, nodeOf, true);\n                            }\n                        } else {\n                            if (!childsElem) {\n                                childsElem = scope.getElementChilds();\n                            }\n\n                            if (nodeOf.__expanded__) {\n                                childsElem.removeClass(scope.$class.hidden);\n                            } else {\n                                childsElem.addClass(scope.$class.hidden);\n                            }\n                        }\n\n                    }\n\n                    first = false;\n\n                }\n            }\n        }]\n    );\n\nangular.module('ntt.TreeDnD')\n    .directive('treeDndNodes', function () {\n        return {\n            restrict: 'A',\n            replace:  true,\n            link:     function (scope, element/*, attrs*/) {\n                scope.$type = 'TreeDnDNodes';\n\n                if (scope.$class.nodes) {\n                    element.addClass(scope.$class.nodes);\n                    scope.$nodes_class = scope.$class.nodes;\n                } else {\n                    scope.$nodes_class = '';\n                }\n            }\n        };\n    });\n\nangular.module('ntt.TreeDnD')\n    .directive(\n        'treeDnd', fnInitTreeDnD);\n\nfnInitTreeDnD.$inject = [\n    '$timeout', '$http', '$compile', '$parse', '$window', '$document', '$templateCache',\n    '$TreeDnDTemplate', '$TreeDnDClass', '$TreeDnDHelper', '$TreeDnDPlugin', '$TreeDnDViewport'\n];\n\nfunction fnInitTreeDnD($timeout, $http, $compile, $parse, $window, $document, $templateCache,\n                       $TreeDnDTemplate, $TreeDnDClass, $TreeDnDHelper, $TreeDnDPlugin, $TreeDnDViewport) {\n    return {\n        restrict:   'E',\n        scope:      true,\n        replace:    true,\n        controller: ['$scope', '$element', '$attrs', fnController],\n        compile:    fnCompile\n    };\n\n    function fnController($scope, $element, $attrs) {\n        $scope.indent      = 20;\n        $scope.indent_plus = 15;\n        $scope.indent_unit = 'px';\n        $scope.$tree_class = 'table';\n        $scope.primary_key = '__uid__';\n\n        $scope.$type          = 'TreeDnD';\n        // $scope.enabledFilter = null;\n        $scope.colDefinitions = [];\n        $scope.$globals       = {};\n        $scope.$class         = {};\n\n        $scope.treeData   = [];\n        $scope.tree_nodes = [];\n\n        $scope.$class = angular.copy($TreeDnDClass);\n        angular.extend(\n            $scope.$class.icon, {\n                '1':  $attrs.iconExpand || 'glyphicon glyphicon-minus',\n                '0':  $attrs.iconCollapse || 'glyphicon glyphicon-plus',\n                '-1': $attrs.iconLeaf || 'glyphicon glyphicon-file'\n            }\n        );\n\n        $scope.for_all_descendants = function (node, fn, parent, checkSibling) {\n            if (angular.isFunction(fn)) {\n                var _i, _len, _nodes;\n\n                if (fn(node, parent)) {\n                    // have error or need ignore children\n                    return false;\n                }\n                _nodes = node.__children__;\n                _len   = _nodes ? _nodes.length : 0;\n                for (_i = 0; _i < _len; _i++) {\n                    if (!$scope.for_all_descendants(_nodes[_i], fn, node) && !checkSibling) {\n                        // skip sibling of node checking\n                        return false;\n                    }\n                }\n            }\n            // succeed then continue\n            return true;\n        };\n\n        $scope.getLastDescendant = function (node) {\n            var last_child, n;\n            if (!node) {\n                node = $scope.tree ? $scope.tree.selected_node : false;\n            }\n            if (node === false) {\n                return false;\n            }\n            n = node.__children__.length;\n            if (n === 0) {\n                return node;\n            } else {\n                last_child = node.__children__[n - 1];\n                return $scope.getLastDescendant(last_child);\n            }\n        };\n\n        $scope.getElementChilds = function () {\n            return angular.element($element[0].querySelector('[tree-dnd-nodes]'));\n        };\n\n        $scope.onClick = function (node) {\n            if (angular.isDefined($scope.tree) && angular.isFunction($scope.tree.on_click)) {\n                // We want to detach from Angular's digest cycle so we can\n                // independently measure the time for one cycle.\n                setTimeout(\n                    function () {\n                        $scope.tree.on_click(node);\n                    }, 0\n                );\n            }\n        };\n\n        $scope.onSelect = function (node) {\n            if (angular.isDefined($scope.tree)) {\n                if (node !== $scope.tree.selected_node) {\n                    $scope.tree.select_node(node);\n                }\n\n                if (angular.isFunction($scope.tree.on_select)) {\n                    setTimeout(\n                        function () {\n                            $scope.tree.on_select(node);\n                        }, 0\n                    );\n                }\n            }\n        };\n\n        var passedExpand, _clone;\n        $scope.toggleExpand = function (node, fnCallback) {\n            passedExpand = true;\n            if (angular.isFunction(fnCallback) && !fnCallback(node)) {\n                passedExpand = false;\n            } else if (angular.isFunction($scope.$callbacks.expand) && !$scope.$callbacks.expand(node)) {\n                passedExpand = false;\n            }\n\n            if (passedExpand) {\n                if (node.__children__.length > 0) {\n                    node.__expanded__ = !node.__expanded__;\n                }\n            }\n        };\n\n\n        var _fnGetHash    = function (node) {\n                return '#' + node.__parent__ + '#' + node[$scope.primary_key];\n            },\n            _fnSetHash    = function (node) {\n                var _hashKey = _fnGetHash(node);\n                if (angular.isUndefinedOrNull(node.__hashKey__) || node.__hashKey__ !== _hashKey) {\n                    node.__hashKey__ = _hashKey;\n                }\n                return node;\n            };\n        $scope.getHash    = _fnGetHash;\n        $scope.$callbacks = {\n            getHash:             _fnGetHash,\n            setHash:             _fnSetHash,\n            for_all_descendants: $scope.for_all_descendants,\n            /*expand:              function (node) {\n             return true;\n             },*/\n            accept:              function (/*dragInfo, moveTo, isChanged*/) {\n                return $scope.dropEnabled === true;\n            },\n            calsIndent:          function (level, skipUnit, skipEdge) {\n                var unit = 0,\n                    edge = skipEdge ? 0 : $scope.indent_plus;\n                if (!skipUnit) {\n                    unit = $scope.indent_unit ? $scope.indent_unit : 'px';\n                }\n\n                if (level - 1 < 1) {\n                    return edge + unit;\n                } else {\n                    return $scope.indent * (level - 1) + edge + unit;\n                }\n            },\n            droppable:           function () {\n                return $scope.dropEnabled === true;\n            },\n            draggable:           function () {\n                return $scope.dragEnabled === true;\n            },\n            beforeDrop:          function (/*event*/) {\n                return true;\n            },\n            changeKey:           function (node) {\n                var _key     = node.__uid__;\n                node.__uid__ = Math.random();\n                if (node.__selected__) {\n                    delete node.__selected__;\n                }\n\n                if ($scope.primary_key !== '__uid__') {\n                    _key = '' + node[$scope.primary_key];\n                    _key = _key.replace(/_#.+$/g, '') + '_#' + node.__uid__;\n\n                    node[$scope.primary_key] = _key;\n                }\n                // delete(node.__hashKey__);\n            },\n            clone:               function (node/*, _this*/) {\n                _clone = angular.copy(node);\n                this.for_all_descendants(_clone, this.changeKey);\n                return _clone;\n            },\n            remove:              function (node, parent, _this, delayReload) {\n                var temp = parent.splice(node.__index__, 1)[0];\n                if (!delayReload) {\n                    $scope.reload_data();\n                }\n                return temp;\n            },\n            clearInfo:           function (node) {\n                delete node.__inited__;\n                delete node.__visible__;\n\n                // always changed after call reload_data\n                //delete node.__hashKey__;\n            },\n            add:                 function (node, pos, parent/*, _this*/) {\n                // clearInfo\n                this.for_all_descendants(node, this.clearInfo);\n                if (parent) {\n                    if (parent.length > -1) {\n                        if (pos > -1) {\n                            parent.splice(pos, 0, node);\n                        } else {\n                            // todo If children need load crazy\n                            parent.push(node);\n                        }\n                    } else {\n                        parent.push(node);\n                    }\n                }\n            }\n        };\n\n        $scope.deleteScope = function (scope, node) {\n            var _hash = node.__hashKey__;\n            if ($scope.$globals[_hash] && $scope.$globals[_hash] === scope) {\n                delete $scope.$globals[_hash];\n            }\n        };\n\n        $scope.setScope = function (scope, node) {\n            var _hash = node.__hashKey__;\n            if ($scope.$globals[_hash] !== scope) {\n                $scope.$globals[_hash] = scope;\n            }\n        };\n\n        $scope.getScope = function (node) {\n            if (node) {\n                var _hash = node.__hashKey__;\n                //var _hash = typeof node === 'string' ? node : node.__hashKey__;\n                return $scope.$globals[_hash];\n            }\n            return $scope;\n        };\n\n        if ($attrs.enableDrag || $attrs.enableDrop) {\n            $scope.placeElm    = null;\n            //                            $scope.dragBorder = 30;\n            $scope.dragEnabled = null;\n            $scope.dropEnabled = null;\n            $scope.horizontal  = null;\n\n            if ($attrs.enableDrag) {\n\n                $scope.dragDelay       = 0;\n                $scope.enabledMove     = true;\n                $scope.statusMove      = true;\n                $scope.enabledHotkey   = false;\n                $scope.enabledCollapse = null;\n                $scope.statusElm       = null;\n                $scope.dragging        = null;\n\n                angular.extend(\n                    $scope.$callbacks, {\n                        beforeDrag: function (/*scopeDrag*/) {\n                            return true;\n                        },\n                        dragStop:   function (info, passed) {\n                            if (!info || !info.changed && info.drag.enabledMove || !passed) {\n                                return null;\n                            }\n\n                            info.target.reload_data();\n\n                            if (info.target !== info.drag && info.drag.enabledMove) {\n                                info.drag.reload_data();\n                            }\n                        },\n                        dropped:    function (info/*, pass*/) {\n                            if (!info) {\n                                return null;\n                            }\n\n                            var _node         = info.node,\n                                _nodeAdd      = null,\n                                _move         = info.move,\n                                _parent       = null,\n                                _parentRemove = info.parent || info.drag.treeData,\n                                _parentAdd    = _move.parent || info.target.treeData,\n                                isMove        = info.drag.enabledMove;\n\n                            if (!info.changed && isMove) {\n                                return false;\n                            }\n\n                            if (info.target.$callbacks.accept(info, info.move, info.changed)) {\n                                if (isMove) {\n                                    _parent = _parentRemove;\n                                    if (angular.isDefined(_parent.__children__)) {\n                                        _parent = _parent.__children__;\n                                    }\n\n                                    _nodeAdd = info.drag.$callbacks.remove(\n                                        _node,\n                                        _parent,\n                                        info.drag.$callbacks,\n                                        true // delay reload\n                                    );\n                                } else {\n                                    _nodeAdd = info.drag.$callbacks.clone(_node, info.drag.$callbacks);\n                                }\n\n                                // if node dragging change index in sample node parent\n                                // and index node decrement\n                                if (isMove &&\n                                    info.drag === info.target &&\n                                    _parentRemove === _parentAdd &&\n                                    _move.pos >= info.node.__index__) {\n                                    _move.pos--;\n                                }\n\n                                _parent = _parentAdd;\n                                if (_parent.__children__) {\n                                    _parent = _parent.__children__;\n                                }\n\n                                info.target.$callbacks.add(\n                                    _nodeAdd,\n                                    _move.pos,\n                                    _parent,\n                                    info.drag.$callbacks\n                                );\n\n                                return true;\n                            }\n\n                            return false;\n                        },\n                        dragStart:  function (event) {\n                        },\n                        dragMove:   function (event) {\n                        }\n                    }\n                );\n\n                $scope.setDragging = function (dragInfo) {\n                    $scope.dragging = dragInfo;\n                };\n\n                $scope.enableMove = function (val) {\n                    if (typeof val === 'boolean') {\n                        $scope.enabledMove = val;\n                    } else {\n                        $scope.enabledMove = true;\n                    }\n                };\n\n                if ($attrs.enableStatus) {\n                    $scope.enabledStatus = false;\n\n                    $scope.hideStatus = function () {\n                        if ($scope.statusElm) {\n                            $scope.statusElm.addClass($scope.$class.hidden);\n                        }\n                    };\n\n                    $scope.refreshStatus = function () {\n                        if (!$scope.dragging) {\n                            return;\n                        }\n\n                        if ($scope.enabledStatus) {\n                            var statusElmOld = $scope.statusElm;\n                            if ($scope.enabledMove) {\n                                $scope.statusElm = angular.element($TreeDnDTemplate.getMove($scope));\n                            } else {\n                                $scope.statusElm = angular.element($TreeDnDTemplate.getCopy($scope));\n                            }\n\n                            if (statusElmOld !== $scope.statusElm) {\n                                if (statusElmOld) {\n                                    $scope.statusElm.attr('class', statusElmOld.attr('class'));\n                                    $scope.statusElm.attr('style', statusElmOld.attr('style'));\n                                    statusElmOld.remove();\n                                }\n                                $document.find('body').append($scope.statusElm);\n\n                            }\n\n                            $scope.statusElm.removeClass($scope.$class.hidden);\n                        }\n                    };\n\n                    $scope.setPositionStatus = function (e) {\n                        if ($scope.statusElm) {\n                            $scope.statusElm.css(\n                                {\n                                    'left':    e.pageX + 10 + 'px',\n                                    'top':     e.pageY + 15 + 'px',\n                                    'z-index': 9999\n                                }\n                            );\n                            $scope.statusElm.addClass($scope.$class.status);\n                        }\n                    };\n                }\n            }\n\n            $scope.targeting = false;\n\n            $scope.getPrevSibling = function (node) {\n                if (node && node.__index__ > 0) {\n                    var _parent, _index = node.__index__ - 1;\n\n                    if (angular.isDefined(node.__parent_real__)) {\n                        _parent = $scope.tree_nodes[node.__parent_real__];\n                        return _parent.__children__[_index];\n                    }\n                    return $scope.treeData[_index];\n\n                }\n                return null;\n            };\n\n            $scope.getNode = function (index) {\n                if (angular.isUndefinedOrNull(index)) {\n                    return null;\n                }\n                return $scope.tree_nodes[index];\n            };\n\n            $scope.initPlace = function (element, dragElm) {\n\n                if (!$scope.placeElm) {\n                    if ($scope.isTable) {\n                        $scope.placeElm = angular.element($window.document.createElement('tr'));\n                        var _len_down   = $scope.colDefinitions.length;\n                        $scope.placeElm.append(\n                            angular.element($window.document.createElement('td'))\n                                .addClass($scope.$class.empty)\n                                .addClass('indented')\n                                .addClass($scope.$class.place)\n                        );\n                        while (_len_down-- > 0) {\n                            $scope.placeElm.append(\n                                angular.element($window.document.createElement('td'))\n                                    .addClass($scope.$class.empty)\n                                    .addClass($scope.$class.place)\n                            );\n                        }\n                    } else {\n                        $scope.placeElm = angular.element($window.document.createElement('li'))\n                            .addClass($scope.$class.empty)\n                            .addClass($scope.$class.place);\n                    }\n\n                }\n\n                if (dragElm) {\n                    $scope.placeElm.css('height', $TreeDnDHelper.height(dragElm) + 'px');\n                }\n\n                if (element) {\n                    element[0].parentNode.insertBefore($scope.placeElm[0], element[0]);\n                } else {\n                    $scope.getElementChilds().append($scope.placeElm);\n                }\n\n                return $scope.placeElm;\n            };\n\n            $scope.hidePlace = function () {\n                if ($scope.placeElm) {\n                    $scope.placeElm.addClass($scope.$class.hidden);\n                }\n            };\n\n            $scope.showPlace = function () {\n                if ($scope.placeElm) {\n                    $scope.placeElm.removeClass($scope.$class.hidden);\n                }\n            };\n\n            $scope.getScopeTree = function () {\n                return $scope;\n            };\n\n        }\n\n        $scope.$safeApply = $safeApply;\n\n        $scope.hiddenChild = function fnHiddenChild(node, parent) {\n            var nodeScope = $scope.getScope(node);\n            if (nodeScope) {\n                if (parent && parent.__expanded__ && parent.__visible__) {\n                    nodeScope.$element.removeClass($scope.$class.hidden);\n                    node.__visible__ = true;\n                } else {\n                    nodeScope.$element.addClass($scope.$class.hidden);\n                    node.__visible__ = false;\n                }\n            } else {\n                // show node & init scope\n                if (parent && parent.__expanded__ && parent.__visible__) {\n                    node.__visible__ = true;\n                } else {\n                    node.__visible__ = false;\n                }\n            }\n\n            // skip all child hiding... if not expaned\n            return node.__expanded__ === false;\n        };\n\n        var _fnInitFilter,\n            _fnInitOrderBy,\n            _fnGetControl,\n            _defaultFilterOption = {\n                showParent: true,\n                showChild:  false,\n                beginAnd:   true\n            },\n            tree,\n            _watches             = [\n                [\n                    'enableDrag',\n                    [\n                        ['boolean', 'enableStatus', null, 'enabledStatus'],\n                        ['boolean', 'enableMove', null, 'enabledMove'],\n                        ['number', 'dragDelay', 0, null, 0],\n                        ['boolean', 'enableCollapse', null, 'enabledCollapse'],\n                        ['boolean', 'enableHotkey', null, 'enabledHotkey', null, function (isHotkey) {\n                            if (isHotkey) {\n                                $scope.enabledMove = false;\n                            } else {\n                                $scope.enabledMove = $scope.statusMove;\n                            }\n                        }]\n                    ]\n                ],\n                [\n                    ['enableDrag', 'enableStatus'], [\n                    ['string', 'templateCopy', $attrs.templateCopy, 'templateCopy', null, function (_url) {\n                        if (_url && $templateCache.get(_url)) {\n                            $TreeDnDTemplate.setCopy(_url, $scope);\n                        }\n                    }],\n                    ['string', 'templateMove', $attrs.templateMove, 'templateMove', null, function (_url) {\n                        if (_url && $templateCache.get(_url)) {\n                            $TreeDnDTemplate.setMove(_url, $scope);\n                        }\n                    }]\n                ]],\n                [\n                    [['enableDrag', 'enableDrop']], [\n                    ['number', 'dragBorder', 30, 'dragBorder', 30]]\n                ],\n                [\n                    '*', [\n                    ['boolean', 'treeTable', true, 'treeTable', null],\n                    ['boolean', 'horizontal'],\n                    ['callback', 'treeClass', function (val) {\n                        switch (typeof val) {\n                            case 'string':\n                                $scope.$tree_class = val;\n                                break;\n                            case 'object':\n                                angular.extend($scope.$class, val);\n                                $scope.$tree_class = $scope.$class.tree;\n                                break;\n                            default:\n                                $scope.$tree_class = $attrs.treeClass;\n                                break;\n                        }\n                    }, 'treeClass', function () {\n                        $scope.$tree_class = $scope.$class.tree + ' table';\n                    }, null, function () {\n                        if (/^(\\s+[\\w\\-]+){2,}$/g.test(' ' + $attrs.treeClass)) {\n                            $scope.$tree_class = $attrs.treeClass.trim();\n                            return true;\n                        }\n                    }],\n                    [\n                        ['object', 'string'], 'expandOn', getExpandOn, 'expandingProperty', getExpandOn,\n                        function (expandOn) {\n                            if (angular.isUndefinedOrNull(expandOn)) {\n                                $scope.expandingProperty = $attrs.expandOn;\n                            }\n                        }],\n                    ['object', 'treeControl', angular.isDefined($scope.tree) ? $scope.tree : {},\n                     'tree', null, function ($tree) {\n\n                        if (!angular.isFunction(_fnGetControl)) {\n                            _fnGetControl = $TreeDnDPlugin('$TreeDnDControl');\n                        }\n\n                        if (angular.isFunction(_fnGetControl)) {\n                            tree = angular.extend(\n                                $tree,\n                                _fnGetControl($scope)\n                            );\n                        }\n                    }],\n                    [\n                        ['array', 'object'], 'columnDefs', getColDefs, 'colDefinitions', getColDefs,\n                        function (colDefs) {\n                            if (angular.isUndefinedOrNull(colDefs) || !angular.isArray(colDefs)) {\n                                $scope.colDefinitions = getColDefs();\n                            }\n                        }],\n                    [\n                        ['object', 'string', 'array', 'function'], 'orderBy', $attrs.orderBy\n                    ],\n                    [\n                        ['object', 'array'], 'filter', null, 'filter', null, function (filters) {\n                        var _passed = false;\n                        if (angular.isDefined(filters) && !angular.isArray(filters)) {\n                            var _keysF = Object.keys(filters),\n                                _lenF  = _keysF.length, _iF;\n\n                            if (_lenF > 0) {\n                                for (_iF = 0; _iF < _lenF; _iF++) {\n\n                                    if (typeof filters[_keysF[_iF]] === 'string' &&\n                                        filters[_keysF[_iF]].length === 0) {\n                                        continue;\n                                    }\n                                    _passed = true;\n                                    break;\n                                }\n                            }\n                        }\n\n                        $scope.enabledFilter = _passed;\n                        reload_data();\n                    }],\n                    [\n                        'object', 'filterOptions', _defaultFilterOption, 'filterOptions',\n                        _defaultFilterOption, function (option) {\n                        if (angular.isObject(option)) {\n                            $scope.filterOptions = angular.extend(_defaultFilterOption, option);\n                        }\n                    }],\n                    ['string', 'primaryKey', $attrs.primaryKey, 'primary_key', '__uid__'],\n                    ['string', 'indentUnit', $attrs.indentUnit, 'indent_unit'],\n                    ['number', 'indent', 30, null, 30],\n                    ['number', 'indentPlus', 20, null, 20],\n                    ['null', 'callbacks', function (optCallbacks) {\n                        angular.forEach(\n                            optCallbacks, function (value, key) {\n                                if (typeof value === 'function') {\n                                    if ($scope.$callbacks[key]) {\n                                        $scope.$callbacks[key] = value;\n                                    }\n                                }\n                            }\n                        );\n                        return $scope.$callbacks;\n                    },\n                     '$callbacks'\n                    ],\n                    ['number', 'expandLevel', 3, 'expandLevel', 3, function () {\n                        reload_data();\n                    }],\n                    ['number', 'treeLimit', 100, '$TreeLimit', 100],\n                    ['boolean', 'enableDrag', null, 'dragEnabled'],\n                    ['boolean', 'enableDrop', null, 'dropEnabled']\n                ]]\n            ],\n            w, lenW              = _watches.length,\n            i, len,\n            _curW,\n            _typeW, _nameW, _defaultW, _scopeW, _NotW, _AfterW, _BeforeW,\n\n            // debounce reload_Data;\n            timeReloadData, tmpTreeData;\n\n        for (w = 0; w < lenW; w++) {\n            // skip if not exist\n            if (!check_exist_attr($attrs, _watches[w][0], true)) {\n                continue;\n            }\n            _curW = _watches[w][1];\n            for (i = 0, len = _curW.length; i < len; i++) {\n                _typeW    = _curW[i][0];\n                _nameW    = _curW[i][1];\n                _defaultW = _curW[i][2];\n                _scopeW   = _curW[i][3];\n                _NotW     = _curW[i][4];\n                _AfterW   = _curW[i][5];\n                _BeforeW  = _curW[i][6];\n                generateWatch(_typeW, _nameW, _defaultW, _scopeW, _NotW, _AfterW, _BeforeW);\n            }\n        }\n\n        if ($attrs.treeData) {\n            $scope.$watch(\n                $attrs.treeData, function (val) {\n                    if (angular.equals(val, $scope.treeData)) {\n                        return;\n                    }\n\n                    tmpTreeData = val;\n                    if (angular.isUndefinedOrNull(timeReloadData)) {\n                        timeReloadData = $timeout(timeLoadData, 350);\n                    }\n                }, true\n            );\n        }\n\n        function timeLoadData() {\n            $scope.treeData = tmpTreeData;\n            reload_data();\n            timeReloadData = null;\n        }\n\n        $scope.updateLimit = function updateLimit() {\n            //console.log('Call fn UpdateLimit');\n            $scope.$TreeLimit += 50;\n        };\n\n        $scope.reload_data = reload_data;\n\n        function check_exist_attr(attrs, existAttr, isAnd) {\n            if (angular.isUndefinedOrNull(existAttr)) {\n                return false;\n            }\n\n            if (existAttr === '*' || !angular.isUndefined(attrs[existAttr])) {\n                return true;\n            }\n\n            if (angular.isArray(existAttr)) {\n                return for_each_attrs(attrs, existAttr, isAnd);\n            }\n        }\n\n        function for_each_attrs(attrs, exist, isAnd) {\n            var i, len = exist.length, passed = false;\n\n            if (len === 0) {\n                return null;\n            }\n            for (i = 0; i < len; i++) {\n                if (check_exist_attr(attrs, exist[i], !isAnd)) {\n                    passed = true;\n                    if (!isAnd) {\n                        return true;\n                    }\n                } else {\n                    if (isAnd) {\n                        return false;\n                    }\n                }\n            }\n\n            return passed;\n        }\n\n        function generateWatch(type, nameAttr, valDefault, nameScope, fnNotExist, fnAfter,\n                               fnBefore) {\n            nameScope = nameScope || nameAttr;\n            if (typeof type === 'string' || angular.isArray(type)) {\n                if (angular.isFunction(fnBefore) && fnBefore()) {\n                    return;//jmp\n                }\n                if (typeof $attrs[nameAttr] === 'string') {\n                    $scope.$watch(\n                        $attrs[nameAttr], function (val) {\n                            if (typeof type === 'string' && typeof val === type ||\n                                angular.isArray(type) && type.indexOf(typeof val) > -1\n                            ) {\n                                $scope[nameScope] = val;\n                            } else {\n                                if (angular.isFunction(valDefault)) {\n                                    $scope[nameScope] = valDefault(val);\n                                } else {\n                                    $scope[nameScope] = valDefault;\n                                }\n                            }\n\n                            if (angular.isFunction(fnAfter)) {\n                                fnAfter($scope[nameScope], $scope);\n                            }\n                        }, true\n                    );\n                } else {\n\n                    if (angular.isFunction(fnNotExist)) {\n                        $scope[nameScope] = fnNotExist();\n                    } else if (!angular.isUndefined(fnNotExist)) {\n                        $scope[nameScope] = fnNotExist;\n                    }\n                }\n            }\n        }\n\n        function $safeApply(fn) {\n            var phase = this.$root.$$phase;\n            if (phase === '$apply' || phase === '$digest') {\n                if (fn && typeof fn === 'function') {\n                    fn();\n                }\n            } else {\n                this.$apply(fn);\n            }\n        }\n\n        function getExpandOn() {\n            if ($scope.treeData && $scope.treeData.length) {\n                var _firstNode = $scope.treeData[0], _keys = Object.keys(_firstNode),\n                    _regex                                 = new RegExp('^__([a-zA-Z0-9_\\-]*)__$'),\n                    _len,\n                    i;\n                // Auto get first field with type is string;\n                for (i = 0, _len = _keys.length; i < _len; i++) {\n                    if (typeof _firstNode[_keys[i]] === 'string' && !_regex.test(_keys[i])) {\n                        $scope.expandingProperty = _keys[i];\n                        return;\n                    }\n                }\n\n                // Auto get first\n                if (angular.isUndefinedOrNull($scope.expandingProperty)) {\n                    $scope.expandingProperty = _keys[0];\n                }\n\n            }\n        }\n\n        function getColDefs() {\n            // Auto get Defs except attribute __level__ ....\n            if ($scope.treeData.length) {\n                var _col_defs = [], _firstNode = $scope.treeData[0],\n                    _regex                     = new RegExp('(^__([a-zA-Z0-9_\\-]*)__$|^' + $scope.expandingProperty + '$)'),\n                    _keys                      = Object.keys(_firstNode),\n                    i, _len;\n                // Auto get first field with type is string;\n                for (i = 0, _len = _keys.length; i < _len; i++) {\n                    if (typeof _firstNode[_keys[i]] === 'string' && !_regex.test(_keys[i])) {\n                        _col_defs.push(\n                            {\n                                field: _keys[i]\n                            }\n                        );\n                    }\n                }\n                $scope.colDefinitions = _col_defs;\n            }\n        }\n\n        function do_f(root, node, parent, parent_real, level, visible, index) {\n\n            if (typeof node !== 'object') {\n                return 0;\n            }\n\n            var _i, _len, _icon, _index_real, _dept, _hashKey;\n            if (!angular.isArray(node.__children__)) {\n                node.__children__ = [];\n            }\n\n            node.__parent_real__ = parent_real;\n            node.__parent__      = parent;\n            _len                 = node.__children__.length;\n\n            if (angular.isUndefinedOrNull(node.__expanded__) && _len > 0) {\n                node.__expanded__ = level < $scope.expandLevel;\n            }\n\n            if (_len === 0) {\n                _icon = -1;\n            } else {\n                if (node.__expanded__) {\n                    _icon = 1;\n                } else {\n                    _icon = 0;\n                }\n            }\n\n            // Insert item vertically\n            _index_real         = root.length;\n            node.__index__      = index;\n            node.__index_real__ = _index_real;\n            node.__level__      = level;\n            node.__icon__       = _icon;\n            node.__icon_class__ = $scope.$class.icon[_icon];\n            node.__visible__    = !!visible;\n\n            if (angular.isUndefinedOrNull(node.__uid__)) {\n                node.__uid__ = '' + Math.random();\n            }\n\n            _hashKey = $scope.getHash(node);\n\n            if (angular.isUndefinedOrNull(node.__hashKey__) || node.__hashKey__ !== _hashKey) {\n                node.__hashKey__ = _hashKey;\n            }\n\n            root.push(node);\n\n            // Check node children\n            _dept = 1;\n            if (_len > 0) {\n                for (_i = 0; _i < _len; _i++) {\n                    _dept += do_f(\n                        root,\n                        node.__children__[_i],\n                        node[$scope.primary_key],\n                        _index_real,\n                        level + 1,\n                        visible && node.__expanded__,\n                        _i\n                    );\n                }\n            }\n\n            node.__dept__ = _dept;\n\n            return _dept;\n        }\n\n        function init_data(data) {\n\n            // clear memory\n            if (angular.isDefined($scope.tree_nodes)) {\n                delete $scope.tree_nodes;\n            }\n\n            $scope.tree_nodes = data;\n            return data;\n        }\n\n        function reload_data(oData) {\n            var _data,\n                _len,\n                _tree_nodes = [];\n            if (angular.isDefined(oData)) {\n                if (!angular.isArray(oData) || oData.length === 0) {\n                    return init_data([]);\n                } else {\n                    _data = oData;\n                }\n            } else if (!angular.isArray($scope.treeData) || $scope.treeData.length === 0) {\n                return init_data([]);\n            } else {\n                _data = $scope.treeData;\n            }\n\n            if (!$attrs.expandOn) {\n                getExpandOn();\n            }\n\n            if (!$attrs.columnDefs) {\n                getColDefs();\n            }\n\n            if (angular.isDefined($scope.orderBy)) {\n                if (!angular.isFunction(_fnInitOrderBy)) {\n                    _fnInitOrderBy = $TreeDnDPlugin('$TreeDnDOrderBy');\n                }\n\n                if (angular.isFunction(_fnInitOrderBy)) {\n                    _data = _fnInitOrderBy(_data, $scope.orderBy);\n                }\n            }\n\n            if (angular.isDefined($scope.filter)) {\n                if (!angular.isFunction(_fnInitFilter)) {\n                    _fnInitFilter = $TreeDnDPlugin('$TreeDnDFilter');\n                }\n\n                if (angular.isFunction(_fnInitFilter)) {\n                    _data = _fnInitFilter(_data, $scope.filter, $scope.filterOptions);\n                }\n            }\n\n            _len = _data.length;\n            if (_len > 0) {\n                var _i,\n                    _deptTotal = 0;\n\n                for (_i = 0; _i < _len; _i++) {\n                    _deptTotal += do_f(_tree_nodes, _data[_i], null, null, 1, true, _i);\n                }\n\n            }\n\n            init_data(_tree_nodes);\n\n            return _tree_nodes;\n        }\n    }\n\n    function fnCompile(tElement) {\n\n        var $_Template = '',\n            _element   = tElement.html().trim();\n\n        if (_element.length > 0) {\n            $_Template = _element;\n            tElement.html('');\n        }\n\n        return function fnPost(scope, element, attrs) {\n\n            if (attrs.enableDrag) {\n                var _fnInitDrag = $TreeDnDPlugin('$TreeDnDDrag');\n                if (angular.isFunction(_fnInitDrag)) {\n                    _fnInitDrag(scope, element, $window, $document);\n                }\n            }\n\n            // kick out $digest\n            element.ready(function () {\n                // apply Template\n                function checkTreeTable(template, scope) {\n                    var elemNode = template[0].querySelector('[tree-dnd-node]'),\n                        attrInclude;\n\n                    scope.isTable = null;\n                    if (elemNode) {\n                        elemNode    = angular.element(elemNode);\n                        attrInclude = elemNode.attr('ng-include');\n                    } else {\n                        return;\n                    }\n\n                    if (attrInclude) {\n                        var treeInclude = $parse(attrInclude)(scope) || attrInclude;\n                        if (typeof treeInclude === 'string') {\n                            return $http.get(\n                                treeInclude,\n                                {cache: $templateCache}\n                            ).then(function (response) {\n                                    var data          = response.data || '';\n                                    data              = data.trim();\n                                    //scope.templateNode = data;\n                                    var tempDiv       = document.createElement('div');\n                                    tempDiv.innerHTML = data;\n                                    tempDiv           = angular.element(tempDiv);\n                                    scope.isTable     = !tempDiv[0].querySelector('[tree-dnd-nodes]');\n                                }\n                            );\n                        }\n                    } else {\n                        scope.isTable = !elemNode[0].querySelector('[tree-dnd-nodes]');\n                        //scope.templateNode = elemNode.html();\n                    }\n                    $TreeDnDViewport.setTemplate(scope, scope.templateNode);\n                    //elemNode.html('');\n                }\n\n                //scope.$watch(tableDataLoaded, transformTable);\n                /*\n                 function tableDataLoaded(elem) {\n                 // first cell in the tbody exists when data is loaded but doesn't have a width\n                 // until after the table is transformed\n                 var firstCell = elem.querySelector('tbody tr:first-child td:first-child');\n                 return firstCell && !firstCell.style.width;\n                 }\n\n                 function transformTable(elem, attrs) {\n                 // reset display styles so column widths are correct when measured below\n                 angular.element(elem.querySelectorAll('thead, tbody, tfoot')).css('display', '');\n\n                 // wrap in $timeout to give table a chance to finish rendering\n                 $timeout(function () {\n                 // set widths of columns\n                 angular.forEach(elem.querySelectorAll('tr:first-child th'), function (thElem, i) {\n\n                 var tdElems = elem.querySelector('tbody tr:first-child td:nth-child(' + (i + 1) + ')');\n                 var tfElems = elem.querySelector('tfoot tr:first-child td:nth-child(' + (i + 1) + ')');\n\n                 var columnWidth = tdElems ? tdElems.offsetWidth : thElem.offsetWidth;\n                 if (tdElems) {\n                 tdElems.style.width = columnWidth + 'px';\n                 }\n                 if (thElem) {\n                 thElem.style.width = columnWidth + 'px';\n                 }\n                 if (tfElems) {\n                 tfElems.style.width = columnWidth + 'px';\n                 }\n                 });\n\n                 // set css styles on thead and tbody\n                 angular.element(elem.querySelectorAll('thead, tfoot')).css('display', 'block');\n\n                 angular.element(elem.querySelectorAll('tbody')).css({\n                 'display':  'block',\n                 'height':   attrs.tableHeight || 'inherit',\n                 'overflow': 'auto'\n                 });\n\n                 // reduce width of last column by width of scrollbar\n                 var tbody          = elem.querySelector('tbody');\n                 var scrollBarWidth = tbody.offsetWidth - tbody.clientWidth;\n                 if (scrollBarWidth > 0) {\n                 // for some reason trimming the width by 2px lines everything up better\n                 scrollBarWidth -= 2;\n                 var lastColumn         = elem.querySelector('tbody tr:first-child td:last-child');\n                 lastColumn.style.width = lastColumn.offsetWidth - scrollBarWidth + 'px';\n                 }\n                 });\n                 }*/\n                var promiseCheck;\n                if ($_Template.length > 0) {\n                    promiseCheck = checkTreeTable(angular.element($_Template.trim()), scope);\n                    if (angular.isObject(promiseCheck)) {\n                        promiseCheck.then(function () {\n                            element.append($compile($_Template)(scope));\n                        });\n                    } else {\n                        element.append($compile($_Template)(scope));\n                    }\n                } else {\n                    $http.get(\n                        attrs.templateUrl || $TreeDnDTemplate.getPath(),\n                        {cache: $templateCache}\n                    ).then(function (response) {\n                            var data     = response.data || '';\n                            data         = angular.element(data.trim());\n                            promiseCheck = checkTreeTable(data, scope);\n                            if (angular.isObject(promiseCheck)) {\n                                promiseCheck.then(function () {\n                                    element.append($compile(data)(scope));\n                                });\n                            } else {\n                                element.append($compile(data)(scope));\n                            }\n                        }\n                    );\n                }\n            })\n        };\n    }\n}\n\n\nangular.module('ntt.TreeDnD')\n    .factory('$TreeDnDConvert', function () {\n        var _$initConvert = {\n            line2tree: function (data, primaryKey, parentKey, callback) {\n                callback = typeof callback === 'function' ? callback : function () {\n                };\n                if (!data || data.length === 0 || !primaryKey || !parentKey) {\n                    return [];\n                }\n                var tree     = [],\n                    rootIds  = [],\n                    item     = data[0],\n                    _primary = item[primaryKey],\n                    treeObjs = {},\n                    parentId, parent,\n                    len      = data.length,\n                    i        = 0;\n\n                while (i < len) {\n                    item = data[i++];\n                    callback(item);\n                    _primary           = item[primaryKey];\n                    treeObjs[_primary] = item;\n                }\n                i = 0;\n                while (i < len) {\n                    item = data[i++];\n                    callback(item);\n                    _primary           = item[primaryKey];\n                    treeObjs[_primary] = item;\n                    parentId           = item[parentKey];\n                    if (parentId) {\n                        parent = treeObjs[parentId];\n                        if (parent) {\n                            if (parent.__children__) {\n                                if (angular.isArray(parent.__children__)) {\n                                    parent.__children__.push(item);\n                                } else {\n                                    console.error('Type of `parent.__children__` isn\\'t array');\n                                    console.log(parent.__children__);\n                                }\n                            } else {\n                                parent.__children__ = [item];\n                            }\n                        }\n                    } else {\n                        rootIds.push(_primary);\n                    }\n                }\n                len = rootIds.length;\n                for (i = 0; i < len; i++) {\n                    tree.push(treeObjs[rootIds[i]]);\n                }\n                return tree;\n            },\n            tree2tree: function access_child(data, containKey, callback) {\n                callback  = typeof callback === 'function' ? callback : function () {\n                };\n                var _tree = [],\n                    _i,\n                    _len  = data ? data.length : 0,\n                    _copy, _child;\n                for (_i = 0; _i < _len; _i++) {\n                    _copy = angular.copy(data[_i]);\n                    callback(_copy);\n                    if (angular.isArray(_copy[containKey]) && _copy[containKey].length > 0) {\n                        _child = access_child(_copy[containKey], containKey, callback);\n                        delete _copy[containKey];\n                        _copy.__children__ = _child;\n                    }\n                    _tree.push(_copy);\n                }\n                return _tree;\n            }\n        };\n\n        return _$initConvert;\n    });\n\nangular.module('ntt.TreeDnD')\n    .factory('$TreeDnDHelper', [\n        '$document', '$window',\n        function ($document, $window) {\n            var _$helper = {\n                nodrag:          function (targetElm) {\n                    return typeof targetElm.attr('data-nodrag') !== 'undefined';\n                },\n                eventObj:        function (e) {\n                    var obj = e;\n                    if (e.targetTouches !== undefined) {\n                        obj = e.targetTouches.item(0);\n                    } else if (e.originalEvent !== undefined && e.originalEvent.targetTouches !== undefined) {\n                        obj = e.originalEvent.targetTouches.item(0);\n                    }\n                    return obj;\n                },\n                dragInfo:        function (scope) {\n                    var _node   = scope.getData(),\n                        _tree   = scope.getScopeTree(),\n                        _parent = scope.getNode(_node.__parent_real__);\n\n                    return {\n                        node:    _node,\n                        parent:  _parent,\n                        move:    {\n                            parent: _parent,\n                            pos:    _node.__index__\n                        },\n                        scope:   scope,\n                        target:  _tree,\n                        drag:    _tree,\n                        drop:    scope.getPrevSibling(_node),\n                        changed: false\n                    };\n                },\n                height:          function (element) {\n                    return element.prop('scrollHeight');\n                },\n                width:           function (element) {\n                    return element.prop('scrollWidth');\n                },\n                offset:          function (element) {\n                    var boundingClientRect = element[0].getBoundingClientRect();\n                    return {\n                        width:  element.prop('offsetWidth'),\n                        height: element.prop('offsetHeight'),\n                        top:    boundingClientRect.top + ($window.pageYOffset || $document[0].body.scrollTop || $document[0].documentElement.scrollTop),\n                        left:   boundingClientRect.left + ($window.pageXOffset || $document[0].body.scrollLeft || $document[0].documentElement.scrollLeft)\n                    };\n                },\n                positionStarted: function (e, target) {\n                    return {\n                        offsetX:  e.pageX - this.offset(target).left,\n                        offsetY:  e.pageY - this.offset(target).top,\n                        startX:   e.pageX,\n                        lastX:    e.pageX,\n                        startY:   e.pageY,\n                        lastY:    e.pageY,\n                        nowX:     0,\n                        nowY:     0,\n                        distX:    0,\n                        distY:    0,\n                        dirAx:    0,\n                        dirX:     0,\n                        dirY:     0,\n                        lastDirX: 0,\n                        lastDirY: 0,\n                        distAxX:  0,\n                        distAxY:  0\n                    };\n                },\n                positionMoved:   function (e, pos, firstMoving) {\n                    // mouse position last events\n                    pos.lastX = pos.nowX;\n                    pos.lastY = pos.nowY;\n\n                    // mouse position this events\n                    pos.nowX = e.pageX;\n                    pos.nowY = e.pageY;\n\n                    // distance mouse moved between events\n                    pos.distX = pos.nowX - pos.lastX;\n                    pos.distY = pos.nowY - pos.lastY;\n\n                    // direction mouse was moving\n                    pos.lastDirX = pos.dirX;\n                    pos.lastDirY = pos.dirY;\n\n                    // direction mouse is now moving (on both axis)\n                    pos.dirX = pos.distX === 0 ? 0 : pos.distX > 0 ? 1 : -1;\n                    pos.dirY = pos.distY === 0 ? 0 : pos.distY > 0 ? 1 : -1;\n\n                    // axis mouse is now moving on\n                    var newAx = Math.abs(pos.distX) > Math.abs(pos.distY) ? 1 : 0;\n\n                    // do nothing on first move\n                    if (firstMoving) {\n                        pos.dirAx  = newAx;\n                        pos.moving = true;\n                        return;\n                    }\n\n                    // calc distance moved on this axis (and direction)\n                    if (pos.dirAx !== newAx) {\n                        pos.distAxX = 0;\n                        pos.distAxY = 0;\n                    } else {\n                        pos.distAxX += Math.abs(pos.distX);\n                        if (pos.dirX !== 0 && pos.dirX !== pos.lastDirX) {\n                            pos.distAxX = 0;\n                        }\n                        pos.distAxY += Math.abs(pos.distY);\n                        if (pos.dirY !== 0 && pos.dirY !== pos.lastDirY) {\n                            pos.distAxY = 0;\n                        }\n                    }\n                    pos.dirAx = newAx;\n                },\n                replaceIndent:   function (scope, element, indent, attr) {\n                    attr = attr || 'left';\n                    angular.element(element.children()[0]).css(attr, scope.$callbacks.calsIndent(indent));\n                }\n            };\n\n            return _$helper;\n        }]\n    );\n\nangular.module('ntt.TreeDnD')\n    .factory('$TreeDnDPlugin', [\n        '$injector',\n        function ($injector) {\n            var _fnget = function (name) {\n                if (angular.isDefined($injector) && $injector.has(name)) {\n                    return $injector.get(name);\n                }\n                return null;\n            };\n            return _fnget;\n        }]\n    );\n\nangular.module('ntt.TreeDnD')\n    .factory('$TreeDnDTemplate', [\n        '$templateCache',\n        function ($templateCache) {\n            var templatePath = 'template/TreeDnD/TreeDnD.html',\n                copyPath     = 'template/TreeDnD/TreeDnDStatusCopy.html',\n                movePath     = 'template/TreeDnD/TreeDnDStatusMove.html',\n                scopes       = {},\n                temp,\n                _$init       = {\n                    setMove: function (path, scope) {\n                        if (!scopes[scope.$id]) {\n                            scopes[scope.$id] = {};\n                        }\n                        scopes[scope.$id].movePath = path;\n                    },\n                    setCopy: function (path, scope) {\n                        if (!scopes[scope.$id]) {\n                            scopes[scope.$id] = {};\n                        }\n                        scopes[scope.$id].copyPath = path;\n                    },\n                    getPath: function () {\n                        return templatePath;\n                    },\n                    getCopy: function (scope) {\n                        if (scopes[scope.$id] && scopes[scope.$id].copyPath) {\n                            temp = $templateCache.get(scopes[scope.$id].copyPath);\n                            if (temp) {\n                                return temp;\n                            }\n                        }\n                        return $templateCache.get(copyPath);\n                    },\n                    getMove: function (scope) {\n                        if (scopes[scope.$id] && scopes[scope.$id].movePath) {\n                            temp = $templateCache.get(scopes[scope.$id].movePath);\n                            if (temp) {\n                                return temp;\n                            }\n                        }\n                        return $templateCache.get(movePath);\n                    }\n                };\n\n            return _$init;\n        }]\n    );\n\nangular.module('ntt.TreeDnD')\n    .factory('$TreeDnDViewport', fnInitTreeDnDViewport);\n\nfnInitTreeDnDViewport.$inject = ['$window', '$document', '$timeout', '$q', '$compile'];\n\nfunction fnInitTreeDnDViewport($window, $document, $timeout, $q, $compile) {\n\n    var viewport      = null,\n        isUpdating    = false,\n        isRender      = false,\n        updateAgain   = false,\n        viewportRect,\n        items         = [],\n        nodeTemplate,\n        updateTimeout,\n        renderTime,\n        $initViewport = {\n            setViewport:   setViewport,\n            getViewport:   getViewport,\n            add:           add,\n            setTemplate:   setTemplate,\n            getItems:      getItems,\n            updateDelayed: updateDelayed\n        },\n        eWindow       = angular.element($window);\n\n    eWindow.on('load resize scroll', updateDelayed);\n\n    return $initViewport;\n\n    function update() {\n\n        viewportRect = {\n            width:  eWindow.prop('offsetWidth') || document.documentElement.clientWidth,\n            height: eWindow.prop('offsetHeight') || document.documentElement.clientHeight,\n            top:    $document[0].body.scrollTop || $document[0].documentElement.scrollTop,\n            left:   $document[0].body.scrollLeft || $document[0].documentElement.scrollLeft\n        };\n\n        if (isUpdating || isRender) {\n            updateAgain = true;\n            return;\n        }\n        isUpdating = true;\n\n        recursivePromise();\n    }\n\n    function recursivePromise() {\n        if (isRender) {\n            return;\n        }\n\n        var number = number > 0 ? number : items.length, item;\n\n        if (number > 0) {\n            item = items[0];\n\n            isRender   = true;\n            renderTime = $timeout(function () {\n                //item.element.html(nodeTemplate);\n                //$compile(item.element.contents())(item.scope);\n\n                items.splice(0, 1);\n                isRender = false;\n                number--;\n                $timeout.cancel(renderTime);\n                recursivePromise();\n            }, 0);\n\n        } else {\n            isUpdating = false;\n            if (updateAgain) {\n                updateAgain = false;\n                update();\n            }\n        }\n\n    }\n\n    /**\n     * Check if a point is inside specified bounds\n     * @param x\n     * @param y\n     * @param bounds\n     * @returns {boolean}\n     */\n    function pointIsInsideBounds(x, y, bounds) {\n        return x >= bounds.left &&\n            y >= bounds.top &&\n            x <= bounds.left + bounds.width &&\n            y <= bounds.top + bounds.height;\n    }\n\n    /**\n     * @name setViewport\n     * @desciption Set the viewport element\n     * @param element\n     */\n    function setViewport(element) {\n        viewport = element;\n    }\n\n    /**\n     * Return the current viewport\n     * @returns {*}\n     */\n    function getViewport() {\n        return viewport;\n    }\n\n    /**\n     * trigger an update\n     */\n    function updateDelayed() {\n        $timeout.cancel(updateTimeout);\n        updateTimeout = $timeout(function () {\n            update();\n        }, 0);\n    }\n\n    /**\n     * Add listener for event\n     * @param element\n     * @param callback\n     */\n    function add(scope, element) {\n        updateDelayed();\n        items.push({\n            element: element,\n            scope:   scope\n        });\n    }\n\n    function setTemplate(scope, template) {\n        nodeTemplate = template;\n    }\n\n    /**\n     * Get list of items\n     * @returns {Array}\n     */\n    function getItems() {\n        return items;\n    }\n}\n\nangular.module('ntt.TreeDnD')\n    .factory('$TreeDnDFilter', [\n        '$filter', function ($filter) {\n            return fnInitFilter;\n\n            function for_all_descendants(options, node, fieldChild, fnBefore, fnAfter, parentPassed) {\n                if (!angular.isFunction(fnBefore)) {\n                    return null;\n                }\n\n                var _i, _len, _nodes,\n                    _nodePassed   = fnBefore(options, node),\n                    _childPassed  = false,\n                    _filter_index = options.filter_index;\n\n                if (angular.isDefined(node[fieldChild])) {\n                    _nodes = node[fieldChild];\n                    _len   = _nodes.length;\n\n                    options.filter_index = 0;\n                    for (_i = 0; _i < _len; _i++) {\n                        _childPassed = for_all_descendants(\n                            options,\n                            _nodes[_i],\n                            fieldChild,\n                            fnBefore,\n                            fnAfter,\n                            _nodePassed || parentPassed\n                        ) || _childPassed;\n                    }\n\n                    // restore filter_index of node\n                    options.filter_index = _filter_index;\n                }\n\n                if (angular.isFunction(fnAfter)) {\n                    fnAfter(options, node, _nodePassed === true, _childPassed === true, parentPassed === true);\n                }\n\n                return _nodePassed || _childPassed;\n            }\n\n            /**\n             * Check data with callback\n             * @param {string|object|function|regex} callback\n             * @param {*} data\n             * @returns {null|boolean}\n             * @private\n             */\n            function _fnCheck(callback, data) {\n                if (angular.isUndefinedOrNull(data) || angular.isArray(data)) {\n                    return null;\n                }\n\n                if (angular.isFunction(callback)) {\n                    return callback(data, $filter);\n                } else {\n                    if (typeof callback === 'boolean') {\n                        data = !!data;\n                        return data === callback;\n                    } else if (angular.isDefined(callback)) {\n                        try {\n                            var _regex = new RegExp(callback);\n                            return _regex.test(data);\n                        }\n                        catch (err) {\n                            if (typeof data === 'string') {\n                                return data.indexOf(callback) > -1;\n                            } else {\n                                return null;\n                            }\n                        }\n                    } else {\n                        return null;\n                    }\n                }\n            }\n\n            /**\n             * `fnProcess` to call `_fnCheck`. If `condition` is `array` then call `for_each_filter`\n             * else will call `_fnCheck`. Specical `condition.field` is `_$` then apply `condition.callback` for all field, if have `field` invaild then `return true`.\n             *\n             * @param node\n             * @param condition\n             * @param isAnd\n             * @returns {null|boolean}\n             * @private\n             */\n            function _fnProccess(node, condition, isAnd) {\n                if (angular.isArray(condition)) {\n                    return for_each_filter(node, condition, isAnd);\n                } else {\n                    var _key      = condition.field,\n                        _callback = condition.callback,\n                        _iO, _keysO, _lenO;\n\n                    if (_key === '_$') {\n                        _keysO = Object.keys(node);\n                        _lenO  = _keysO.length;\n                        for (_iO = 0; _iO < _lenO; _iO++) {\n                            if (_fnCheck(_callback, node[_keysO[_iO]])) {\n                                return true;\n                            }\n                        }\n                    } else if (angular.isDefined(node[_key])) {\n                        return _fnCheck(_callback, node[_key]);\n                    }\n                }\n                return null;\n            }\n\n            /**\n             *\n             * @param {object} node\n             * @param {array} conditions Array `conditions`\n             * @param {boolean} isAnd check with condition `And`, if `And` then `return false` when all `false`\n             * @returns {null|boolean}\n             */\n            function for_each_filter(node, conditions, isAnd) {\n                var i, len = conditions.length || 0, passed = false;\n                if (len === 0) {\n                    return null;\n                }\n\n                for (i = 0; i < len; i++) {\n                    if (_fnProccess(node, conditions[i], !isAnd)) {\n                        passed = true;\n                        // if condition `or` then return;\n                        if (!isAnd) {\n                            return true;\n                        }\n                    } else {\n\n                        // if condition `and` and result in fnProccess = false then return;\n                        if (isAnd) {\n                            return false;\n                        }\n                    }\n                }\n\n                return passed;\n            }\n\n            /**\n             * Will call _fnAfter to clear data no need\n             * @param {object} options\n             * @param {object} node\n             * @param {boolean} isNodePassed\n             * @param {boolean} isChildPassed\n             * @param {boolean} isParentPassed\n             * @private\n             */\n            function _fnAfter(options, node, isNodePassed, isChildPassed, isParentPassed) {\n                if (isNodePassed === true) {\n                    node.__filtered__         = true;\n                    node.__filtered_visible__ = true;\n                    node.__filtered_index__   = options.filter_index++;\n                    return; //jmp\n                } else if (isChildPassed === true && options.showParent === true\n                    || isParentPassed === true && options.showChild === true) {\n                    node.__filtered__         = false;\n                    node.__filtered_visible__ = true;\n                    node.__filtered_index__   = options.filter_index++;\n                    return; //jmp\n                }\n\n                // remove attr __filtered__\n                delete node.__filtered__;\n                delete node.__filtered_visible__;\n                delete node.__filtered_index__;\n            }\n\n            /**\n             * `fnBefore` will called when `for_all_descendants` of `node` checking.\n             * If `filter` empty then return `true` else result of function `_fnProccess` {@see _fnProccess}\n             *\n             * @param {object} options\n             * @param {object} node\n             * @returns {null|boolean}\n             * @private\n             */\n            function _fnBefore(options, node) {\n                if (options.filter.length === 0) {\n                    return true;\n                } else {\n                    return _fnProccess(node, options.filter, options.beginAnd || false);\n                }\n            }\n\n            /**\n             * `fnBeforeClear` will called when `for_all_descendants` of `node` checking.\n             * Alway false to Clear Filter empty\n             *\n             * @param {object} options\n             * @param {object} node\n             * @returns {null|boolean}\n             * @private\n             */\n            function _fnBeforeClear(options, node) {\n                return false;\n            }\n\n            /**\n             * `_fnConvert` to convert `filter` `object` to `array` invaild.\n             *\n             * @param {object|array} filters\n             * @returns {array} Instead of `filter` or new array invaild *(converted from filter)*\n             * @private\n             */\n            function _fnConvert(filters) {\n                var _iF, _lenF, _keysF,\n                    _filter,\n                    _state;\n                // convert filter object to array filter\n                if (angular.isObject(filters) && !angular.isArray(filters)) {\n                    _keysF  = Object.keys(filters);\n                    _lenF   = _keysF.length;\n                    _filter = [];\n\n                    if (_lenF > 0) {\n                        for (_iF = 0; _iF < _lenF; _iF++) {\n\n                            if (typeof filters[_keysF[_iF]] === 'string' && filters[_keysF[_iF]].length === 0) {\n                                continue;\n                            } else if (angular.isArray(filters[_keysF[_iF]])) {\n                                _state = filters[_keysF[_iF]];\n                            } else if (angular.isObject(filters[_keysF[_iF]])) {\n                                _state = _fnConvert(filters[_keysF[_iF]]);\n                            } else {\n                                _state = {\n                                    field:    _keysF[_iF],\n                                    callback: filters[_keysF[_iF]]\n                                };\n                            }\n                            _filter.push(_state);\n                        }\n                    }\n                    _state = null;\n                    return _filter;\n                }\n                else {\n                    return filters;\n                }\n            }\n\n            /**\n             * `fnInitFilter` function is constructor of service `$TreeDnDFilter`.\n             * @constructor\n             * @param {object|array} treeData\n             * @param {object|array} filters\n             * @param {object} options\n             * @param {string} keyChild\n             * @returns {array} Return `treeData` or `treeData` with `filter`\n             * @private\n             */\n            function fnInitFilter(treeData, filters, options, keyChild) {\n                if (!angular.isArray(treeData)\n                    || treeData.length === 0) {\n                    return treeData;\n                }\n\n                var _i, _len,\n                    _filter;\n\n                _filter = _fnConvert(filters);\n                if (!(angular.isArray(_filter) || angular.isObject(_filter))\n                    || _filter.length === 0) {\n                    for (_i = 0, _len = treeData.length; _i < _len; _i++) {\n                        for_all_descendants(\n                            options,\n                            treeData[_i],\n                            keyChild || '__children__',\n                            _fnBeforeClear, _fnAfter\n                        );\n                    }\n                    return treeData;\n                }\n\n                options.filter       = _filter;\n                options.filter_index = 0;\n                for (_i = 0, _len = treeData.length; _i < _len; _i++) {\n                    for_all_descendants(\n                        options,\n                        treeData[_i],\n                        keyChild || '__children__',\n                        _fnBefore, _fnAfter\n                    );\n                }\n\n                return treeData;\n            }\n\n        }]\n    );\n\nangular.module('ntt.TreeDnD')\n    .factory('$TreeDnDOrderBy', [\n        '$filter',\n        function ($filter) {\n            var _fnOrderBy          = $filter('orderBy'),\n                for_all_descendants = function for_all_descendants(options, node, name, fnOrderBy) {\n                    var _i, _len, _nodes;\n\n                    if (angular.isDefined(node[name])) {\n                        _nodes = node[name];\n                        _len   = _nodes.length;\n                        // OrderBy children\n                        for (_i = 0; _i < _len; _i++) {\n                            _nodes[_i] = for_all_descendants(options, _nodes[_i], name, fnOrderBy);\n                        }\n\n                        node[name] = fnOrderBy(node[name], options);\n                    }\n                    return node;\n                },\n                _fnOrder            = function _fnOrder(list, orderBy) {\n                    return _fnOrderBy(list, orderBy);\n                },\n                _fnMain             = function _fnMain(treeData, orderBy) {\n                    if (!angular.isArray(treeData)\n                        || treeData.length === 0\n                        || !(angular.isArray(orderBy) || angular.isObject(orderBy) || angular.isString(orderBy) || angular.isFunction(orderBy))\n                        || orderBy.length === 0 && !angular.isFunction(orderBy)) {\n                        return treeData;\n                    }\n\n                    var _i, _len;\n\n                    for (_i = 0, _len = treeData.length; _i < _len; _i++) {\n                        treeData[_i] = for_all_descendants(\n                            orderBy,\n                            treeData[_i],\n                            '__children__',\n                            _fnOrder\n                        );\n                    }\n\n                    return _fnOrder(treeData, orderBy);\n                };\n\n            return _fnMain;\n        }]\n    );\n\nangular.module('ntt.TreeDnD')\n    .factory('$TreeDnDDrag', [\n        '$timeout', '$TreeDnDHelper',\n        function ($timeout, $TreeDnDHelper) {\n            function _fnPlaceHolder(e, $params) {\n                if ($params.placeElm) {\n                    var _offset = $TreeDnDHelper.offset($params.placeElm);\n                    if (_offset.top <= e.pageY && e.pageY <= _offset.top + _offset.height &&\n                        _offset.left <= e.pageX && e.pageX <= _offset.left + _offset.width\n                    ) {\n                        return true;\n                    }\n                }\n                return false;\n            }\n\n            function _fnDragStart(e, $params) {\n                if (!$params.hasTouch && (e.button === 2 || e.which === 3)) {\n                    // disable right click\n                    return;\n                }\n\n                if (e.uiTreeDragging || e.originalEvent && e.originalEvent.uiTreeDragging) { // event has already fired in other scope.\n                    return;\n                }\n\n                // the element which is clicked.\n                var eventElm   = angular.element(e.target),\n                    eventScope = eventElm.scope();\n                if (!eventScope || !eventScope.$type) {\n                    return;\n                }\n                // if (eventScope.$type !== 'TreeDnDNode') { // Check if it is a node or a handle\n                //     return;\n                // }\n\n                if (eventScope.$type !== 'TreeDnDNodeHandle') { // If the node has a handle, then it should be clicked by the handle\n                    return;\n                }\n\n                var eventElmTagName = eventElm.prop('tagName').toLowerCase(),\n                    dragScope,\n                    _$scope         = $params.$scope;\n                if (eventElmTagName === 'input'\n                    || eventElmTagName === 'textarea'\n                    || eventElmTagName === 'button'\n                    || eventElmTagName === 'select') { // if it's a input or button, ignore it\n                    return;\n                }\n                // check if it or it's parents has a 'data-nodrag' attribute\n                while (eventElm && eventElm[0] && eventElm[0] !== $params.element) {\n                    if ($TreeDnDHelper.nodrag(eventElm)) { // if the node mark as `nodrag`, DONOT drag it.\n                        return;\n                    }\n                    eventElm = eventElm.parent();\n                }\n\n                e.uiTreeDragging = true; // stop event bubbling\n                if (e.originalEvent) {\n                    e.originalEvent.uiTreeDragging = true;\n                }\n                e.preventDefault();\n\n                dragScope = eventScope.getScopeNode();\n\n                $params.dragInfo = $TreeDnDHelper.dragInfo(dragScope);\n\n                if (!_$scope.$callbacks.beforeDrag(dragScope, $params.dragInfo)) {\n                    return;\n                }\n\n                $params.firstMoving = true;\n                _$scope.setDragging($params.dragInfo);\n\n                var eventObj = $TreeDnDHelper.eventObj(e);\n                $params.pos  = $TreeDnDHelper.positionStarted(eventObj, dragScope.$element);\n\n                if (dragScope.isTable) {\n                    $params.dragElm = angular.element($params.$window.document.createElement('table'))\n                        .addClass(_$scope.$class.tree)\n                        .addClass(_$scope.$class.drag)\n                        .addClass(_$scope.$tree_class);\n                } else {\n                    $params.dragElm = angular.element($params.$window.document.createElement('ul'))\n                        .addClass(_$scope.$class.drag)\n                        .addClass('tree-dnd-nodes')\n                        .addClass(_$scope.$tree_class);\n                }\n\n                $params.dragElm.css(\n                    {\n                        'width':   $TreeDnDHelper.width(dragScope.$element) + 'px',\n                        'z-index': 9995\n                    }\n                );\n\n                $params.offsetEdge = 0;\n                var _width         = $TreeDnDHelper.width(dragScope.$element),\n                    _scope         = dragScope,\n                    _element       = _scope.$element,\n                    _clone,\n                    _needCollapse  = !!_$scope.enabledCollapse,\n                    _copied        = false,\n                    _tbody,\n                    _frag;\n\n                if (_scope.isTable) {\n                    $params.offsetEdge = $params.dragInfo.node.__level__ - 1;\n                    _tbody             = angular.element(document.createElement('tbody'));\n                    _frag              = angular.element(document.createDocumentFragment());\n\n                    _$scope.for_all_descendants(\n                        $params.dragInfo.node, function (_node, _parent) {\n                            _scope   = _$scope.getScope(_node);\n                            _element = _scope && _scope.$element;\n                            if (_scope && _element) {\n                                if (!_copied) {\n                                    _clone = _element.clone();\n\n                                    $TreeDnDHelper.replaceIndent(\n                                        _$scope,\n                                        _clone,\n                                        _node.__level__ - $params.offsetEdge,\n                                        'padding-left'\n                                    );\n\n                                    _frag.append(_clone);\n\n                                    // skip all, just clone parent\n                                    if (_needCollapse) {\n                                        _copied = true;\n                                    }\n\n                                    // hide if have status Move;\n                                    if (_$scope.enabledMove && _$scope.$class.hidden &&\n                                        (!_parent || _node.__visible__ || _parent.__visible__ && _parent.__expanded__)) {\n                                        _element.addClass(_$scope.$class.hidden);\n                                    }\n                                }\n                            }\n                            // skip children of node not expand.\n                            return _copied || _node.__visible__ === false || _node.__expanded__ === false;\n\n                        }, null, !_needCollapse\n                    );\n                    _tbody.append(_frag);\n                    $params.dragElm.append(_tbody);\n                } else {\n\n                    _clone = _element.clone();\n                    if (_needCollapse) {\n                        _clone[0].querySelector('[tree-dnd-nodes]').remove();\n                    }\n\n                    // hide if have status Move;\n                    $params.dragElm.append(_clone);\n                    if (_$scope.enabledMove && _$scope.$class.hidden) {\n                        _element.addClass(_$scope.$class.hidden);\n                    }\n                }\n\n                $params.dragElm.css(\n                    {\n                        'left': eventObj.pageX - $params.pos.offsetX + _$scope.$callbacks.calsIndent(\n                            $params.offsetEdge + 1,\n                            true,\n                            true\n                        ) + 'px',\n                        'top':  eventObj.pageY - $params.pos.offsetY + 'px'\n                    }\n                );\n                // moving item with descendant\n                $params.$document.find('body').append($params.dragElm);\n                if (_$scope.$callbacks.droppable()) {\n                    $params.placeElm = _$scope.initPlace(dragScope.$element, $params.dragElm);\n\n                    if (dragScope.isTable) {\n                        $TreeDnDHelper.replaceIndent(_$scope, $params.placeElm, $params.dragInfo.node.__level__);\n                    }\n\n                    $params.placeElm.css('width', _width);\n                }\n\n                _$scope.showPlace();\n                _$scope.targeting = true;\n\n                if (_$scope.enabledStatus) {\n                    _$scope.refreshStatus();\n                    _$scope.setPositionStatus(e);\n                }\n\n                angular.element($params.$document).bind('touchend', $params.dragEndEvent);\n                angular.element($params.$document).bind('touchcancel', $params.dragEndEvent);\n                angular.element($params.$document).bind('touchmove', $params.dragMoveEvent);\n                angular.element($params.$document).bind('mouseup', $params.dragEndEvent);\n                angular.element($params.$document).bind('mousemove', $params.dragMoveEvent);\n                angular.element($params.$document).bind('mouseleave', $params.dragCancelEvent);\n\n                $params.document_height = Math.max(\n                    $params.body.scrollHeight,\n                    $params.body.offsetHeight,\n                    $params.html.clientHeight,\n                    $params.html.scrollHeight,\n                    $params.html.offsetHeight\n                );\n\n                $params.document_width = Math.max(\n                    $params.body.scrollWidth,\n                    $params.body.offsetWidth,\n                    $params.html.clientWidth,\n                    $params.html.scrollWidth,\n                    $params.html.offsetWidth\n                );\n            }\n\n            function _fnDragMove(e, $params) {\n                var _$scope = $params.$scope;\n                if (!$params.dragStarted) {\n                    if (!$params.dragDelaying) {\n                        $params.dragStarted = true;\n                        _$scope.$safeApply(\n                            function () {\n                                _$scope.$callbacks.dragStart($params.dragInfo);\n                            }\n                        );\n                    }\n                    return;\n                }\n\n                if ($params.dragElm) {\n                    e.preventDefault();\n                    if ($params.$window.getSelection) {\n                        $params.$window.getSelection().removeAllRanges();\n                    } else if ($params.$window.document.selection) {\n                        $params.$window.document.selection.empty();\n                    }\n\n                    var eventObj   = $TreeDnDHelper.eventObj(e),\n                        leftElmPos = eventObj.pageX - $params.pos.offsetX,\n                        topElmPos  = eventObj.pageY - $params.pos.offsetY;\n\n                    //dragElm can't leave the screen on the left\n                    if (leftElmPos < 0) {\n                        leftElmPos = 0;\n                    }\n\n                    //dragElm can't leave the screen on the top\n                    if (topElmPos < 0) {\n                        topElmPos = 0;\n                    }\n\n                    //dragElm can't leave the screen on the bottom\n                    if (topElmPos + 10 > $params.document_height) {\n                        topElmPos = $params.document_height - 10;\n                    }\n\n                    //dragElm can't leave the screen on the right\n                    if (leftElmPos + 10 > $params.document_width) {\n                        leftElmPos = $params.document_width - 10;\n                    }\n\n                    $params.dragElm.css(\n                        {\n                            'left': leftElmPos + _$scope.$callbacks.calsIndent(\n                                $params.offsetEdge + 1,\n                                true,\n                                true\n                            ) + 'px',\n                            'top':  topElmPos + 'px'\n                        }\n                    );\n\n                    if (_$scope.enabledStatus) {\n                        _$scope.setPositionStatus(e);\n                    }\n\n                    var top_scroll    = window.pageYOffset || $params.$window.document.documentElement.scrollTop,\n                        bottom_scroll = top_scroll + (window.innerHeight || $params.$window.document.clientHeight || $params.$window.document.clientHeight);\n                    // to scroll down if cursor y-position is greater than the bottom position the vertical scroll\n                    if (bottom_scroll < eventObj.pageY && bottom_scroll <= $params.document_height) {\n                        window.scrollBy(0, 10);\n                    }\n                    // to scroll top if cursor y-position is less than the top position the vertical scroll\n                    if (top_scroll > eventObj.pageY) {\n                        window.scrollBy(0, -10);\n                    }\n\n                    $TreeDnDHelper.positionMoved(e, $params.pos, $params.firstMoving);\n\n                    if ($params.firstMoving) {\n                        $params.firstMoving = false;\n                        return;\n                    }\n                    // check if add it as a child node first\n\n                    var targetX    = eventObj.pageX - $params.$window.document.body.scrollLeft,\n                        targetY    = eventObj.pageY - (window.pageYOffset || $params.$window.document.documentElement.scrollTop),\n\n                        targetElm,\n                        targetScope,\n                        targetBefore,\n                        targetOffset,\n                        isChanged  = true,\n                        isVeritcal = true,\n                        isEmpty,\n                        isSwapped,\n                        _scope,\n                        _target,\n                        _parent,\n                        _info      = $params.dragInfo,\n                        _move      = _info.move,\n                        _drag      = _info.node,\n                        _drop      = _info.drop,\n                        treeScope  = _info.target,\n                        fnSwapTree,\n                        isHolder   = _fnPlaceHolder(e, $params);\n\n                    if (!isHolder) {\n                        /* when using elementFromPoint() inside an iframe, you have to call\n                         elementFromPoint() twice to make sure IE8 returns the correct value\n                         $params.$window.document.elementFromPoint(targetX, targetY);*/\n\n                        targetElm = angular.element(\n                            $params.$window.document.elementFromPoint(\n                                targetX,\n                                targetY\n                            )\n                        );\n\n                        targetScope = targetElm.scope();\n                        if (!targetScope || !targetScope.$callbacks || !targetScope.$callbacks.droppable()) {\n                            // Not allowed Drop Item\n                            return;\n                        }\n\n                        fnSwapTree = function () {\n                            treeScope = targetScope.getScopeTree();\n                            _target   = _info.target;\n\n                            if (_info.target !== treeScope) {\n                                // Replace by place-holder new\n                                _target.hidePlace();\n                                _target.targeting   = false;\n                                treeScope.targeting = true;\n\n                                _info.target     = treeScope;\n                                $params.placeElm = treeScope.initPlace(targetScope.$element, $params.dragElm);\n\n                                _target   = null;\n                                isSwapped = true;\n                            }\n                            return true;\n                        };\n\n                        if (angular.isFunction(targetScope.getScopeNode)) {\n                            targetScope = targetScope.getScopeNode();\n                            if (!fnSwapTree()) {\n                                return;\n                            }\n                        } else {\n                            if (targetScope.$type === 'TreeDnDNodes' || targetScope.$type === 'TreeDnD') {\n                                if (targetScope.tree_nodes) {\n                                    if (targetScope.tree_nodes.length === 0) {\n                                        if (!fnSwapTree()) {\n                                            return;\n                                        }\n                                        // Empty\n                                        isEmpty = true;\n                                    }\n                                } else {\n                                    return;\n                                }\n                            } else {\n                                return;\n                            }\n                        }\n                    }\n\n                    if ($params.pos.dirAx && !isSwapped || isHolder) {\n                        isVeritcal  = false;\n                        targetScope = _info.scope;\n                    }\n\n                    if (!targetScope.$element && !targetScope) {\n                        return;\n                    }\n\n                    if (isEmpty) {\n                        _move.parent = null;\n                        _move.pos    = 0;\n\n                        _drop = null;\n                    } else {\n                        // move vertical\n                        if (isVeritcal) {\n                            targetElm = targetScope.$element; // Get the element of tree-dnd-node\n                            if (angular.isUndefinedOrNull(targetElm)) {\n                                return;\n                            }\n                            targetOffset = $TreeDnDHelper.offset(targetElm);\n\n                            if (targetScope.horizontal && !targetScope.isTable) {\n                                targetBefore = eventObj.pageX < targetOffset.left + $TreeDnDHelper.width(targetElm) / 2;\n                            } else {\n                                if (targetScope.isTable) {\n                                    targetBefore = eventObj.pageY < targetOffset.top + $TreeDnDHelper.height(targetElm) / 2;\n                                } else {\n                                    var _height = $TreeDnDHelper.height(targetElm);\n\n                                    if (targetScope.getElementChilds()) {\n                                        _height -= -$TreeDnDHelper.height(targetScope.getElementChilds());\n                                    }\n\n                                    if (eventObj.pageY > targetOffset.top + _height) {\n                                        return;\n                                    }\n\n                                    targetBefore = eventObj.pageY < targetOffset.top + _height / 2;\n                                }\n                            }\n\n                            if (!angular.isFunction(targetScope.getData)) {\n                                return;\n                            }\n\n                            _target = targetScope.getData();\n                            _parent = targetScope.getNode(_target.__parent_real__);\n\n                            if (targetBefore) {\n                                var _prev = targetScope.getPrevSibling(_target);\n\n                                _move.parent = _parent;\n                                _move.pos    = angular.isDefined(_prev) ? _prev.__index__ + 1 : 0;\n\n                                _drop = _prev;\n                            } else {\n                                if (_target.__expanded__ && !(_target.__children__.length === 1 && _target.__index_real__ === _drag.__parent_real__)) {\n                                    _move.parent = _target;\n                                    _move.pos    = 0;\n\n                                    _drop = null;\n                                } else {\n                                    _move.parent = _parent;\n                                    _move.pos    = _target.__index__ + 1;\n\n                                    _drop = _target;\n                                }\n                            }\n                        } else {\n                            // move horizontal\n                            if ($params.pos.dirAx && $params.pos.distAxX >= treeScope.dragBorder) {\n                                $params.pos.distAxX = 0;\n                                // increase horizontal level if previous sibling exists and is not collapsed\n                                if ($params.pos.distX > 0) {\n                                    _parent = _drop;\n                                    if (!_parent) {\n                                        if (_move.pos - 1 >= 0) {\n                                            _parent = _move.parent.__children__[_move.pos - 1];\n                                        } else {\n                                            return;\n                                        }\n                                    }\n\n                                    if (_info.drag === _info.target && _parent === _drag && _$scope.enabledMove) {\n                                        _parent = treeScope.getPrevSibling(_parent);\n                                    }\n\n                                    if (_parent && _parent.__visible__) {\n                                        var _len = _parent.__children__.length;\n\n                                        _move.parent = _parent;\n                                        _move.pos    = _len;\n\n                                        if (_len > 0) {\n                                            _drop = _parent.__children__[_len - 1];\n                                        } else {\n                                            _drop = null;\n                                        }\n                                    } else {\n                                        // Not changed\n                                        return;\n                                    }\n                                } else if ($params.pos.distX < 0) {\n                                    _target = _move.parent;\n                                    if (_target &&\n                                        (_target.__children__.length === 0 ||\n                                            _target.__children__.length - 1 < _move.pos ||\n                                            _info.drag === _info.target &&\n                                            _target.__index_real__ === _drag.__parent_real__ &&\n                                            _target.__children__.length - 1 === _drag.__index__ && _$scope.enabledMove)\n                                    ) {\n                                        _parent = treeScope.getNode(_target.__parent_real__);\n\n                                        _move.parent = _parent;\n                                        _move.pos    = _target.__index__ + 1;\n\n                                        _drop = _target;\n                                    } else {\n                                        // Not changed\n                                        return;\n                                    }\n                                } else {\n                                    return;\n                                }\n                            } else {\n                                // limited\n                                return;\n                            }\n                        }\n                    }\n\n                    if (_info.drag === _info.target &&\n                        _move.parent &&\n                        _drag.__parent_real__ === _move.parent.__index_real__ &&\n                        _drag.__index__ === _move.pos\n                    ) {\n                        isChanged = false;\n                    }\n\n                    if (treeScope.$callbacks.accept(_info, _move, isChanged)) {\n                        _info.move    = _move;\n                        _info.drop    = _drop;\n                        _info.changed = isChanged;\n                        _info.scope   = targetScope;\n\n                        if (targetScope.isTable) {\n                            $TreeDnDHelper.replaceIndent(\n                                treeScope,\n                                $params.placeElm,\n                                angular.isUndefinedOrNull(_move.parent) ? 1 : _move.parent.__level__ + 1\n                            );\n\n                            if (_drop) {\n                                _parent = (_move.parent ? _move.parent.__children__ : null) || _info.target.treeData;\n\n                                if (_drop.__index__ < _parent.length - 1) {\n                                    // Find fast\n                                    _drop  = _parent[_drop.__index__ + 1];\n                                    _scope = _info.target.getScope(_drop);\n                                    _scope.$element[0].parentNode.insertBefore(\n                                        $params.placeElm[0],\n                                        _scope.$element[0]\n                                    );\n                                } else {\n                                    _target = _info.target.getLastDescendant(_drop);\n                                    _scope  = _info.target.getScope(_target);\n                                    _scope.$element.after($params.placeElm);\n                                }\n                            } else {\n                                _scope = _info.target.getScope(_move.parent);\n                                if (_scope) {\n                                    if (_move.parent) {\n                                        _scope.$element.after($params.placeElm);\n\n                                    } else {\n                                        _scope.getElementChilds().prepend($params.placeElm);\n                                    }\n                                }\n                            }\n                        } else {\n                            _scope = _info.target.getScope(_drop || _move.parent);\n                            if (_drop) {\n                                _scope.$element.after($params.placeElm);\n                            } else {\n                                _scope.getElementChilds().prepend($params.placeElm);\n                            }\n                        }\n\n                        treeScope.showPlace();\n\n                        _$scope.$safeApply(\n                            function () {\n                                _$scope.$callbacks.dragMove(_info);\n                            }\n                        );\n                    }\n\n                }\n            }\n\n            function _fnDragEnd(e, $params) {\n                e.preventDefault();\n                if ($params.dragElm) {\n                    var _passed  = false,\n                        _$scope  = $params.$scope,\n                        _scope   = _$scope.getScope($params.dragInfo.node),\n                        _element = _scope.$element;\n\n                    _$scope.$safeApply(\n                        function () {\n                            _passed = _$scope.$callbacks.beforeDrop($params.dragInfo);\n                        }\n                    );\n\n                    // rollback all\n                    if (_scope.isTable) {\n                        _$scope.for_all_descendants(\n                            $params.dragInfo.node, function (_node, _parent) {\n                                _scope   = _$scope.getScope(_node);\n                                _element = _scope && _scope.$element;\n                                if (_scope && _element && (!_parent && _node.__visible__ || _parent.__expanded__)) {\n                                    if (_$scope.$class.hidden) {\n                                        _element.removeClass(_$scope.$class.hidden);\n                                    }\n                                }\n                                return _node.__visible__ === false || _node.__expanded__ === false\n                            }, null, true\n                        );\n                    } else {\n                        if (_$scope.$class.hidden) {\n                            _element.removeClass(_$scope.$class.hidden);\n                        }\n                    }\n\n                    $params.dragElm.remove();\n                    $params.dragElm = null;\n\n                    if (_$scope.enabledStatus) {\n                        _$scope.hideStatus();\n                    }\n\n                    if (_$scope.$$apply) {\n                        _$scope.$safeApply(\n                            function () {\n                                var _status = _$scope.$callbacks.dropped(\n                                    $params.dragInfo,\n                                    _passed\n                                );\n\n                                _$scope.$callbacks.dragStop($params.dragInfo, _status);\n                                clearData();\n                            }\n                        );\n                    } else {\n                        _fnBindDrag($params);\n                        _$scope.$safeApply(\n                            function () {\n                                _$scope.$callbacks.dragStop($params.dragInfo, false);\n                                clearData();\n                            }\n                        );\n                    }\n\n                }\n\n                function clearData() {\n                    $params.dragInfo.target.hidePlace();\n                    $params.dragInfo.target.targeting = false;\n\n                    $params.dragInfo = null;\n                    _$scope.$$apply  = false;\n                    _$scope.setDragging(null);\n                }\n\n                angular.element($params.$document).unbind('touchend', $params.dragEndEvent); // Mobile\n                angular.element($params.$document).unbind('touchcancel', $params.dragEndEvent); // Mobile\n                angular.element($params.$document).unbind('touchmove', $params.dragMoveEvent); // Mobile\n                angular.element($params.$document).unbind('mouseup', $params.dragEndEvent);\n                angular.element($params.$document).unbind('mousemove', $params.dragMoveEvent);\n                angular.element($params.$window.document.body).unbind('mouseleave', $params.dragCancelEvent);\n            }\n\n            function _fnDragStartEvent(e, $params) {\n                if ($params.$scope.$callbacks.draggable()) {\n                    _fnDragStart(e, $params);\n                }\n            }\n\n            function _fnBindDrag($params) {\n                $params.element.bind(\n                    'touchstart mousedown', function (e) {\n                        $params.dragDelaying = true;\n                        $params.dragStarted  = false;\n                        _fnDragStartEvent(e, $params);\n                        $params.dragTimer = $timeout(\n                            function () {\n                                $params.dragDelaying = false;\n                            }, $params.$scope.dragDelay\n                        );\n                    }\n                );\n\n                $params.element.bind(\n                    'touchend touchcancel mouseup', function () {\n                        $timeout.cancel($params.dragTimer);\n                    }\n                );\n            }\n\n            function _fnKeydownHandler(e, $params) {\n                var _$scope = $params.$scope;\n                if (e.keyCode === 27) {\n                    if (_$scope.enabledStatus) {\n                        _$scope.hideStatus();\n                    }\n\n                    _$scope.$$apply = false;\n                    _fnDragEnd(e, $params);\n                } else {\n                    if (_$scope.enabledHotkey && e.shiftKey) {\n                        _$scope.enableMove(true);\n                        if (_$scope.enabledStatus) {\n                            _$scope.refreshStatus();\n                        }\n\n                        if (!$params.dragInfo) {\n                            return;\n                        }\n\n                        var _scope   = _$scope.getScope($params.dragInfo.node),\n                            _element = _scope.$element;\n\n                        if (_scope.isTable) {\n                            _$scope.for_all_descendants(\n                                $params.dragInfo.node, function (_node, _parent) {\n                                    _scope   = _$scope.getScope(_node);\n                                    _element = _scope && _scope.$element;\n                                    if (_scope && _element && (!_parent && _node.__visible__ || _parent.__expanded__)) {\n                                        if (_$scope.$class.hidden) {\n                                            _element.addClass(_$scope.$class.hidden);\n                                        }\n                                    }\n                                    return _node.__visible__ === false || _node.__expanded__ === false\n\n                                }, null, true\n                            );\n                        } else {\n                            if (_$scope.$class.hidden) {\n                                _element.addClass(_$scope.$class.hidden);\n                            }\n                        }\n                    }\n                }\n            }\n\n            function _fnKeyupHandler(e, $params) {\n                var _$scope = $params.$scope;\n                if (_$scope.enabledHotkey && !e.shiftKey) {\n                    _$scope.enableMove(false);\n\n                    if (_$scope.enabledStatus) {\n                        _$scope.refreshStatus();\n                    }\n\n                    if (!$params.dragInfo) {\n                        return;\n                    }\n\n                    var _scope   = _$scope.getScope($params.dragInfo.node),\n                        _element = _scope.$element;\n\n                    if (_scope.isTable) {\n                        _$scope.for_all_descendants(\n                            $params.dragInfo.node, function (_node, _parent) {\n                                _scope   = _$scope.getScope(_node);\n                                _element = _scope && _scope.$element;\n                                if (_scope && _element && (!_parent && _node.__visible__ || _parent.__expanded__)) {\n                                    if (_$scope.$class.hidden) {\n                                        _element.removeClass(_$scope.$class.hidden);\n                                    }\n                                }\n                                return _node.__visible__ === false || _node.__expanded__ === false\n                            }, null, true\n                        );\n                    } else {\n                        if (_$scope.$class.hidden) {\n                            _element.removeClass(_$scope.$class.hidden);\n                        }\n                    }\n                }\n            }\n\n            function _$init(scope, element, $window, $document) {\n                var $params        = {\n                        hasTouch:        'ontouchstart' in window,\n                        firstMoving:     null,\n                        dragInfo:        null,\n                        pos:             null,\n                        placeElm:        null,\n                        dragElm:         null,\n                        dragDelaying:    true,\n                        dragStarted:     false,\n                        dragTimer:       null,\n                        body:            document.body,\n                        html:            document.documentElement,\n                        document_height: null,\n                        document_width:  null,\n                        offsetEdge:      null,\n                        $scope:          scope,\n                        $window:         $window,\n                        $document:       $document,\n                        element:         element,\n                        bindDrag:        function () {\n                            _fnBindDrag($params);\n                        },\n                        dragEnd:         function (e) {\n                            _fnDragEnd(e, $params);\n                        },\n                        dragMoveEvent:   function (e) {\n                            _fnDragMove(e, $params);\n                        },\n                        dragEndEvent:    function (e) {\n                            scope.$$apply = true;\n                            _fnDragEnd(e, $params);\n                        },\n                        dragCancelEvent: function (e) {\n                            _fnDragEnd(e, $params);\n                        }\n                    },\n                    keydownHandler = function (e) {\n                        return _fnKeydownHandler(e, $params);\n                    },\n                    keyupHandler   = function (e) {\n                        return _fnKeyupHandler(e, $params);\n                    };\n\n                scope.dragEnd = function (e) {\n                    $params.dragEnd(e);\n                };\n\n                $params.bindDrag();\n\n                angular.element($window.document.body).bind('keydown', keydownHandler);\n                angular.element($window.document.body).bind('keyup', keyupHandler);\n                //unbind handler that retains scope\n                scope.$on(\n                    '$destroy', function () {\n                        angular.element($window.document.body).unbind('keydown', keydownHandler);\n                        angular.element($window.document.body).unbind('keyup', keyupHandler);\n                        if (scope.statusElm) {\n                            scope.statusElm.remove();\n                        }\n\n                        if (scope.placeElm) {\n                            scope.placeElm.remove();\n                        }\n                    }\n                );\n            }\n\n            return _$init;\n        }\n    ]);\n\nangular.module('ntt.TreeDnD')\n    .factory('$TreeDnDControl', function () {\n        var _target, _parent,\n            i, len;\n\n        function fnSetCollapse(node) {\n            node.__expanded__ = false;\n        }\n\n        function fnSetExpand(node) {\n            node.__expanded__ = true;\n        }\n\n        function _$init(scope) {\n            var n, tree = {\n                selected_node:        null,\n                for_all_descendants:  scope.for_all_descendants,\n                select_node:          function (node) {\n                    if (!node) {\n                        if (tree.selected_node) {\n                            delete tree.selected_node.__selected__;\n                        }\n                        tree.selected_node = null;\n                        return null;\n                    }\n\n                    if (node !== tree.selected_node) {\n                        if (tree.selected_node) {\n                            delete tree.selected_node.__selected__;\n                        }\n                        node.__selected__  = true;\n                        tree.selected_node = node;\n                        tree.expand_all_parents(node);\n                        if (angular.isFunction(tree.on_select)) {\n                            tree.on_select(node);\n                        }\n                    }\n\n                    return node;\n                },\n                deselect_node:        function () {\n                    _target = null;\n                    if (tree.selected_node) {\n                        delete tree.selected_node.__selected__;\n                        _target            = tree.selected_node;\n                        tree.selected_node = null;\n                    }\n                    return _target;\n                },\n                get_parent:           function (node) {\n                    node = node || tree.selected_node;\n\n                    if (node && node.__parent_real__ !== null) {\n                        return scope.tree_nodes[node.__parent_real__];\n                    }\n                    return null;\n                },\n                for_all_ancestors:    function (node, fn) {\n                    _parent = tree.get_parent(node);\n                    if (_parent) {\n                        if (fn(_parent)) {\n                            return false;\n                        }\n\n                        return tree.for_all_ancestors(_parent, fn);\n                    }\n                    return true;\n                },\n                expand_all_parents:   function (node) {\n                    node = node || tree.selected_node;\n\n                    if (angular.isObject(node)) {\n                        tree.for_all_ancestors(node, fnSetExpand);\n                    }\n                },\n                collapse_all_parents: function (node) {\n                    node = node || tree.selected_node;\n                    if (angular.isObject(node)) {\n                        tree.for_all_ancestors(node, fnSetCollapse);\n                    }\n                },\n\n                reload_data:                       function () {\n                    return scope.reload_data();\n                },\n                add_node:                          function (parent, new_node, index) {\n                    if (typeof index !== 'number') {\n                        if (parent) {\n                            parent.__children__.push(new_node);\n                            parent.__expanded__ = true;\n                        } else {\n                            scope.treeData.push(new_node);\n                        }\n                    } else {\n                        if (parent) {\n                            parent.__children__.splice(index, 0, new_node);\n                            parent.__expanded__ = true;\n                        } else {\n                            scope.treeData.splice(index, 0, new_node);\n                        }\n                    }\n                    return new_node;\n                },\n                add_node_root:                     function (new_node) {\n                    tree.add_node(null, new_node);\n                    return new_node;\n                },\n                expand_all:                        function () {\n                    len = scope.treeData.length;\n                    for (i = 0; i < len; i++) {\n                        tree.for_all_descendants(scope.treeData[i], fnSetExpand);\n                    }\n                },\n                collapse_all:                      function () {\n                    len = scope.treeData.length;\n                    for (i = 0; i < len; i++) {\n                        tree.for_all_descendants(scope.treeData[i], fnSetCollapse);\n                    }\n                },\n                remove_node:                       function (node) {\n                    node = node || tree.selected_node;\n\n                    if (angular.isObject(node)) {\n                        if (node.__parent_real__ !== null) {\n                            _parent = tree.get_parent(node).__children__;\n                        } else {\n                            _parent = scope.treeData;\n                        }\n\n                        _parent.splice(node.__index__, 1);\n\n                        tree.reload_data();\n\n                        if (tree.selected_node === node) {\n                            tree.selected_node = null;\n                        }\n                    }\n                },\n                expand_node:                       function (node) {\n                    node = node || tree.selected_node;\n\n                    if (angular.isObject(node)) {\n                        node.__expanded__ = true;\n                        return node;\n                    }\n                },\n                collapse_node:                     function (node) {\n                    node = node || tree.selected_node;\n\n                    if (angular.isObject(node)) {\n                        node.__expanded__ = false;\n                        return node;\n                    }\n                },\n                get_selected_node:                 function () {\n                    return tree.selected_node;\n                },\n                get_first_node:                    function () {\n                    len = scope.treeData.length;\n                    if (len > 0) {\n                        return scope.treeData[0];\n                    }\n\n                    return null;\n                },\n                get_children:                      function (node) {\n                    node = node || tree.selected_node;\n\n                    return node.__children__;\n                },\n                get_siblings:                      function (node) {\n                    node = node || tree.selected_node;\n                    if (angular.isObject(node)) {\n                        _parent = tree.get_parent(node);\n                        if (_parent) {\n                            _target = _parent.__children__;\n                        } else {\n                            _target = scope.treeData;\n                        }\n                        return _target;\n                    }\n                },\n                get_next_sibling:                  function (node) {\n                    node = node || tree.selected_node;\n                    if (angular.isObject(node)) {\n                        _target = tree.get_siblings(node);\n                        n       = _target.length;\n                        if (node.__index__ < n) {\n                            return _target[node.__index__ + 1];\n                        }\n                    }\n                },\n                get_prev_sibling:                  function (node) {\n                    node    = node || tree.selected_node;\n                    _target = tree.get_siblings(node);\n                    if (node.__index__ > 0) {\n                        return _target[node.__index__ - 1];\n                    }\n                },\n                get_first_child:                   function (node) {\n                    node = node || tree.selected_node;\n                    if (angular.isObject(node)) {\n                        _target = node.__children__;\n                        if (_target && _target.length > 0) {\n                            return node.__children__[0];\n                        }\n                    }\n                    return null;\n                },\n                get_closest_ancestor_next_sibling: function (node) {\n                    node    = node || tree.selected_node;\n                    _target = tree.get_next_sibling(node);\n                    if (_target) {\n                        return _target;\n                    }\n\n                    _parent = tree.get_parent(node);\n                    if (_parent) {\n                        return tree.get_closest_ancestor_next_sibling(_parent);\n                    }\n\n                    return null;\n                },\n                get_next_node:                     function (node) {\n                    node = node || tree.selected_node;\n\n                    if (angular.isObject(node)) {\n                        _target = tree.get_first_child(node);\n                        if (_target) {\n                            return _target;\n                        } else {\n                            return tree.get_closest_ancestor_next_sibling(node);\n                        }\n                    }\n                },\n                get_prev_node:                     function (node) {\n                    node = node || tree.selected_node;\n\n                    if (angular.isObject(node)) {\n                        _target = tree.get_prev_sibling(node);\n                        if (_target) {\n                            return tree.get_last_descendant(_target);\n                        }\n\n                        _parent = tree.get_parent(node);\n                        return _parent;\n                    }\n                },\n                get_last_descendant:               scope.getLastDescendant,\n                select_parent_node:                function (node) {\n                    node = node || tree.selected_node;\n\n                    if (angular.isObject(node)) {\n                        _parent = tree.get_parent(node);\n                        if (_parent) {\n                            return tree.select_node(_parent);\n                        }\n                    }\n                },\n                select_first_node:                 function () {\n                    var firstNode = tree.get_first_node();\n                    return tree.select_node(firstNode);\n                },\n                select_next_sibling:               function (node) {\n                    node = node || tree.selected_node;\n\n                    if (angular.isObject(node)) {\n                        _target = tree.get_next_sibling(node);\n                        if (_target) {\n                            return tree.select_node(_target);\n                        }\n                    }\n                },\n                select_prev_sibling:               function (node) {\n                    node = node || tree.selected_node;\n\n                    if (angular.isObject(node)) {\n                        _target = tree.get_prev_sibling(node);\n                        if (_target) {\n                            return tree.select_node(_target);\n                        }\n                    }\n                },\n                select_next_node:                  function (node) {\n                    node = node || tree.selected_node;\n\n                    if (angular.isObject(node)) {\n                        _target = tree.get_next_node(node);\n                        if (_target) {\n                            return tree.select_node(_target);\n                        }\n                    }\n                },\n                select_prev_node:                  function (node) {\n                    node = node || tree.selected_node;\n\n                    if (angular.isObject(node)) {\n                        _target = tree.get_prev_node(node);\n                        if (_target) {\n                            return tree.select_node(_target);\n                        }\n                    }\n                }\n            };\n            angular.extend(scope.tree, tree);\n            return scope.tree;\n        }\n\n        return _$init;\n    });\n\nangular.module('template/TreeDnD/TreeDnD.html', []).run(\n    ['$templateCache', function ($templateCache) {\n        $templateCache.put(\n            'template/TreeDnD/TreeDnD.html',\n            ['<table ng-class=\"$tree_class\">',\n             '    <thead>',\n             '  <tr>',\n             '     <th ng-class=\"expandingProperty.titleClass\" ng-style=\"expandingProperty.titleStyle\">',\n             '         {{expandingProperty.displayName || expandingProperty.field || expandingProperty}}',\n             '        <\\/th>',\n             '        <th ng-repeat=\"col in colDefinitions\" ng-class=\"col.titleClass\" ng-style=\"col.titleStyle\">',\n             '         {{col.displayName || col.field}}',\n             '     </th>',\n             '    </tr>',\n             '    </thead>',\n             ' <tbody tree-dnd-nodes>',\n             '  <tr tree-dnd-node=\"node\" ng-repeat=\"node in tree_nodes track by node.__hashKey__\" ',\n             '       ng-if=\"(node.__inited__ || node.__visible__)\"',\n             '       ng-click=\"onSelect(node)\" ',\n             '       ng-class=\"(node.__selected__ ? \\' active\\':\\'\\')\">',\n             '        <td tree-dnd-node-handle',\n             '          ng-style=\"expandingProperty.cellStyle ? expandingProperty.cellStyle : {\\'padding-left\\': $callbacks.calsIndent(node.__level__)}\"',\n             '          ng-class=\"expandingProperty.cellClass\"',\n             '          compile=\"expandingProperty.cellTemplate\">',\n             '              <a data-nodrag>',\n             '                  <i ng-class=\"node.__icon_class__\" ng-click=\"toggleExpand(node)\"',\n             '                     class=\"tree-icon\"></i>',\n             '              </a>',\n             '             {{node[expandingProperty.field] || node[expandingProperty]}}',\n             '        </td>',\n             '        <td ng-repeat=\"col in colDefinitions\" ng-class=\"col.cellClass\" ng-style=\"col.cellStyle\"',\n             '            compile=\"col.cellTemplate\">',\n             '            {{node[col.field]}}',\n             '        </td>',\n             '    </tr>',\n             '    </tbody>',\n             '</table>'].join('\\n')\n        );\n\n        $templateCache.put(\n            'template/TreeDnD/TreeDnDStatusCopy.html',\n            '<label><i class=\"fa fa-copy\"></i>&nbsp;<b>Copying</b></label>'\n        );\n\n        $templateCache.put(\n            'template/TreeDnD/TreeDnDStatusMove.html',\n            '<label><i class=\"fa fa-file-text\"></i>&nbsp;<b>Moving</b></label>'\n        );\n    }]\n);\n\n    function isUndefinedOrNull(val) {\n        return angular.isUndefined(val) || val === null;\n    }\n\n    function isDefined(val) {\n        return !(angular.isUndefined(val) || val === null);\n    }\n})();"]}