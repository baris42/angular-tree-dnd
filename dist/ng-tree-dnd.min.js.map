{"version":3,"sources":["ng-tree-dnd.js"],"names":["fnInitTreeDnD","$timeout","$http","$compile","$parse","$window","$document","$templateCache","$TreeDnDTemplate","$TreeDnDClass","$TreeDnDHelper","$TreeDnDPlugin","$TreeDnDViewport","restrict","scope","replace","controller","$scope","$element","$attrs","indent","indent_plus","indent_unit","$tree_class","primary_key","$type","colDefinitions","$globals","$class","treeData","tree_nodes","angular","copy","extend","icon","1","iconExpand","0","iconCollapse","-1","iconLeaf","for_all_descendants","node","fn","parent","checkSibling","isFunction","_i","_len","_nodes","__children__","length","getLastDescendant","last_child","n","tree","selected_node","getElementChilds","element","querySelector","onClick","isDefined","on_click","setTimeout","onSelect","select_node","on_select","toggleExpand","fnCallback","passedExpand","$callbacks","expand","__expanded__","_fnGetHash","__parent__","getHash","setHash","_hashKey","isUndefinedOrNull","__hashKey__","accept","dropEnabled","calsIndent","level","skipUnit","skipEdge","unit","edge","droppable","draggable","dragEnabled","beforeDrop","changeKey","_key","__uid__","Math","random","__selected__","clone","_clone","this","remove","_this","delayReload","temp","splice","__index__","reload_data","clearInfo","__inited__","__visible__","add","pos","push","deleteScope","_hash","setScope","getScope","enableDrag","enableDrop","placeElm","undefined","horizontal","dragDelay","enabledMove","statusMove","enabledHotkey","enabledCollapse","statusElm","dragging","beforeDrag","dragStop","info","passed","changed","drag","target","dropped","_nodeAdd","_parent","_node","_move","move","_parentRemove","_parentAdd","isMove","dragStart","event","dragMove","setDragging","dragInfo","enableMove","val","enableStatus","enabledStatus","hideStatus","addClass","hidden","refreshStatus","statusElmOld","getMove","getCopy","attr","find","append","removeClass","setPositionStatus","e","css","left","pageX","top","pageY","z-index","status","targeting","getPrevSibling","_index","__parent_real__","getNode","index","initPlace","dragElm","isTable","document","createElement","_len_down","empty","place","height","parentNode","insertBefore","hidePlace","showPlace","getScopeTree","$safeApply","phase","$root","$$phase","$apply","hiddenChild","nodeScope","_fnInitFilter","_fnInitOrderBy","_fnGetControl","w","i","len","_curW","_typeW","_nameW","_defaultW","_scopeW","_NotW","_AfterW","_BeforeW","timeReloadData","tmpTreeData","_defaultFilterOption","showParent","showChild","beginAnd","_watches","isHotkey","templateCopy","_url","get","setCopy","templateMove","setMove","treeClass","test","trim","getExpandOn","expandOn","expandingProperty","$tree","getColDefs","colDefs","isArray","orderBy","filters","_passed","_iF","_keysF","Object","keys","_lenF","enabledFilter","option","isObject","filterOptions","primaryKey","indentUnit","optCallbacks","forEach","value","key","lenW","check_exist_attr","generateWatch","$watch","equals","timeLoadData","attrs","existAttr","isAnd","isUndefined","exist","for_each_attrs","type","nameAttr","valDefault","nameScope","fnNotExist","fnAfter","fnBefore","indexOf","_firstNode","_keys","_regex","RegExp","_col_defs","field","do_f","root","parent_real","visible","_icon","_index_real","_dept","expandLevel","__index_real__","__level__","__icon__","__icon_class__","__dept__","init_data","data","oData","_data","_tree_nodes","columnDefs","filter","updateLimit","$TreeLimit","compile","tElement","$_Template","_element","html","_fnInitDrag","ready","checkTreeTable","template","attrInclude","elemNode","treeInclude","cache","then","response","tempDiv","innerHTML","setTemplate","templateNode","promiseCheck","templateUrl","getPath","fnInitTreeDnDViewport","$q","viewport","updateTimeout","renderTime","isUpdating","isRender","updateAgain","items","$initViewport","setViewport","getViewport","updateDelayed","getItems","eWindow","on","update","width","prop","documentElement","clientWidth","clientHeight","body","scrollTop","scrollLeft","recursivePromise","number","cancel","module","constant","nodes","handle","directive","link","new_val","compileReplace","replaceWith","$node_class","childsElem","enabledDnD","keyNode","treeDndNode","first","getData","getScopeNode","objexpr","objprops","keyO","lenO","hashKey","skipAttr","keepAttr","lenKeep","join","newVal","oldVal","nodeOf","parentReal","_childs","$on","$nodes_class","$inject","factory","line2tree","parentKey","callback","parentId","rootIds","item","_primary","treeObjs","console","error","log","tree2tree","access_child","containKey","_copy","_child","_tree","_$helper","nodrag","targetElm","eventObj","obj","targetTouches","originalEvent","drop","offset","boundingClientRect","getBoundingClientRect","pageYOffset","pageXOffset","positionStarted","offsetX","offsetY","startX","lastX","startY","lastY","nowX","nowY","distX","distY","dirAx","dirX","dirY","lastDirX","lastDirY","distAxX","distAxY","positionMoved","firstMoving","newAx","abs","moving","replaceIndent","children","isTreeDndNode","isTreeDndNodes","isTreeDndNodeHandle","isTreeDndDroppable","closestByAttr","fnClosestByAttr","$parent","isPassed","$injector","name","has","scopes","path","$id","movePath","copyPath","$filter","options","keyChild","_filter","_fnConvert","_state","_fnBeforeClear","_fnAfter","filter_index","_fnBefore","fieldChild","parentPassed","_nodePassed","_childPassed","_filter_index","_fnCheck","err","_fnProccess","condition","conditions","for_each_filter","_iO","_keysO","_lenO","_callback","isNodePassed","isChildPassed","isParentPassed","__filtered__","__filtered_visible__","__filtered_index__","_fnOrderBy","fnOrderBy","_fnOrder","list","isString","_fnDragMove","$params","_$scope","dragStarted","preventDefault","getSelection","removeAllRanges","selection","leftElmPos","topElmPos","document_height","document_width","offsetEdge","top_scroll","window","bottom_scroll","innerHeight","scrollBy","targetScope","targetBefore","targetOffset","isEmpty","isSwapped","_scope","_target","fnSwapTree","targetX","targetY","isChanged","isVeritcal","_info","_drag","_drop","treeScope","isHolder","_offset","_fnPlaceHolder","elementFromPoint","_height","_prev","dragBorder","after","prepend","dragDelaying","_fnDragEnd","$$apply","_status","clearData","_fnBindDrag","unbind","dragEndEvent","dragMoveEvent","dragCancelEvent","_fnDragStartEvent","hasTouch","button","which","uiTreeDragging","eventScope","eventElm","dragScope","eventElmTagName","toLowerCase","_tbody","_frag","_width","_needCollapse","_copied","createDocumentFragment","bind","max","scrollHeight","offsetHeight","scrollWidth","offsetWidth","_fnDragStart","dragTimer","bindDrag","dragEnd","keydownHandler","keyCode","shiftKey","_fnKeydownHandler","keyupHandler","_fnKeyupHandler","fnSetCollapse","fnSetExpand","expand_all_parents","deselect_node","get_parent","for_all_ancestors","collapse_all_parents","add_node","new_node","add_node_root","expand_all","collapse_all","remove_node","expand_node","collapse_node","get_selected_node","get_first_node","get_children","get_siblings","get_next_sibling","get_prev_sibling","get_first_child","get_closest_ancestor_next_sibling","get_next_node","get_prev_node","get_last_descendant","select_parent_node","select_first_node","firstNode","select_next_sibling","select_prev_sibling","select_next_node","select_prev_node","run","put"],"mappings":"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","file":"ng-tree-dnd.min.js","sourcesContent":["/**\n * The MIT License (MIT)\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to\n * deal in the Software without restriction, including without limitation the\n * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n * sell copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS\n * IN THE SOFTWARE.\n * @preserve\n */\n\n/**\n * Implementing TreeDnD & Event DrapnDrop (allow drag multi tree-table include all type: table, ol, ul)\n * Demo: http://thienhung1989.github.io/angular-tree-dnd\n * Github: https://github.com/thienhung1989/angular-tree-dnd\n * @version 3.0.7\n * @preserve\n * (c) 2015 Nguyuễn Thiện Hùng - <nguyenthienhung1989@gmail.com>\n */\n(function () {\n    'use strict';\n    angular.isUndefinedOrNull = isUndefinedOrNull;\n\n    angular.isDefined = isDefined;\n\n    angular.module('ntt.TreeDnD', ['template/TreeDnD/TreeDnD.html'])\n        .constant('$TreeDnDClass', {\n            tree:   'tree-dnd',\n            empty:  'tree-dnd-empty',\n            hidden: 'tree-dnd-hidden',\n            node:   'tree-dnd-node',\n            nodes:  'tree-dnd-nodes',\n            handle: 'tree-dnd-handle',\n            place:  'tree-dnd-placeholder',\n            drag:   'tree-dnd-drag',\n            status: 'tree-dnd-status',\n            icon:   {\n                '1':  'glyphicon glyphicon-minus',\n                '0':  'glyphicon glyphicon-plus',\n                '-1': 'glyphicon glyphicon-file'\n            }\n        });angular.module('ntt.TreeDnD')\n    .controller('treeDndNodeHandleController', [\n        '$scope', '$element',\n        function ($scope, $element) {\n            this.scope = $scope;\n\n            $scope.$element = $element;\n            $scope.$type    = 'treeDndNodeHandle';\n        }\n    ]);\n\nangular.module('ntt.TreeDnD')\n    .controller('treeDndNodeController', [\n        '$scope', '$element',\n        function ($scope, $element) {\n            this.scope = $scope;\n\n            $scope.$element = $element;\n            $scope.$type    = 'treeDndNodeHandle';\n        }\n    ]);\n\nangular.module('ntt.TreeDnD')\n    .controller('treeDndNodesController', [\n        '$scope', '$element',\n        function ($scope, $element) {\n            this.scope = $scope;\n\n            $scope.$element = $element;\n            $scope.$type    = 'treeDndNodeHandle';\n        }\n    ]);\n\nangular.module('ntt.TreeDnD')\n    .directive('compile', [\n        '$compile',\n        function ($compile) {\n            return {\n                restrict: 'A',\n                link:     function (scope, element, attrs) {\n                    scope.$watch(\n                        attrs.compile, function (new_val) {\n                            if (new_val) {\n                                if (angular.isFunction(element.empty)) {\n                                    element.empty();\n                                } else {\n                                    element.html('');\n                                }\n\n                                element.append($compile(new_val)(scope));\n                            }\n                        }\n                    );\n                }\n            };\n        }]\n    )\n    .directive('compileReplace', [\n        '$compile',\n        function ($compile) {\n            return {\n                restrict: 'A',\n                link:     function (scope, element, attrs) {\n                    scope.$watch(\n                        attrs.compileReplace, function (new_val) {\n                            if (new_val) {\n                                element.replaceWith($compile(new_val)(scope));\n                            }\n                        }\n                    );\n                }\n            };\n        }]\n    );\n\nangular.module('ntt.TreeDnD')\r    .directive('treeDndNodeHandle', function () {\r        return {\r            restrict:   'A',\r            scope:      true,\r            controller: 'treeDndNodeHandleController',\r            link:       fnLink\r        };\r\r        function fnLink(scope, element/*, attrs, controller*/) {\r            scope.$type = 'TreeDnDNodeHandle';\r            if (scope.$class.handle) {\r                element.addClass(scope.$class.handle);\r            }\r        }\r    });\n\nangular.module('ntt.TreeDnD')\n    .directive('treeDndNode', [\n        '$TreeDnDViewport',\n        function ($TreeDnDViewport) {\n            return {\n                restrict:   'A',\n                replace:    true,\n                controller: 'treeDndNodeController',\n                link:       fnLink\n            };\n\n            function fnLink(scope, element, attrs) {\n\n                scope.$node_class = '';\n\n                if (scope.$class.node) {\n                    element.addClass(scope.$class.node);\n                    scope.$node_class = scope.$class.node;\n                }\n                var enabledDnD = typeof scope.dragEnabled === 'boolean' || typeof scope.dropEnabled === 'boolean',\n                    keyNode    = attrs.treeDndNode,\n                    first      = true,\n                    childsElem;\n\n                $TreeDnDViewport.add(scope, element);\n\n                if (enabledDnD) {\n                    scope.$type = 'TreeDnDNode';\n\n                    scope.getData = function () {\n                        return scope[keyNode];\n                    };\n                }\n\n                scope.$element            = element;\n                scope[keyNode].__inited__ = true;\n\n                scope.getElementChilds = function () {\n                    return angular.element(element[0].querySelector('[tree-dnd-nodes]'));\n                };\n\n                scope.setScope(scope, scope[keyNode]);\n\n                scope.getScopeNode = function () {\n                    return scope;\n                };\n\n                var objprops = [],\n                    objexpr,\n                    i, keyO  = Object.keys(scope[keyNode]),\n                    lenO     = keyO.length,\n                    hashKey  = scope[keyNode].__hashKey__,\n                    skipAttr = [\n                        '__visible__',\n                        '__children__',\n                        '__level__',\n                        '__index__',\n                        '__index_real__',\n\n                        '__parent__',\n                        '__parent_real__',\n                        '__dept__',\n                        '__icon__',\n                        '__icon_class__'\n                    ],\n                    keepAttr = [\n                        '__expanded__'\n                    ],\n                    lenKeep  = keepAttr.length;\n\n                // skip __visible__\n                for (i = 0; i < lenO + lenKeep; i++) {\n                    if (i < lenO) {\n                        if (skipAttr.indexOf(keyO[i]) === -1) {\n                            objprops.push(keyNode + '.' + keyO[i]);\n                        }\n                    } else {\n                        if (keyO.indexOf(keepAttr[i - lenO]) === -1) {\n                            objprops.push(keyNode + '.' + keepAttr[i - lenO]);\n                        }\n                    }\n                }\n\n                objexpr = '[' + objprops.join(',') + ']';\n\n                scope.$watch(objexpr, fnWatchNode, true);\n\n                scope.$on('$destroy', function () {\n                    scope.deleteScope(scope, scope[keyNode]);\n                });\n\n                function fnWatchNode(newVal, oldVal, scope) {\n                    var nodeOf = scope[keyNode],\n                        _icon;\n\n                    if (typeof nodeOf !== 'object') {\n                        return; // jmp out\n                    }\n\n                    if (first) {\n                        _icon                 = nodeOf.__icon__;\n                        nodeOf.__icon_class__ = scope.$class.icon[_icon];\n                    } else {\n\n                        var parentReal = nodeOf.__parent_real__,\n                            parentNode = scope.tree_nodes[parentReal] || undefined;\n\n                        if (!nodeOf.__inited__) {\n                            nodeOf.__inited__ = true;\n                        }\n\n                        if (nodeOf.__hashKey__ !== hashKey) {\n                            // clear scope in $globals\n                            scope.deleteScope(scope, nodeOf);\n\n                            // add new scope into $globals\n                            scope.setScope(scope, nodeOf);\n                            hashKey = nodeOf.__hashKey__;\n                        }\n\n                        if (parentNode && (!parentNode.__expanded__ || !parentNode.__visible__)) {\n                            element.addClass(scope.$class.hidden);\n                            nodeOf.__visible__ = false;\n                        } else {\n                            element.removeClass(scope.$class.hidden);\n                            nodeOf.__visible__ = true;\n                        }\n\n                        var _childs = nodeOf.__children__,\n                            _len    = _childs.length,\n                            _i;\n\n\n                        if (_len === 0) {\n                            _icon = -1;\n                        } else {\n                            if (nodeOf.__expanded__) {\n                                _icon = 1;\n                            } else {\n                                _icon = 0;\n                            }\n                        }\n\n                        nodeOf.__icon__       = _icon;\n                        nodeOf.__icon_class__ = scope.$class.icon[_icon];\n\n                        if (!scope.isTable) {\n                            if (!childsElem) {\n                                childsElem = scope.getElementChilds();\n                            }\n\n                            if (nodeOf.__expanded__) {\n                                childsElem.removeClass(scope.$class.hidden);\n                            } else {\n                                childsElem.addClass(scope.$class.hidden);\n                            }\n                        }\n\n                        for (_i = 0; _i < _len; _i++) {\n                            scope.for_all_descendants(_childs[_i], scope.hiddenChild, nodeOf, true);\n                        }\n\n                    }\n\n                    first = false;\n\n                }\n            }\n        }]\n    );\n\nangular.module('ntt.TreeDnD')\n    .directive('treeDndNodes', function () {\n        return {\n            restrict:   'A',\n            replace:    true,\n            controller: 'treeDndNodesController',\n            link:       fnLink\n        };\n\n        function fnLink(scope, element/*, attrs*/) {\n            scope.$type = 'TreeDnDNodes';\n\n            if (scope.$class.nodes) {\n                element.addClass(scope.$class.nodes);\n                scope.$nodes_class = scope.$class.nodes;\n            } else {\n                scope.$nodes_class = '';\n            }\n        }\n    });\n\nangular.module('ntt.TreeDnD')\n    .directive(\n        'treeDnd', fnInitTreeDnD);\n\nfnInitTreeDnD.$inject = [\n    '$timeout', '$http', '$compile', '$parse', '$window', '$document', '$templateCache',\n    '$TreeDnDTemplate', '$TreeDnDClass', '$TreeDnDHelper', '$TreeDnDPlugin', '$TreeDnDViewport'\n];\n\nfunction fnInitTreeDnD($timeout, $http, $compile, $parse, $window, $document, $templateCache,\n                       $TreeDnDTemplate, $TreeDnDClass, $TreeDnDHelper, $TreeDnDPlugin, $TreeDnDViewport) {\n    return {\n        restrict:   'E',\n        scope:      true,\n        replace:    true,\n        controller: ['$scope', '$element', '$attrs', fnController],\n        compile:    fnCompile\n    };\n\n    function fnController($scope, $element, $attrs) {\n        $scope.indent      = 20;\n        $scope.indent_plus = 15;\n        $scope.indent_unit = 'px';\n        $scope.$tree_class = 'table';\n        $scope.primary_key = '__uid__';\n\n        $scope.$type          = 'TreeDnD';\n        // $scope.enabledFilter = undefined;\n        $scope.colDefinitions = [];\n        $scope.$globals       = {};\n        $scope.$class         = {};\n\n        $scope.treeData   = [];\n        $scope.tree_nodes = [];\n\n        $scope.$class = angular.copy($TreeDnDClass);\n        angular.extend(\n            $scope.$class.icon, {\n                '1':  $attrs.iconExpand || 'glyphicon glyphicon-minus',\n                '0':  $attrs.iconCollapse || 'glyphicon glyphicon-plus',\n                '-1': $attrs.iconLeaf || 'glyphicon glyphicon-file'\n            }\n        );\n\n        $scope.for_all_descendants = function (node, fn, parent, checkSibling) {\n            if (angular.isFunction(fn)) {\n                var _i, _len, _nodes;\n\n                if (fn(node, parent)) {\n                    // have error or need ignore children\n                    return false;\n                }\n                _nodes = node.__children__;\n                _len   = _nodes ? _nodes.length : 0;\n                for (_i = 0; _i < _len; _i++) {\n                    if (!$scope.for_all_descendants(_nodes[_i], fn, node) && !checkSibling) {\n                        // skip sibling of node checking\n                        return false;\n                    }\n                }\n            }\n            // succeed then continue\n            return true;\n        };\n\n        $scope.getLastDescendant = function (node) {\n            var last_child, n;\n            if (!node) {\n                node = $scope.tree ? $scope.tree.selected_node : false;\n            }\n            if (node === false) {\n                return false;\n            }\n            n = node.__children__.length;\n            if (n === 0) {\n                return node;\n            } else {\n                last_child = node.__children__[n - 1];\n                return $scope.getLastDescendant(last_child);\n            }\n        };\n\n        $scope.getElementChilds = function () {\n            return angular.element($element[0].querySelector('[tree-dnd-nodes]'));\n        };\n\n        $scope.onClick = function (node) {\n            if (angular.isDefined($scope.tree) && angular.isFunction($scope.tree.on_click)) {\n                // We want to detach from Angular's digest cycle so we can\n                // independently measure the time for one cycle.\n                setTimeout(\n                    function () {\n                        $scope.tree.on_click(node);\n                    }, 0\n                );\n            }\n        };\n\n        $scope.onSelect = function (node) {\n            if (angular.isDefined($scope.tree)) {\n                if (node !== $scope.tree.selected_node) {\n                    $scope.tree.select_node(node);\n                }\n\n                if (angular.isFunction($scope.tree.on_select)) {\n                    setTimeout(\n                        function () {\n                            $scope.tree.on_select(node);\n                        }, 0\n                    );\n                }\n            }\n        };\n\n        $scope.toggleExpand = function (node, fnCallback) {\n            var passedExpand;\n\n            if (angular.isFunction(fnCallback)) {\n                passedExpand = !!fnCallback(node);\n            } else if (typeof $scope.$callbacks === 'object' && angular.isFunction($scope.$callbacks.expand)) {\n                passedExpand = !!$scope.$callbacks.expand(node);\n            }\n\n            // just for node has children\n            if (node.__children__.length > 0) {\n                if (typeof passedExpand !== 'undefined') {\n                    node.__expanded__ = passedExpand;\n                } else {\n                    node.__expanded__ = !node.__expanded__;\n                }\n            }\n        };\n\n\n        var _fnGetHash = function (node) {\n                return '#' + node.__parent__ + '#' + node[$scope.primary_key];\n            },\n            _fnSetHash = function (node) {\n                var _hashKey = _fnGetHash(node);\n\n                if (angular.isUndefinedOrNull(node.__hashKey__) || node.__hashKey__ !== _hashKey) {\n                    node.__hashKey__ = _hashKey;\n                }\n\n                return node;\n            };\n\n        $scope.getHash = _fnGetHash;\n\n        $scope.$callbacks = {\n            getHash:             _fnGetHash,\n            setHash:             _fnSetHash,\n            for_all_descendants: $scope.for_all_descendants,\n            /*expand:              function (node) {\n             return true;\n             },*/\n            accept:              function (/*dragInfo, moveTo, isChanged*/) {\n                return $scope.dropEnabled === true;\n            },\n            calsIndent:          function (level, skipUnit, skipEdge) {\n                var unit = 0,\n                    edge = skipEdge ? 0 : $scope.indent_plus;\n                if (!skipUnit) {\n                    unit = $scope.indent_unit ? $scope.indent_unit : 'px';\n                }\n\n                if (level - 1 < 1) {\n                    return edge + unit;\n                } else {\n                    return $scope.indent * (level - 1) + edge + unit;\n                }\n            },\n            droppable:           function () {\n                return $scope.dropEnabled === true;\n            },\n            draggable:           function () {\n                return $scope.dragEnabled === true;\n            },\n            beforeDrop:          function (/*event*/) {\n                return true;\n            },\n            changeKey:           function (node) {\n                var _key     = node.__uid__;\n                node.__uid__ = Math.random();\n                if (node.__selected__) {\n                    delete node.__selected__;\n                }\n\n                if ($scope.primary_key !== '__uid__') {\n                    _key = '' + node[$scope.primary_key];\n                    _key = _key.replace(/_#.+$/g, '') + '_#' + node.__uid__;\n\n                    node[$scope.primary_key] = _key;\n                }\n                // delete(node.__hashKey__);\n            },\n            clone:               function (node/*, _this*/) {\n                var _clone = angular.copy(node);\n\n                this.for_all_descendants(_clone, this.changeKey);\n\n                return _clone;\n            },\n            remove:              function (node, parent, _this, delayReload) {\n                var temp = parent.splice(node.__index__, 1)[0];\n                if (!delayReload) {\n                    $scope.reload_data();\n                }\n                return temp;\n            },\n            clearInfo:           function (node) {\n                delete node.__inited__;\n                delete node.__visible__;\n\n                // always changed after call reload_data\n                //delete node.__hashKey__;\n            },\n            add:                 function (node, pos, parent/*, _this*/) {\n                // clearInfo\n                this.for_all_descendants(node, this.clearInfo);\n                if (parent) {\n                    if (parent.length > -1) {\n                        if (pos > -1) {\n                            parent.splice(pos, 0, node);\n                        } else {\n                            // todo If children need load crazy\n                            parent.push(node);\n                        }\n                    } else {\n                        parent.push(node);\n                    }\n                }\n            }\n        };\n\n        $scope.deleteScope = function (scope, node) {\n            var _hash = node.__hashKey__;\n            if ($scope.$globals[_hash] && $scope.$globals[_hash] === scope) {\n                delete $scope.$globals[_hash];\n            }\n        };\n\n        $scope.setScope = function (scope, node) {\n            var _hash = node.__hashKey__;\n            if ($scope.$globals[_hash] !== scope) {\n                $scope.$globals[_hash] = scope;\n            }\n        };\n\n        $scope.getScope = function (node) {\n            if (node) {\n                var _hash = node.__hashKey__;\n                //var _hash = typeof node === 'string' ? node : node.__hashKey__;\n                return $scope.$globals[_hash];\n            }\n\n            return $scope;\n        };\n\n        if ($attrs.enableDrag || $attrs.enableDrop) {\n            $scope.placeElm    = undefined;\n            //                            $scope.dragBorder = 30;\n            $scope.dragEnabled = undefined;\n            $scope.dropEnabled = undefined;\n            $scope.horizontal  = undefined;\n\n            if ($attrs.enableDrag) {\n\n                $scope.dragDelay       = 0;\n                $scope.enabledMove     = true;\n                $scope.statusMove      = true;\n                $scope.enabledHotkey   = false;\n                $scope.enabledCollapse = undefined;\n                $scope.statusElm       = undefined;\n                $scope.dragging        = undefined;\n\n                angular.extend(\n                    $scope.$callbacks, {\n                        beforeDrag: function (/*scopeDrag*/) {\n                            return true;\n                        },\n                        dragStop:   function (info, passed) {\n                            if (!info || !info.changed && info.drag.enabledMove || !passed) {\n                                return; // jmp out\n                            }\n\n                            info.target.reload_data();\n\n                            if (info.target !== info.drag && info.drag.enabledMove) {\n                                info.drag.reload_data();\n                            }\n                        },\n                        dropped:    function (info/*, pass*/) {\n                            if (!info) {\n                                return; // jmp out\n                            }\n\n                            var _node         = info.node,\n                                _nodeAdd,\n                                _move         = info.move,\n                                _parent,\n                                _parentRemove = info.parent || info.drag.treeData,\n                                _parentAdd    = _move.parent || info.target.treeData,\n                                isMove        = info.drag.enabledMove;\n\n                            if (!info.changed && isMove) {\n                                return false;\n                            }\n\n                            if (info.target.$callbacks.accept(info, info.move, info.changed)) {\n                                if (isMove) {\n                                    _parent = _parentRemove;\n                                    if (angular.isDefined(_parent.__children__)) {\n                                        _parent = _parent.__children__;\n                                    }\n\n                                    _nodeAdd = info.drag.$callbacks.remove(\n                                        _node,\n                                        _parent,\n                                        info.drag.$callbacks,\n                                        true // delay reload\n                                    );\n                                } else {\n                                    _nodeAdd = info.drag.$callbacks.clone(_node, info.drag.$callbacks);\n                                }\n\n                                // if node dragging change index in sample node parent\n                                // and index node decrement\n                                if (isMove &&\n                                    info.drag === info.target &&\n                                    _parentRemove === _parentAdd &&\n                                    _move.pos >= info.node.__index__) {\n                                    _move.pos--;\n                                }\n\n                                _parent = _parentAdd;\n                                if (_parent.__children__) {\n                                    _parent = _parent.__children__;\n                                }\n\n                                info.target.$callbacks.add(\n                                    _nodeAdd,\n                                    _move.pos,\n                                    _parent,\n                                    info.drag.$callbacks\n                                );\n\n                                return true;\n                            }\n\n                            return false;\n                        },\n                        dragStart:  function (event) {\n                        },\n                        dragMove:   function (event) {\n                        }\n                    }\n                );\n\n                $scope.setDragging = function (dragInfo) {\n                    $scope.dragging = dragInfo;\n                };\n\n                $scope.enableMove = function (val) {\n                    if (typeof val === 'boolean') {\n                        $scope.enabledMove = val;\n                    } else {\n                        $scope.enabledMove = true;\n                    }\n                };\n\n                if ($attrs.enableStatus) {\n                    $scope.enabledStatus = false;\n\n                    $scope.hideStatus = function () {\n                        if ($scope.statusElm) {\n                            $scope.statusElm.addClass($scope.$class.hidden);\n                        }\n                    };\n\n                    $scope.refreshStatus = function () {\n                        if (!$scope.dragging) {\n                            return;\n                        }\n\n                        if ($scope.enabledStatus) {\n                            var statusElmOld = $scope.statusElm;\n                            if ($scope.enabledMove) {\n                                $scope.statusElm = angular.element($TreeDnDTemplate.getMove($scope));\n                            } else {\n                                $scope.statusElm = angular.element($TreeDnDTemplate.getCopy($scope));\n                            }\n\n                            if (statusElmOld !== $scope.statusElm) {\n                                if (statusElmOld) {\n                                    $scope.statusElm.attr('class', statusElmOld.attr('class'));\n                                    $scope.statusElm.attr('style', statusElmOld.attr('style'));\n                                    statusElmOld.remove();\n                                }\n                                $document.find('body').append($scope.statusElm);\n\n                            }\n\n                            $scope.statusElm.removeClass($scope.$class.hidden);\n                        }\n                    };\n\n                    $scope.setPositionStatus = function (e) {\n                        if ($scope.statusElm) {\n                            $scope.statusElm.css(\n                                {\n                                    'left':    e.pageX + 10 + 'px',\n                                    'top':     e.pageY + 15 + 'px',\n                                    'z-index': 9999\n                                }\n                            );\n                            $scope.statusElm.addClass($scope.$class.status);\n                        }\n                    };\n                }\n            }\n\n            $scope.targeting = false;\n\n            $scope.getPrevSibling = function (node) {\n                if (node && node.__index__ > 0) {\n                    var _parent, _index = node.__index__ - 1;\n\n                    if (angular.isDefined(node.__parent_real__)) {\n                        _parent = $scope.tree_nodes[node.__parent_real__];\n\n                        return _parent.__children__[_index];\n                    }\n\n                    return $scope.treeData[_index];\n\n                }\n            };\n\n            $scope.getNode = function (index) {\n                if (angular.isUndefinedOrNull(index)) {\n                    return; // jmp out\n                }\n\n                return $scope.tree_nodes[index];\n            };\n\n            $scope.initPlace = function (element, dragElm) {\n\n                if (!$scope.placeElm) {\n                    if ($scope.isTable) {\n                        $scope.placeElm = angular.element($window.document.createElement('tr'));\n\n                        var _len_down = $scope.colDefinitions.length;\n\n                        $scope.placeElm.append(\n                            angular.element($window.document.createElement('td'))\n                                .addClass($scope.$class.empty)\n                                .addClass('indented')\n                                .addClass($scope.$class.place)\n                        );\n\n                        while (_len_down-- > 0) {\n                            $scope.placeElm.append(\n                                angular.element($window.document.createElement('td'))\n                                    .addClass($scope.$class.empty)\n                                    .addClass($scope.$class.place)\n                            );\n                        }\n                    } else {\n                        $scope.placeElm = angular.element($window.document.createElement('li'))\n                            .addClass($scope.$class.empty)\n                            .addClass($scope.$class.place);\n                    }\n\n                }\n\n                if (dragElm) {\n                    $scope.placeElm.css('height', $TreeDnDHelper.height(dragElm) + 'px');\n                }\n\n                if (element) {\n                    element[0].parentNode.insertBefore($scope.placeElm[0], element[0]);\n                } else {\n                    $scope.getElementChilds().append($scope.placeElm);\n                }\n\n                return $scope.placeElm;\n            };\n\n            $scope.hidePlace = function () {\n                if ($scope.placeElm) {\n                    $scope.placeElm.addClass($scope.$class.hidden);\n                }\n            };\n\n            $scope.showPlace = function () {\n                if ($scope.placeElm) {\n                    $scope.placeElm.removeClass($scope.$class.hidden);\n                }\n            };\n\n            $scope.getScopeTree = function () {\n                return $scope;\n            };\n\n        }\n\n        $scope.$safeApply = $safeApply;\n\n        $scope.hiddenChild = function fnHiddenChild(node, parent) {\n            var nodeScope = $scope.getScope(node);\n            if (nodeScope) {\n                if (parent && parent.__expanded__ && parent.__visible__) {\n                    nodeScope.$element.removeClass($scope.$class.hidden);\n                    node.__visible__ = true;\n                } else {\n                    nodeScope.$element.addClass($scope.$class.hidden);\n                    node.__visible__ = false;\n                }\n            } else {\n                // show node & init scope\n                if (parent && parent.__expanded__ && parent.__visible__) {\n                    node.__visible__ = true;\n                } else {\n                    node.__visible__ = false;\n                }\n            }\n\n            // skip all child hiding... if not expaned\n            return node.__expanded__ === false;\n        };\n\n        var _fnInitFilter,\n            _fnInitOrderBy,\n            _fnGetControl,\n            _defaultFilterOption = {\n                showParent: true,\n                showChild:  false,\n                beginAnd:   true\n            },\n            tree,\n            _watches             = [\n                [\n                    'enableDrag',\n                    [\n                        ['boolean', 'enableStatus', undefined, 'enabledStatus'],\n                        ['boolean', 'enableMove', undefined, 'enabledMove'],\n                        ['number', 'dragDelay', 0, undefined, 0],\n                        ['boolean', 'enableCollapse', undefined, 'enabledCollapse'],\n                        ['boolean', 'enableHotkey', undefined, 'enabledHotkey', undefined, function (isHotkey) {\n                            if (isHotkey) {\n                                $scope.enabledMove = false;\n                            } else {\n                                $scope.enabledMove = $scope.statusMove;\n                            }\n                        }]\n                    ]\n                ],\n                [\n                    ['enableDrag', 'enableStatus'], [\n                    ['string', 'templateCopy', $attrs.templateCopy, 'templateCopy', undefined, function (_url) {\n                        if (_url && $templateCache.get(_url)) {\n                            $TreeDnDTemplate.setCopy(_url, $scope);\n                        }\n                    }],\n                    ['string', 'templateMove', $attrs.templateMove, 'templateMove', undefined, function (_url) {\n                        if (_url && $templateCache.get(_url)) {\n                            $TreeDnDTemplate.setMove(_url, $scope);\n                        }\n                    }]\n                ]],\n                [\n                    [['enableDrag', 'enableDrop']], [\n                    ['number', 'dragBorder', 30, 'dragBorder', 30]]\n                ],\n                [\n                    '*', [\n                    ['boolean', 'treeTable', true, 'treeTable', undefined],\n                    ['boolean', 'horizontal'],\n                    ['callback', 'treeClass', function (val) {\n                        switch (typeof val) {\n                            case 'string':\n                                $scope.$tree_class = val;\n                                break;\n                            case 'object':\n                                angular.extend($scope.$class, val);\n                                $scope.$tree_class = $scope.$class.tree;\n                                break;\n                            default:\n                                $scope.$tree_class = $attrs.treeClass;\n                                break;\n                        }\n                    }, 'treeClass', function () {\n                        $scope.$tree_class = $scope.$class.tree + ' table';\n                    }, undefined, function () {\n                        if (/^(\\s+[\\w\\-]+){2,}$/g.test(' ' + $attrs.treeClass)) {\n                            $scope.$tree_class = $attrs.treeClass.trim();\n                            return true;\n                        }\n                    }],\n                    [\n                        ['object', 'string'], 'expandOn', getExpandOn, 'expandingProperty', getExpandOn,\n                        function (expandOn) {\n                            if (angular.isUndefinedOrNull(expandOn)) {\n                                $scope.expandingProperty = $attrs.expandOn;\n                            }\n                        }],\n                    ['object', 'treeControl', angular.isDefined($scope.tree) ? $scope.tree : {},\n                        'tree', undefined, function ($tree) {\n\n                        if (!angular.isFunction(_fnGetControl)) {\n                            _fnGetControl = $TreeDnDPlugin('$TreeDnDControl');\n                        }\n\n                        if (angular.isFunction(_fnGetControl)) {\n                            tree = angular.extend(\n                                $tree,\n                                _fnGetControl($scope)\n                            );\n                        }\n                    }],\n                    [\n                        ['array', 'object'], 'columnDefs', getColDefs, 'colDefinitions', getColDefs,\n                        function (colDefs) {\n                            if (angular.isUndefinedOrNull(colDefs) || !angular.isArray(colDefs)) {\n                                $scope.colDefinitions = getColDefs();\n                            }\n                        }],\n                    [\n                        ['object', 'string', 'array', 'function'], 'orderBy', $attrs.orderBy\n                    ],\n                    [\n                        ['object', 'array'], 'filter', undefined, 'filter', undefined, function (filters) {\n                        var _passed = false;\n                        if (angular.isDefined(filters) && !angular.isArray(filters)) {\n                            var _keysF = Object.keys(filters),\n                                _lenF  = _keysF.length, _iF;\n\n                            if (_lenF > 0) {\n                                for (_iF = 0; _iF < _lenF; _iF++) {\n\n                                    if (typeof filters[_keysF[_iF]] === 'string' &&\n                                        filters[_keysF[_iF]].length === 0) {\n                                        continue;\n                                    }\n                                    _passed = true;\n                                    break;\n                                }\n                            }\n                        }\n\n                        $scope.enabledFilter = _passed;\n                        reload_data();\n                    }],\n                    [\n                        'object', 'filterOptions', _defaultFilterOption, 'filterOptions',\n                        _defaultFilterOption, function (option) {\n                        if (angular.isObject(option)) {\n                            $scope.filterOptions = angular.extend(_defaultFilterOption, option);\n                        }\n                    }],\n                    ['string', 'primaryKey', $attrs.primaryKey, 'primary_key', '__uid__'],\n                    ['string', 'indentUnit', $attrs.indentUnit, 'indent_unit'],\n                    ['number', 'indent', 30, undefined, 30],\n                    ['number', 'indentPlus', 20, undefined, 20],\n                    ['null', 'callbacks', function (optCallbacks) {\n                        angular.forEach(\n                            optCallbacks, function (value, key) {\n                                if (typeof value === 'function') {\n                                    if ($scope.$callbacks[key]) {\n                                        $scope.$callbacks[key] = value;\n                                    }\n                                }\n                            }\n                        );\n\n                        return $scope.$callbacks;\n                    },\n                        '$callbacks'\n                    ],\n                    ['number', 'expandLevel', 3, 'expandLevel', 3, function () {\n                        reload_data();\n                    }],\n                    ['number', 'treeLimit', 100, '$TreeLimit', 100],\n                    ['boolean', 'enableDrag', undefined, 'dragEnabled'],\n                    ['boolean', 'enableDrop', undefined, 'dropEnabled']\n                ]]\n            ],\n            w, lenW              = _watches.length,\n            i, len,\n            _curW,\n            _typeW, _nameW, _defaultW, _scopeW, _NotW, _AfterW, _BeforeW,\n\n            // debounce reload_Data;\n            timeReloadData, tmpTreeData;\n\n        for (w = 0; w < lenW; w++) {\n            // skip if not exist\n            if (!check_exist_attr($attrs, _watches[w][0], true)) {\n                continue;\n            }\n\n            _curW = _watches[w][1];\n            for (i = 0, len = _curW.length; i < len; i++) {\n                _typeW    = _curW[i][0];\n                _nameW    = _curW[i][1];\n                _defaultW = _curW[i][2];\n                _scopeW   = _curW[i][3];\n                _NotW     = _curW[i][4];\n                _AfterW   = _curW[i][5];\n                _BeforeW  = _curW[i][6];\n                generateWatch(_typeW, _nameW, _defaultW, _scopeW, _NotW, _AfterW, _BeforeW);\n            }\n        }\n\n        if ($attrs.treeData) {\n            $scope.$watch(\n                $attrs.treeData, function (val) {\n                    if (angular.equals(val, $scope.treeData)) {\n                        return;\n                    }\n\n                    tmpTreeData = val;\n                    if (angular.isUndefinedOrNull(timeReloadData)) {\n                        timeReloadData = $timeout(timeLoadData, 350);\n                    }\n                }, true\n            );\n        }\n\n        function timeLoadData() {\n            $scope.treeData = tmpTreeData;\n            reload_data();\n            timeReloadData = undefined;\n        }\n\n        $scope.updateLimit = function updateLimit() {\n            //console.log('Call fn UpdateLimit');\n            $scope.$TreeLimit += 50;\n        };\n\n        $scope.reload_data = reload_data;\n\n        function check_exist_attr(attrs, existAttr, isAnd) {\n            if (angular.isUndefinedOrNull(existAttr)) {\n                return false;\n            }\n\n            if (existAttr === '*' || !angular.isUndefined(attrs[existAttr])) {\n                return true;\n            }\n\n            if (angular.isArray(existAttr)) {\n                return for_each_attrs(attrs, existAttr, isAnd);\n            }\n        }\n\n        function for_each_attrs(attrs, exist, isAnd) {\n            var i, len = exist.length, passed = false;\n\n            if (len === 0) {\n                return; // jmp out\n            }\n\n            for (i = 0; i < len; i++) {\n                if (check_exist_attr(attrs, exist[i], !isAnd)) {\n                    passed = true;\n                    if (!isAnd) {\n                        return true;\n                    }\n                } else {\n                    if (isAnd) {\n                        return false;\n                    }\n                }\n            }\n\n            return passed;\n        }\n\n        function generateWatch(type, nameAttr, valDefault, nameScope, fnNotExist, fnAfter,\n                               fnBefore) {\n            nameScope = nameScope || nameAttr;\n            if (typeof type === 'string' || angular.isArray(type)) {\n                if (angular.isFunction(fnBefore) && fnBefore()) {\n                    return;//jmp\n                }\n\n                if (typeof $attrs[nameAttr] === 'string') {\n                    $scope.$watch(\n                        $attrs[nameAttr], function (val) {\n                            if (typeof type === 'string' && typeof val === type ||\n                                angular.isArray(type) && type.indexOf(typeof val) > -1\n                            ) {\n                                $scope[nameScope] = val;\n                            } else {\n                                if (angular.isFunction(valDefault)) {\n                                    $scope[nameScope] = valDefault(val);\n                                } else {\n                                    $scope[nameScope] = valDefault;\n                                }\n                            }\n\n                            if (angular.isFunction(fnAfter)) {\n                                fnAfter($scope[nameScope], $scope);\n                            }\n                        }, true\n                    );\n                } else {\n\n                    if (angular.isFunction(fnNotExist)) {\n                        $scope[nameScope] = fnNotExist();\n                    } else if (!angular.isUndefined(fnNotExist)) {\n                        $scope[nameScope] = fnNotExist;\n                    }\n                }\n            }\n        }\n\n        function $safeApply(fn) {\n            var phase = this.$root.$$phase;\n            if (phase === '$apply' || phase === '$digest') {\n                if (fn && typeof fn === 'function') {\n                    fn();\n                }\n            } else {\n                this.$apply(fn);\n            }\n        }\n\n        function getExpandOn() {\n            if ($scope.treeData && $scope.treeData.length) {\n                var _firstNode = $scope.treeData[0], _keys = Object.keys(_firstNode),\n                    _regex                                 = new RegExp('^__([a-zA-Z0-9_\\-]*)__$'),\n                    _len,\n                    i;\n                // Auto get first field with type is string;\n                for (i = 0, _len = _keys.length; i < _len; i++) {\n                    if (typeof _firstNode[_keys[i]] === 'string' && !_regex.test(_keys[i])) {\n                        $scope.expandingProperty = _keys[i];\n\n                        return; // jmp out\n                    }\n                }\n\n                // Auto get first\n                if (angular.isUndefinedOrNull($scope.expandingProperty)) {\n                    $scope.expandingProperty = _keys[0];\n                }\n\n            }\n        }\n\n        function getColDefs() {\n            // Auto get Defs except attribute __level__ ....\n            if ($scope.treeData.length) {\n                var _col_defs = [], _firstNode = $scope.treeData[0],\n                    _regex                     = new RegExp('(^__([a-zA-Z0-9_\\-]*)__$|^' + $scope.expandingProperty + '$)'),\n                    _keys                      = Object.keys(_firstNode),\n                    i, _len;\n\n                // Auto get first field with type is string;\n                for (i = 0, _len = _keys.length; i < _len; i++) {\n                    if (typeof _firstNode[_keys[i]] === 'string' && !_regex.test(_keys[i])) {\n                        _col_defs.push(\n                            {\n                                field: _keys[i]\n                            }\n                        );\n                    }\n                }\n\n                $scope.colDefinitions = _col_defs;\n            }\n        }\n\n        function do_f(root, node, parent, parent_real, level, visible, index) {\n\n            if (typeof node !== 'object') {\n                return 0;\n            }\n\n            var _i, _len, _icon, _index_real, _dept, _hashKey;\n\n            if (!angular.isArray(node.__children__)) {\n                node.__children__ = [];\n            }\n\n            node.__parent_real__ = parent_real;\n            node.__parent__      = parent;\n            _len                 = node.__children__.length;\n\n            if (angular.isUndefinedOrNull(node.__expanded__) && _len > 0) {\n                node.__expanded__ = level < $scope.expandLevel;\n            }\n\n            if (_len === 0) {\n                _icon = -1;\n            } else {\n                if (node.__expanded__) {\n                    _icon = 1;\n                } else {\n                    _icon = 0;\n                }\n            }\n\n            // Insert item vertically\n            _index_real         = root.length;\n            node.__index__      = index;\n            node.__index_real__ = _index_real;\n            node.__level__      = level;\n            node.__icon__       = _icon;\n            node.__icon_class__ = $scope.$class.icon[_icon];\n            node.__visible__    = !!visible;\n\n            if (angular.isUndefinedOrNull(node.__uid__)) {\n                node.__uid__ = '' + Math.random();\n            }\n\n            _hashKey = $scope.getHash(node);\n\n            if (angular.isUndefinedOrNull(node.__hashKey__) || node.__hashKey__ !== _hashKey) {\n                node.__hashKey__ = _hashKey;\n            }\n\n            root.push(node);\n\n            // Check node children\n            _dept = 1;\n            if (_len > 0) {\n                for (_i = 0; _i < _len; _i++) {\n                    _dept += do_f(\n                        root,\n                        node.__children__[_i],\n                        node[$scope.primary_key],\n                        _index_real,\n                        level + 1,\n                        visible && node.__expanded__,\n                        _i\n                    );\n                }\n            }\n\n            node.__dept__ = _dept;\n\n            return _dept;\n        }\n\n        function init_data(data) {\n\n            // clear memory\n            if (angular.isDefined($scope.tree_nodes)) {\n                delete $scope.tree_nodes;\n            }\n\n            $scope.tree_nodes = data;\n\n            return data;\n        }\n\n        function reload_data(oData) {\n            var _data,\n                _len,\n                _tree_nodes = [];\n\n            if (angular.isDefined(oData)) {\n                if (!angular.isArray(oData) || oData.length === 0) {\n                    return init_data([]);\n                } else {\n                    _data = oData;\n                }\n            } else if (!angular.isArray($scope.treeData) || $scope.treeData.length === 0) {\n                return init_data([]);\n            } else {\n                _data = $scope.treeData;\n            }\n\n            if (!$attrs.expandOn) {\n                getExpandOn();\n            }\n\n            if (!$attrs.columnDefs) {\n                getColDefs();\n            }\n\n            if (angular.isDefined($scope.orderBy)) {\n                if (!angular.isFunction(_fnInitOrderBy)) {\n                    _fnInitOrderBy = $TreeDnDPlugin('$TreeDnDOrderBy');\n                }\n\n                if (angular.isFunction(_fnInitOrderBy)) {\n                    _data = _fnInitOrderBy(_data, $scope.orderBy);\n                }\n            }\n\n            if (angular.isDefined($scope.filter)) {\n                if (!angular.isFunction(_fnInitFilter)) {\n                    _fnInitFilter = $TreeDnDPlugin('$TreeDnDFilter');\n                }\n\n                if (angular.isFunction(_fnInitFilter)) {\n                    _data = _fnInitFilter(_data, $scope.filter, $scope.filterOptions);\n                }\n            }\n\n            _len = _data.length;\n            if (_len > 0) {\n                var _i,\n                    _deptTotal = 0;\n\n                for (_i = 0; _i < _len; _i++) {\n                    _deptTotal += do_f(_tree_nodes, _data[_i], undefined, undefined, 1, true, _i);\n                }\n\n            }\n\n            init_data(_tree_nodes);\n\n            return _tree_nodes;\n        }\n    }\n\n    function fnCompile(tElement) {\n\n        var $_Template = '',\n            _element   = tElement.html().trim();\n\n        if (_element.length > 0) {\n            $_Template = _element;\n            tElement.html('');\n        }\n\n        return function fnPost(scope, element, attrs) {\n\n            if (typeof attrs === 'object' && attrs.enableDrag) {\n                var _fnInitDrag = $TreeDnDPlugin('$TreeDnDDrag');\n                if (angular.isFunction(_fnInitDrag)) {\n                    _fnInitDrag(scope, element, $window, $document);\n                }\n            }\n\n            // kick out $digest\n            element.ready(function () {\n                // apply Template\n                function checkTreeTable(template, scope) {\n                    var elemNode = template[0].querySelector('[tree-dnd-node]'),\n                        attrInclude;\n\n                    scope.isTable = undefined;\n                    if (elemNode) {\n                        elemNode    = angular.element(elemNode);\n                        attrInclude = elemNode.attr('ng-include');\n                    } else {\n                        return;\n                    }\n\n                    if (attrInclude) {\n                        var treeInclude = $parse(attrInclude)(scope) || attrInclude;\n                        if (typeof treeInclude === 'string') {\n                            return $http.get(\n                                treeInclude,\n                                {cache: $templateCache}\n                            ).then(function (response) {\n                                    var data          = response.data || '';\n                                    data              = data.trim();\n                                    //scope.templateNode = data;\n                                    var tempDiv       = document.createElement('div');\n                                    tempDiv.innerHTML = data;\n                                    tempDiv           = angular.element(tempDiv);\n                                    scope.isTable     = !tempDiv[0].querySelector('[tree-dnd-nodes]');\n                                }\n                            );\n                        }\n                    } else {\n                        scope.isTable = !elemNode[0].querySelector('[tree-dnd-nodes]');\n                        //scope.templateNode = elemNode.html();\n                    }\n                    $TreeDnDViewport.setTemplate(scope, scope.templateNode);\n                    //elemNode.html('');\n                }\n\n                //scope.$watch(tableDataLoaded, transformTable);\n                /*\n                 function tableDataLoaded(elem) {\n                 // first cell in the tbody exists when data is loaded but doesn't have a width\n                 // until after the table is transformed\n                 var firstCell = elem.querySelector('tbody tr:first-child td:first-child');\n                 return firstCell && !firstCell.style.width;\n                 }\n\n                 function transformTable(elem, attrs) {\n                 // reset display styles so column widths are correct when measured below\n                 angular.element(elem.querySelectorAll('thead, tbody, tfoot')).css('display', '');\n\n                 // wrap in $timeout to give table a chance to finish rendering\n                 $timeout(function () {\n                 // set widths of columns\n                 angular.forEach(elem.querySelectorAll('tr:first-child th'), function (thElem, i) {\n\n                 var tdElems = elem.querySelector('tbody tr:first-child td:nth-child(' + (i + 1) + ')');\n                 var tfElems = elem.querySelector('tfoot tr:first-child td:nth-child(' + (i + 1) + ')');\n\n                 var columnWidth = tdElems ? tdElems.offsetWidth : thElem.offsetWidth;\n                 if (tdElems) {\n                 tdElems.style.width = columnWidth + 'px';\n                 }\n                 if (thElem) {\n                 thElem.style.width = columnWidth + 'px';\n                 }\n                 if (tfElems) {\n                 tfElems.style.width = columnWidth + 'px';\n                 }\n                 });\n\n                 // set css styles on thead and tbody\n                 angular.element(elem.querySelectorAll('thead, tfoot')).css('display', 'block');\n\n                 angular.element(elem.querySelectorAll('tbody')).css({\n                 'display':  'block',\n                 'height':   attrs.tableHeight || 'inherit',\n                 'overflow': 'auto'\n                 });\n\n                 // reduce width of last column by width of scrollbar\n                 var tbody          = elem.querySelector('tbody');\n                 var scrollBarWidth = tbody.offsetWidth - tbody.clientWidth;\n                 if (scrollBarWidth > 0) {\n                 // for some reason trimming the width by 2px lines everything up better\n                 scrollBarWidth -= 2;\n                 var lastColumn         = elem.querySelector('tbody tr:first-child td:last-child');\n                 lastColumn.style.width = lastColumn.offsetWidth - scrollBarWidth + 'px';\n                 }\n                 });\n                 }*/\n                var promiseCheck;\n                if ($_Template.length > 0) {\n                    promiseCheck = checkTreeTable(angular.element($_Template.trim()), scope);\n                    if (angular.isObject(promiseCheck)) {\n                        promiseCheck.then(function () {\n                            element.append($compile($_Template)(scope));\n                        });\n                    } else {\n                        element.append($compile($_Template)(scope));\n                    }\n                } else {\n                    $http.get(\n                        attrs.templateUrl || $TreeDnDTemplate.getPath(),\n                        {cache: $templateCache}\n                    ).then(function (response) {\n                            var data     = response.data || '';\n                            data         = angular.element(data.trim());\n                            promiseCheck = checkTreeTable(data, scope);\n                            if (angular.isObject(promiseCheck)) {\n                                promiseCheck.then(function () {\n                                    element.append($compile(data)(scope));\n                                });\n                            } else {\n                                element.append($compile(data)(scope));\n                            }\n                        }\n                    );\n                }\n            });\n        };\n    }\n}\n\n\nangular.module('ntt.TreeDnD')\n    .factory('$TreeDnDConvert', function () {\n        var _$initConvert = {\n            line2tree: function (data, primaryKey, parentKey, callback) {\n                callback = typeof callback === 'function' ? callback : function () {\n                };\n\n                if (!data || data.length === 0 || !primaryKey || !parentKey) {\n                    return [];\n                }\n\n                var tree     = [],\n                    rootIds  = [],\n                    item     = data[0],\n                    _primary = item[primaryKey],\n                    treeObjs = {},\n                    parentId, parent,\n                    len      = data.length,\n                    i        = 0;\n\n                while (i < len) {\n                    item = data[i++];\n                    callback(item);\n                    _primary           = item[primaryKey];\n                    treeObjs[_primary] = item;\n                }\n\n\n                i = 0;\n                while (i < len) {\n                    item = data[i++];\n\n                    callback(item);\n\n                    _primary           = item[primaryKey];\n                    treeObjs[_primary] = item;\n                    parentId           = item[parentKey];\n\n                    if (parentId) {\n                        parent = treeObjs[parentId];\n                        if (parent) {\n                            if (parent.__children__) {\n                                if (angular.isArray(parent.__children__)) {\n                                    parent.__children__.push(item);\n                                } else {\n                                    console.error('Type of `parent.__children__` isn\\'t array');\n                                    console.log(parent.__children__);\n                                }\n                            } else {\n                                parent.__children__ = [item];\n                            }\n                        }\n                    } else {\n                        rootIds.push(_primary);\n                    }\n                }\n\n                len = rootIds.length;\n                for (i = 0; i < len; i++) {\n                    tree.push(treeObjs[rootIds[i]]);\n                }\n\n                return tree;\n            },\n            tree2tree: function access_child(data, containKey, callback) {\n                callback = typeof callback === 'function' ? callback : function () {\n                };\n\n                var _tree = [],\n                    _i,\n                    _len  = data ? data.length : 0,\n                    _copy, _child;\n\n                for (_i = 0; _i < _len; _i++) {\n                    _copy = angular.copy(data[_i]);\n\n                    callback(_copy);\n\n                    if (angular.isArray(_copy[containKey]) && _copy[containKey].length > 0) {\n                        _child = access_child(_copy[containKey], containKey, callback);\n                        delete _copy[containKey];\n                        _copy.__children__ = _child;\n                    }\n\n                    _tree.push(_copy);\n                }\n\n                return _tree;\n            }\n        };\n\n        return _$initConvert;\n    });\n\nangular.module('ntt.TreeDnD')\n    .factory('$TreeDnDHelper', [\n        '$document', '$window',\n        function ($document, $window) {\n            var _$helper = {\n                nodrag:          function (targetElm) {\n                    return typeof targetElm.attr('data-nodrag') !== 'undefined';\n                },\n                eventObj:        function (e) {\n                    var obj = e;\n\n                    if (e.targetTouches !== undefined) {\n                        obj = e.targetTouches.item(0);\n                    } else if (e.originalEvent !== undefined && e.originalEvent.targetTouches !== undefined) {\n                        obj = e.originalEvent.targetTouches.item(0);\n                    }\n\n                    return obj;\n                },\n                dragInfo:        function (scope) {\n                    var _node   = scope.getData(),\n                        _tree   = scope.getScopeTree(),\n                        _parent = scope.getNode(_node.__parent_real__);\n\n                    return {\n                        node:    _node,\n                        parent:  _parent,\n                        move:    {\n                            parent: _parent,\n                            pos:    _node.__index__\n                        },\n                        scope:   scope,\n                        target:  _tree,\n                        drag:    _tree,\n                        drop:    scope.getPrevSibling(_node),\n                        changed: false\n                    };\n                },\n                height:          function (element) {\n                    return element.prop('scrollHeight');\n                },\n                width:           function (element) {\n                    return element.prop('scrollWidth');\n                },\n                offset:          function (element) {\n                    var boundingClientRect = element[0].getBoundingClientRect();\n\n                    return {\n                        width:  element.prop('offsetWidth'),\n                        height: element.prop('offsetHeight'),\n                        top:    boundingClientRect.top + ($window.pageYOffset || $document[0].body.scrollTop || $document[0].documentElement.scrollTop),\n                        left:   boundingClientRect.left + ($window.pageXOffset || $document[0].body.scrollLeft || $document[0].documentElement.scrollLeft)\n                    };\n                },\n                positionStarted: function (e, target) {\n                    return {\n                        offsetX:  e.pageX - this.offset(target).left,\n                        offsetY:  e.pageY - this.offset(target).top,\n                        startX:   e.pageX,\n                        lastX:    e.pageX,\n                        startY:   e.pageY,\n                        lastY:    e.pageY,\n                        nowX:     0,\n                        nowY:     0,\n                        distX:    0,\n                        distY:    0,\n                        dirAx:    0,\n                        dirX:     0,\n                        dirY:     0,\n                        lastDirX: 0,\n                        lastDirY: 0,\n                        distAxX:  0,\n                        distAxY:  0\n                    };\n                },\n                positionMoved:   function (e, pos, firstMoving) {\n                    // mouse position last events\n                    pos.lastX = pos.nowX;\n                    pos.lastY = pos.nowY;\n\n                    // mouse position this events\n                    pos.nowX = e.pageX;\n                    pos.nowY = e.pageY;\n\n                    // distance mouse moved between events\n                    pos.distX = pos.nowX - pos.lastX;\n                    pos.distY = pos.nowY - pos.lastY;\n\n                    // direction mouse was moving\n                    pos.lastDirX = pos.dirX;\n                    pos.lastDirY = pos.dirY;\n\n                    // direction mouse is now moving (on both axis)\n                    pos.dirX = pos.distX === 0 ? 0 : pos.distX > 0 ? 1 : -1;\n                    pos.dirY = pos.distY === 0 ? 0 : pos.distY > 0 ? 1 : -1;\n\n                    // axis mouse is now moving on\n                    var newAx = Math.abs(pos.distX) > Math.abs(pos.distY) ? 1 : 0;\n\n                    // do nothing on first move\n                    if (firstMoving) {\n                        pos.dirAx  = newAx;\n                        pos.moving = true;\n\n                        return; // jmp out\n                    }\n\n                    // calc distance moved on this axis (and direction)\n                    if (pos.dirAx !== newAx) {\n                        pos.distAxX = 0;\n                        pos.distAxY = 0;\n                    } else {\n                        pos.distAxX += Math.abs(pos.distX);\n                        if (pos.dirX !== 0 && pos.dirX !== pos.lastDirX) {\n                            pos.distAxX = 0;\n                        }\n                        pos.distAxY += Math.abs(pos.distY);\n                        if (pos.dirY !== 0 && pos.dirY !== pos.lastDirY) {\n                            pos.distAxY = 0;\n                        }\n                    }\n\n                    pos.dirAx = newAx;\n                },\n                replaceIndent:   function (scope, element, indent, attr) {\n                    attr = attr || 'left';\n                    angular.element(element.children()[0]).css(attr, scope.$callbacks.calsIndent(indent));\n                },\n\n                isTreeDndNode:       function (element) {\n                    if (element) {\n                        var $element = angular.element(element);\n                        return $element && $element.length && typeof $element.attr('tree-dnd-node') !== 'undefined';\n                    }\n\n                    return false;\n                },\n                isTreeDndNodes:      function (element) {\n                    if (element) {\n                        var $element = angular.element(element);\n\n                        return $element && $element.length && typeof $element.attr('tree-dnd-nodes') !== 'undefined';\n                    }\n\n                    return false;\n                },\n                isTreeDndNodeHandle: function (element) {\n                    if (element) {\n                        var $element = angular.element(element);\n\n                        return $element && $element.length && typeof $element.attr('tree-dnd-node-handle') !== 'undefined';\n                    }\n\n                    return false;\n                },\n                isTreeDndDroppable:  function (element) {\n                    return _$helper.isTreeDndNode(element)\n                        || _$helper.isTreeDndNodes(element)\n                        || _$helper.isTreeDndNodeHandle(element);\n                },\n                closestByAttr:       function fnClosestByAttr(element, attr) {\n                    if (element && attr) {\n                        var $element = angular.element(element),\n                            $parent  = $element.parent();\n\n                        if ($parent) {\n                            var isPassed = false;\n\n                            switch (typeof attr) {\n                                case 'function':\n                                    isPassed = attr($parent);\n                                    break;\n                                default:\n                                    isPassed = typeof $parent.attr(attr) !== 'undefined';\n                                    break;\n                            }\n\n                            if (isPassed) {\n                                return $parent;\n                            } else {\n                                return fnClosestByAttr($parent);\n                            }\n                        }\n                    }\n                }\n            };\n\n            return _$helper;\n        }]\n    );\n\nangular.module('ntt.TreeDnD')\n    .factory('$TreeDnDPlugin', [\n        '$injector',\n        function ($injector) {\n            var _fnget = function (name) {\n                if (angular.isDefined($injector) && $injector.has(name)) {\n                    return $injector.get(name);\n                }\n            };\n\n            return _fnget;\n        }]\n    );\n\nangular.module('ntt.TreeDnD')\n    .factory('$TreeDnDTemplate', [\n        '$templateCache',\n        function ($templateCache) {\n            var templatePath = 'template/TreeDnD/TreeDnD.html',\n                copyPath     = 'template/TreeDnD/TreeDnDStatusCopy.html',\n                movePath     = 'template/TreeDnD/TreeDnDStatusMove.html',\n                scopes       = {},\n                _$init       = {\n                    setMove: function (path, scope) {\n                        if (!scopes[scope.$id]) {\n                            scopes[scope.$id] = {};\n                        }\n                        scopes[scope.$id].movePath = path;\n                    },\n                    setCopy: function (path, scope) {\n                        if (!scopes[scope.$id]) {\n                            scopes[scope.$id] = {};\n                        }\n                        scopes[scope.$id].copyPath = path;\n                    },\n                    getPath: function () {\n                        return templatePath;\n                    },\n                    getCopy: function (scope) {\n                        if (scopes[scope.$id] && scopes[scope.$id].copyPath) {\n                            var temp = $templateCache.get(scopes[scope.$id].copyPath);\n                            if (temp) {\n                                return temp;\n                            }\n                        }\n\n                        return $templateCache.get(copyPath);\n                    },\n                    getMove: function (scope) {\n                        if (scopes[scope.$id] && scopes[scope.$id].movePath) {\n                            var temp = $templateCache.get(scopes[scope.$id].movePath);\n                            if (temp) {\n                                return temp;\n                            }\n                        }\n\n                        return $templateCache.get(movePath);\n                    }\n                };\n\n            return _$init;\n        }]\n    );\n\nangular.module('ntt.TreeDnD')\n    .factory('$TreeDnDViewport', fnInitTreeDnDViewport);\n\nfnInitTreeDnDViewport.$inject = ['$window', '$document', '$timeout', '$q', '$compile'];\n\nfunction fnInitTreeDnDViewport($window, $document, $timeout, $q, $compile) {\n\n    var viewport,\n        isUpdating    = false,\n        isRender      = false,\n        updateAgain   = false,\n        viewportRect,\n        items         = [],\n        nodeTemplate,\n        updateTimeout,\n        renderTime,\n        $initViewport = {\n            setViewport:   setViewport,\n            getViewport:   getViewport,\n            add:           add,\n            setTemplate:   setTemplate,\n            getItems:      getItems,\n            updateDelayed: updateDelayed\n        },\n        eWindow       = angular.element($window);\n\n    eWindow.on('load resize scroll', updateDelayed);\n\n    return $initViewport;\n\n    function update() {\n\n        viewportRect = {\n            width:  eWindow.prop('offsetWidth') || document.documentElement.clientWidth,\n            height: eWindow.prop('offsetHeight') || document.documentElement.clientHeight,\n            top:    $document[0].body.scrollTop || $document[0].documentElement.scrollTop,\n            left:   $document[0].body.scrollLeft || $document[0].documentElement.scrollLeft\n        };\n\n        if (isUpdating || isRender) {\n            updateAgain = true;\n\n            return; // jmp out\n        }\n\n        isUpdating = true;\n\n        recursivePromise();\n    }\n\n    function recursivePromise() {\n        if (isRender) {\n            return;\n        }\n\n        var number = number > 0 ? number : items.length, item;\n\n        if (number > 0) {\n            item = items[0];\n\n            isRender   = true;\n            renderTime = $timeout(function () {\n                //item.element.html(nodeTemplate);\n                //$compile(item.element.contents())(item.scope);\n\n                items.splice(0, 1);\n                isRender = false;\n                number--;\n                $timeout.cancel(renderTime);\n                recursivePromise();\n            }, 0);\n\n        } else {\n            isUpdating = false;\n            if (updateAgain) {\n                updateAgain = false;\n                update();\n            }\n        }\n\n    }\n\n    /**\n     * Check if a point is inside specified bounds\n     * @param x\n     * @param y\n     * @param bounds\n     * @returns {boolean}\n     */\n    function pointIsInsideBounds(x, y, bounds) {\n        return x >= bounds.left &&\n            y >= bounds.top &&\n            x <= bounds.left + bounds.width &&\n            y <= bounds.top + bounds.height;\n    }\n\n    /**\n     * @name setViewport\n     * @desciption Set the viewport element\n     * @param element\n     */\n    function setViewport(element) {\n        viewport = element;\n    }\n\n    /**\n     * Return the current viewport\n     * @returns {*}\n     */\n    function getViewport() {\n        return viewport;\n    }\n\n    /**\n     * trigger an update\n     */\n    function updateDelayed() {\n        $timeout.cancel(updateTimeout);\n\n        updateTimeout = $timeout(\n            function () {\n                update();\n            },\n            0\n        );\n    }\n\n    /**\n     * Add listener for event\n     * @param element\n     * @param callback\n     */\n    function add(scope, element) {\n        updateDelayed();\n\n        items.push({\n            element: element,\n            scope:   scope\n        });\n    }\n\n    function setTemplate(scope, template) {\n        nodeTemplate = template;\n    }\n\n    /**\n     * Get list of items\n     * @returns {Array}\n     */\n    function getItems() {\n        return items;\n    }\n}\n\nangular.module('ntt.TreeDnD')\n    .factory('$TreeDnDFilter', [\n        '$filter', function ($filter) {\n            return fnInitFilter;\n\n            function for_all_descendants(options, node, fieldChild, fnBefore, fnAfter, parentPassed) {\n                if (!angular.isFunction(fnBefore)) {\n                    return; // jmp out\n                }\n\n                var _i, _len, _nodes,\n                    _nodePassed   = fnBefore(options, node),\n                    _childPassed  = false,\n                    _filter_index = options.filter_index;\n\n                if (angular.isDefined(node[fieldChild])) {\n                    _nodes = node[fieldChild];\n                    _len   = _nodes.length;\n\n                    options.filter_index = 0;\n                    for (_i = 0; _i < _len; _i++) {\n                        _childPassed = for_all_descendants(\n                            options,\n                            _nodes[_i],\n                            fieldChild,\n                            fnBefore,\n                            fnAfter,\n                            _nodePassed || parentPassed\n                        ) || _childPassed;\n                    }\n\n                    // restore filter_index of node\n                    options.filter_index = _filter_index;\n                }\n\n                if (angular.isFunction(fnAfter)) {\n                    fnAfter(options, node, _nodePassed === true, _childPassed === true, parentPassed === true);\n                }\n\n                return _nodePassed || _childPassed;\n            }\n\n            /**\n             * Check data with callback\n             * @param {string|object|function|regex} callback\n             * @param {*} data\n             * @returns {undefined|boolean}\n             * @private\n             */\n            function _fnCheck(callback, data) {\n                if (angular.isUndefinedOrNull(data) || angular.isArray(data)) {\n                    return; // jmp out\n                }\n\n                if (angular.isFunction(callback)) {\n                    return callback(data, $filter);\n                } else {\n                    if (typeof callback === 'boolean') {\n                        data = !!data;\n                        return data === callback;\n                    } else if (angular.isDefined(callback)) {\n                        try {\n                            var _regex = new RegExp(callback);\n                            return _regex.test(data);\n                        }\n                        catch (err) {\n                            if (typeof data === 'string') {\n                                return data.indexOf(callback) > -1;\n                            } else {\n                                return; // jmp out\n                            }\n                        }\n                    } else {\n                        return; // jmp out\n                    }\n                }\n            }\n\n            /**\n             * `fnProcess` to call `_fnCheck`. If `condition` is `array` then call `for_each_filter`\n             * else will call `_fnCheck`. Specical `condition.field` is `_$` then apply `condition.callback` for all field, if have `field` invaild then `return true`.\n             *\n             * @param node\n             * @param condition\n             * @param isAnd\n             * @returns {null|boolean}\n             * @private\n             */\n            function _fnProccess(node, condition, isAnd) {\n                if (angular.isArray(condition)) {\n                    return for_each_filter(node, condition, isAnd);\n                } else {\n                    var _key      = condition.field,\n                        _callback = condition.callback,\n                        _iO, _keysO, _lenO;\n\n                    if (_key === '_$') {\n                        _keysO = Object.keys(node);\n                        _lenO  = _keysO.length;\n                        for (_iO = 0; _iO < _lenO; _iO++) {\n                            if (_fnCheck(_callback, node[_keysO[_iO]])) {\n                                return true;\n                            }\n                        }\n                    } else if (angular.isDefined(node[_key])) {\n                        return _fnCheck(_callback, node[_key]);\n                    }\n                }\n            }\n\n            /**\n             *\n             * @param {object} node\n             * @param {array} conditions Array `conditions`\n             * @param {boolean} isAnd check with condition `And`, if `And` then `return false` when all `false`\n             * @returns {undefined|boolean}\n             */\n            function for_each_filter(node, conditions, isAnd) {\n                var i, len = conditions.length || 0, passed = false;\n                if (len === 0) {\n                    return; // jmp out\n                }\n\n                for (i = 0; i < len; i++) {\n                    if (_fnProccess(node, conditions[i], !isAnd)) {\n                        passed = true;\n                        // if condition `or` then return;\n                        if (!isAnd) {\n                            return true;\n                        }\n                    } else {\n\n                        // if condition `and` and result in fnProccess = false then return;\n                        if (isAnd) {\n                            return false;\n                        }\n                    }\n                }\n\n                return passed;\n            }\n\n            /**\n             * Will call _fnAfter to clear data no need\n             * @param {object} options\n             * @param {object} node\n             * @param {boolean} isNodePassed\n             * @param {boolean} isChildPassed\n             * @param {boolean} isParentPassed\n             * @private\n             */\n            function _fnAfter(options, node, isNodePassed, isChildPassed, isParentPassed) {\n                if (isNodePassed === true) {\n                    node.__filtered__         = true;\n                    node.__filtered_visible__ = true;\n                    node.__filtered_index__   = options.filter_index++;\n                    return; //jmp\n                } else if (isChildPassed === true && options.showParent === true\n                    || isParentPassed === true && options.showChild === true) {\n                    node.__filtered__         = false;\n                    node.__filtered_visible__ = true;\n                    node.__filtered_index__   = options.filter_index++;\n                    return; //jmp\n                }\n\n                // remove attr __filtered__\n                delete node.__filtered__;\n                delete node.__filtered_visible__;\n                delete node.__filtered_index__;\n            }\n\n            /**\n             * `fnBefore` will called when `for_all_descendants` of `node` checking.\n             * If `filter` empty then return `true` else result of function `_fnProccess` {@see _fnProccess}\n             *\n             * @param {object} options\n             * @param {object} node\n             * @returns {null|boolean}\n             * @private\n             */\n            function _fnBefore(options, node) {\n                if (options.filter.length === 0) {\n                    return true;\n                } else {\n                    return _fnProccess(node, options.filter, options.beginAnd || false);\n                }\n            }\n\n            /**\n             * `fnBeforeClear` will called when `for_all_descendants` of `node` checking.\n             * Alway false to Clear Filter empty\n             *\n             * @param {object} options\n             * @param {object} node\n             * @returns {null|boolean}\n             * @private\n             */\n            function _fnBeforeClear(options, node) {\n                return false;\n            }\n\n            /**\n             * `_fnConvert` to convert `filter` `object` to `array` invaild.\n             *\n             * @param {object|array} filters\n             * @returns {array} Instead of `filter` or new array invaild *(converted from filter)*\n             * @private\n             */\n            function _fnConvert(filters) {\n                var _iF, _lenF, _keysF,\n                    _filter,\n                    _state;\n\n                // convert filter object to array filter\n                if (angular.isObject(filters) && !angular.isArray(filters)) {\n                    _keysF  = Object.keys(filters);\n                    _lenF   = _keysF.length;\n                    _filter = [];\n\n                    if (_lenF > 0) {\n                        for (_iF = 0; _iF < _lenF; _iF++) {\n\n                            if (typeof filters[_keysF[_iF]] === 'string' && filters[_keysF[_iF]].length === 0) {\n                                continue;\n                            } else if (angular.isArray(filters[_keysF[_iF]])) {\n                                _state = filters[_keysF[_iF]];\n                            } else if (angular.isObject(filters[_keysF[_iF]])) {\n                                _state = _fnConvert(filters[_keysF[_iF]]);\n                            } else {\n                                _state = {\n                                    field:    _keysF[_iF],\n                                    callback: filters[_keysF[_iF]]\n                                };\n                            }\n                            _filter.push(_state);\n                        }\n                    }\n\n                    return _filter;\n                }\n                else {\n                    return filters;\n                }\n            }\n\n            /**\n             * `fnInitFilter` function is constructor of service `$TreeDnDFilter`.\n             * @constructor\n             * @param {object|array} treeData\n             * @param {object|array} filters\n             * @param {object} options\n             * @param {string} keyChild\n             * @returns {array} Return `treeData` or `treeData` with `filter`\n             * @private\n             */\n            function fnInitFilter(treeData, filters, options, keyChild) {\n                if (!angular.isArray(treeData)\n                    || treeData.length === 0) {\n                    return treeData;\n                }\n\n                var _i, _len,\n                    _filter;\n\n                _filter = _fnConvert(filters);\n                if (!(angular.isArray(_filter) || angular.isObject(_filter))\n                    || _filter.length === 0) {\n                    for (_i = 0, _len = treeData.length; _i < _len; _i++) {\n                        for_all_descendants(\n                            options,\n                            treeData[_i],\n                            keyChild || '__children__',\n                            _fnBeforeClear, _fnAfter\n                        );\n                    }\n\n                    return treeData;\n                }\n\n                options.filter       = _filter;\n                options.filter_index = 0;\n                for (_i = 0, _len = treeData.length; _i < _len; _i++) {\n                    for_all_descendants(\n                        options,\n                        treeData[_i],\n                        keyChild || '__children__',\n                        _fnBefore, _fnAfter\n                    );\n                }\n\n                return treeData;\n            }\n\n        }]\n    );\n\nangular.module('ntt.TreeDnD')\n    .factory('$TreeDnDOrderBy', [\n        '$filter',\n        function ($filter) {\n            var _fnOrderBy          = $filter('orderBy'),\n                for_all_descendants = function for_all_descendants(options, node, name, fnOrderBy) {\n                    var _i, _len, _nodes;\n\n                    if (angular.isDefined(node[name])) {\n                        _nodes = node[name];\n                        _len   = _nodes.length;\n                        // OrderBy children\n                        for (_i = 0; _i < _len; _i++) {\n                            _nodes[_i] = for_all_descendants(options, _nodes[_i], name, fnOrderBy);\n                        }\n\n                        node[name] = fnOrderBy(node[name], options);\n                    }\n\n                    return node;\n                },\n                _fnOrder            = function _fnOrder(list, orderBy) {\n                    return _fnOrderBy(list, orderBy);\n                },\n                _fnMain             = function _fnMain(treeData, orderBy) {\n                    if (!angular.isArray(treeData)\n                        || treeData.length === 0\n                        || !(angular.isArray(orderBy) || angular.isObject(orderBy) || angular.isString(orderBy) || angular.isFunction(orderBy))\n                        || orderBy.length === 0 && !angular.isFunction(orderBy)\n                    ) {\n                        return treeData;\n                    }\n\n                    var _i, _len;\n\n                    for (_i = 0, _len = treeData.length; _i < _len; _i++) {\n                        treeData[_i] = for_all_descendants(\n                            orderBy,\n                            treeData[_i],\n                            '__children__',\n                            _fnOrder\n                        );\n                    }\n\n                    return _fnOrder(treeData, orderBy);\n                };\n\n            return _fnMain;\n        }]\n    );\n\nangular.module('ntt.TreeDnD')\n    .factory('$TreeDnDDrag', [\n        '$timeout', '$TreeDnDHelper',\n        function ($timeout, $TreeDnDHelper) {\n\n            function _fnPlaceHolder(e, $params) {\n                if ($params.placeElm) {\n                    var _offset = $TreeDnDHelper.offset($params.placeElm);\n                    if (_offset.top <= e.pageY && e.pageY <= _offset.top + _offset.height &&\n                        _offset.left <= e.pageX && e.pageX <= _offset.left + _offset.width\n                    ) {\n                        return true;\n                    }\n                }\n\n                return false;\n            }\n\n            function _fnDragStart(e, $params) {\n                if (!$params.hasTouch && (e.button === 2 || e.which === 3)) {\n                    // disable right click\n                    return; // jmp out\n                }\n\n                if (e.uiTreeDragging || e.originalEvent && e.originalEvent.uiTreeDragging) { // event has already fired in other scope.\n                    return; // jmp out\n                }\n\n                // the element which is clicked.\n                var eventElm = angular.element(e.target),\n                    eventScope;\n\n                if ($TreeDnDHelper.isTreeDndNodeHandle(eventElm)) {\n                    eventScope = eventElm.controller('treeDndNodeHandle').scope;\n                } else {\n                    eventElm = $TreeDnDHelper.closestByAttr(eventElm, $TreeDnDHelper.isTreeDndNodeHandle);\n                    if (eventElm) {\n                        eventScope = eventElm.controller('treeDndNodeHandle').scope;\n                    }\n                }\n\n                if (!eventScope || !eventScope.$type) {\n                    return; // jmp out\n                }\n\n                // if (eventScope.$type !== 'TreeDnDNode') { // Check if it is a node or a handle\n                //     return; // jmp out\n                // }\n\n                if (eventScope.$type !== 'TreeDnDNodeHandle') { // If the node has a handle, then it should be clicked by the handle\n                    return; // jmp out\n                }\n\n                var eventElmTagName = eventElm.prop('tagName').toLowerCase(),\n                    dragScope,\n                    _$scope         = $params.$scope;\n\n                if (eventElmTagName === 'input'\n                    || eventElmTagName === 'textarea'\n                    || eventElmTagName === 'button'\n                    || eventElmTagName === 'select') { // if it's a input or button, ignore it\n                    return; // jmp out\n                }\n\n                // check if it or it's parents has a 'data-nodrag' attribute\n                while (eventElm && eventElm[0] && eventElm[0] !== $params.element) {\n                    if ($TreeDnDHelper.nodrag(eventElm)) { // if the node mark as `nodrag`, DONOT drag it.\n                        return; // jmp out\n                    }\n                    eventElm = eventElm.parent();\n                }\n\n                e.uiTreeDragging = true; // stop event bubbling\n\n                if (e.originalEvent) {\n                    e.originalEvent.uiTreeDragging = true;\n                }\n\n                e.preventDefault();\n\n                dragScope = eventScope.getScopeNode();\n\n                $params.dragInfo = $TreeDnDHelper.dragInfo(dragScope);\n\n                if (!_$scope.$callbacks.beforeDrag(dragScope, $params.dragInfo)) {\n                    return; // jmp out\n                }\n\n                $params.firstMoving = true;\n\n                _$scope.setDragging($params.dragInfo);\n\n                var eventObj = $TreeDnDHelper.eventObj(e);\n\n                $params.pos = $TreeDnDHelper.positionStarted(eventObj, dragScope.$element);\n\n                if (dragScope.isTable) {\n                    $params.dragElm = angular.element($params.$window.document.createElement('table'))\n                        .addClass(_$scope.$class.tree)\n                        .addClass(_$scope.$class.drag)\n                        .addClass(_$scope.$tree_class);\n                } else {\n                    $params.dragElm = angular.element($params.$window.document.createElement('ul'))\n                        .addClass(_$scope.$class.drag)\n                        .addClass('tree-dnd-nodes')\n                        .addClass(_$scope.$tree_class);\n                }\n\n                $params.dragElm.css(\n                    {\n                        'width':   $TreeDnDHelper.width(dragScope.$element) + 'px',\n                        'z-index': 9995\n                    }\n                );\n\n                $params.offsetEdge = 0;\n                var _width         = $TreeDnDHelper.width(dragScope.$element),\n                    _scope         = dragScope,\n                    _element       = _scope.$element,\n                    _clone,\n                    _needCollapse  = !!_$scope.enabledCollapse,\n                    _copied        = false,\n                    _tbody,\n                    _frag;\n\n                if (_scope.isTable) {\n                    $params.offsetEdge = $params.dragInfo.node.__level__ - 1;\n\n                    _tbody = angular.element(document.createElement('tbody'));\n                    _frag  = angular.element(document.createDocumentFragment());\n\n                    _$scope.for_all_descendants(\n                        $params.dragInfo.node, function (_node, _parent) {\n                            _scope   = _$scope.getScope(_node);\n                            _element = _scope && _scope.$element;\n                            if (_scope && _element) {\n                                if (!_copied) {\n                                    _clone = _element.clone();\n\n                                    $TreeDnDHelper.replaceIndent(\n                                        _$scope,\n                                        _clone,\n                                        _node.__level__ - $params.offsetEdge,\n                                        'padding-left'\n                                    );\n\n                                    _frag.append(_clone);\n\n                                    // skip all, just clone parent\n                                    if (_needCollapse) {\n                                        _copied = true;\n                                    }\n\n                                    // hide if have status Move;\n                                    if (_$scope.enabledMove && _$scope.$class.hidden &&\n                                        (!_parent || _node.__visible__ || _parent.__visible__ && _parent.__expanded__)) {\n                                        _element.addClass(_$scope.$class.hidden);\n                                    }\n                                }\n                            }\n                            // skip children of node not expand.\n                            return _copied || _node.__visible__ === false || _node.__expanded__ === false;\n\n                        },\n                        undefined,\n                        !_needCollapse\n                    );\n\n                    _tbody.append(_frag);\n\n                    $params.dragElm.append(_tbody);\n                } else {\n\n                    _clone = _element.clone();\n                    if (_needCollapse) {\n                        _clone[0].querySelector('[tree-dnd-nodes]').remove();\n                    }\n\n                    // hide if have status Move;\n                    $params.dragElm.append(_clone);\n                    if (_$scope.enabledMove && _$scope.$class.hidden) {\n                        _element.addClass(_$scope.$class.hidden);\n                    }\n                }\n\n                $params.dragElm.css(\n                    {\n                        'left': eventObj.pageX - $params.pos.offsetX + _$scope.$callbacks.calsIndent(\n                            $params.offsetEdge + 1,\n                            true,\n                            true\n                        ) + 'px',\n                        'top':  eventObj.pageY - $params.pos.offsetY + 'px'\n                    }\n                );\n                // moving item with descendant\n                $params.$document.find('body').append($params.dragElm);\n                if (_$scope.$callbacks.droppable()) {\n                    $params.placeElm = _$scope.initPlace(dragScope.$element, $params.dragElm);\n\n                    if (dragScope.isTable) {\n                        $TreeDnDHelper.replaceIndent(_$scope, $params.placeElm, $params.dragInfo.node.__level__);\n                    }\n\n                    $params.placeElm.css('width', _width);\n                }\n\n                _$scope.showPlace();\n                _$scope.targeting = true;\n\n                if (_$scope.enabledStatus) {\n                    _$scope.refreshStatus();\n                    _$scope.setPositionStatus(e);\n                }\n\n                angular.element($params.$document).bind('touchend', $params.dragEndEvent);\n                angular.element($params.$document).bind('touchcancel', $params.dragEndEvent);\n                angular.element($params.$document).bind('touchmove', $params.dragMoveEvent);\n                angular.element($params.$document).bind('mouseup', $params.dragEndEvent);\n                angular.element($params.$document).bind('mousemove', $params.dragMoveEvent);\n                angular.element($params.$document).bind('mouseleave', $params.dragCancelEvent);\n\n                $params.document_height = Math.max(\n                    $params.body.scrollHeight,\n                    $params.body.offsetHeight,\n                    $params.html.clientHeight,\n                    $params.html.scrollHeight,\n                    $params.html.offsetHeight\n                );\n\n                $params.document_width = Math.max(\n                    $params.body.scrollWidth,\n                    $params.body.offsetWidth,\n                    $params.html.clientWidth,\n                    $params.html.scrollWidth,\n                    $params.html.offsetWidth\n                );\n            }\n\n            function _fnDragMove(e, $params) {\n                var _$scope = $params.$scope;\n                if (!$params.dragStarted) {\n                    if (!$params.dragDelaying) {\n                        $params.dragStarted = true;\n                        _$scope.$safeApply(function () {\n                            _$scope.$callbacks.dragStart($params.dragInfo);\n                        });\n                    }\n\n                    return; // jmp out\n                }\n\n                if ($params.dragElm) {\n                    e.preventDefault();\n\n                    if ($params.$window.getSelection) {\n                        $params.$window.getSelection().removeAllRanges();\n                    } else if ($params.$window.document.selection) {\n                        $params.$window.document.selection.empty();\n                    }\n\n                    var eventObj   = $TreeDnDHelper.eventObj(e),\n                        leftElmPos = eventObj.pageX - $params.pos.offsetX,\n                        topElmPos  = eventObj.pageY - $params.pos.offsetY;\n\n                    //dragElm can't leave the screen on the left\n                    if (leftElmPos < 0) {\n                        leftElmPos = 0;\n                    }\n\n                    //dragElm can't leave the screen on the top\n                    if (topElmPos < 0) {\n                        topElmPos = 0;\n                    }\n\n                    //dragElm can't leave the screen on the bottom\n                    if (topElmPos + 10 > $params.document_height) {\n                        topElmPos = $params.document_height - 10;\n                    }\n\n                    //dragElm can't leave the screen on the right\n                    if (leftElmPos + 10 > $params.document_width) {\n                        leftElmPos = $params.document_width - 10;\n                    }\n\n                    $params.dragElm.css(\n                        {\n                            'left': leftElmPos + _$scope.$callbacks.calsIndent(\n                                $params.offsetEdge + 1,\n                                true,\n                                true\n                            ) + 'px',\n                            'top':  topElmPos + 'px'\n                        }\n                    );\n\n                    if (_$scope.enabledStatus) {\n                        _$scope.setPositionStatus(e);\n                    }\n\n                    var top_scroll    = window.pageYOffset || $params.$window.document.documentElement.scrollTop,\n                        bottom_scroll = top_scroll + (window.innerHeight || $params.$window.document.clientHeight || $params.$window.document.clientHeight);\n                    // to scroll down if cursor y-position is greater than the bottom position the vertical scroll\n                    if (bottom_scroll < eventObj.pageY && bottom_scroll <= $params.document_height) {\n                        window.scrollBy(0, 10);\n                    }\n                    // to scroll top if cursor y-position is less than the top position the vertical scroll\n                    if (top_scroll > eventObj.pageY) {\n                        window.scrollBy(0, -10);\n                    }\n\n                    $TreeDnDHelper.positionMoved(e, $params.pos, $params.firstMoving);\n\n                    if ($params.firstMoving) {\n                        $params.firstMoving = false;\n\n                        return; // jmp out\n                    }\n                    // check if add it as a child node first\n\n                    var targetX    = eventObj.pageX - $params.$window.document.body.scrollLeft,\n                        targetY    = eventObj.pageY - (window.pageYOffset || $params.$window.document.documentElement.scrollTop),\n\n                        targetElm,\n                        targetScope,\n                        targetBefore,\n                        targetOffset,\n\n                        isChanged  = true,\n                        isVeritcal = true,\n                        isEmpty,\n                        isSwapped,\n\n                        _scope,\n                        _target,\n                        _parent,\n                        _info      = $params.dragInfo,\n                        _move      = _info.move,\n                        _drag      = _info.node,\n                        _drop      = _info.drop,\n                        treeScope  = _info.target,\n                        fnSwapTree,\n                        isHolder   = _fnPlaceHolder(e, $params);\n\n                    if (!isHolder) {\n                        /* when using elementFromPoint() inside an iframe, you have to call\n                         elementFromPoint() twice to make sure IE8 returns the correct value*/\n                        $params.$window.document.elementFromPoint(targetX, targetY);\n\n                        targetElm = angular.element($params.$window.document.elementFromPoint(targetX, targetY));\n\n                        if (!$TreeDnDHelper.isTreeDndDroppable(targetElm)) {\n                            targetElm = $TreeDnDHelper.closestByAttr(targetElm, $TreeDnDHelper.isTreeDndDroppable);\n                        }\n\n                        if ($TreeDnDHelper.isTreeDndNode(targetElm)) {\n                            targetScope = targetElm.controller('treeDndNode').scope;\n                        } else if ($TreeDnDHelper.isTreeDndNodes(targetElm)) {\n                            targetScope = targetElm.controller('treeDndNodes').scope;\n                        } else if ($TreeDnDHelper.isTreeDndNodeHandle(targetElm)) {\n                            targetScope = targetElm.controller('treeDndNodeHandle').scope;\n                        }\n\n                        if (!targetScope || !targetScope.$callbacks || !targetScope.$callbacks.droppable()) {\n                            // Not allowed Drop Item\n                            return; // jmp out\n                        }\n\n                        fnSwapTree = function () {\n                            treeScope = targetScope.getScopeTree();\n                            _target   = _info.target;\n\n                            if (_info.target !== treeScope) {\n                                // Replace by place-holder new\n                                _target.hidePlace();\n                                _target.targeting   = false;\n                                treeScope.targeting = true;\n\n                                _info.target     = treeScope;\n                                $params.placeElm = treeScope.initPlace(targetScope.$element, $params.dragElm);\n\n                                _target   = undefined;\n                                isSwapped = true;\n                            }\n                            return true;\n                        };\n\n                        if (angular.isFunction(targetScope.getScopeNode)) {\n                            targetScope = targetScope.getScopeNode();\n                            if (!fnSwapTree()) {\n                                return; // jmp out\n                            }\n                        } else {\n                            if (targetScope.$type === 'TreeDnDNodes' || targetScope.$type === 'TreeDnD') {\n                                if (targetScope.tree_nodes) {\n                                    if (targetScope.tree_nodes.length === 0) {\n                                        if (!fnSwapTree()) {\n                                            return; // jmp out\n                                        }\n                                        // Empty\n                                        isEmpty = true;\n                                    }\n                                } else {\n                                    return; // jmp out\n                                }\n                            } else {\n                                return; // jmp out\n                            }\n                        }\n                    }\n\n                    if ($params.pos.dirAx && !isSwapped || isHolder) {\n                        isVeritcal  = false;\n                        targetScope = _info.scope;\n                    }\n\n                    if (!targetScope.$element && !targetScope) {\n                        return; // jmp out\n                    }\n\n                    if (isEmpty) {\n                        _move.parent = undefined;\n                        _move.pos    = 0;\n\n                        _drop = undefined;\n                    } else {\n                        // move vertical\n                        if (isVeritcal) {\n                            targetElm = targetScope.$element; // Get the element of tree-dnd-node\n                            if (angular.isUndefinedOrNull(targetElm)) {\n                                return; // jmp out\n                            }\n                            targetOffset = $TreeDnDHelper.offset(targetElm);\n\n                            if (targetScope.horizontal && !targetScope.isTable) {\n                                targetBefore = eventObj.pageX < targetOffset.left + $TreeDnDHelper.width(targetElm) / 2;\n                            } else {\n                                if (targetScope.isTable) {\n                                    targetBefore = eventObj.pageY < targetOffset.top + $TreeDnDHelper.height(targetElm) / 2;\n                                } else {\n                                    var _height = $TreeDnDHelper.height(targetElm);\n\n                                    if (targetScope.getElementChilds()) {\n                                        _height -= -$TreeDnDHelper.height(targetScope.getElementChilds());\n                                    }\n\n                                    if (eventObj.pageY > targetOffset.top + _height) {\n                                        return; // jmp out\n                                    }\n\n                                    targetBefore = eventObj.pageY < targetOffset.top + _height / 2;\n                                }\n                            }\n\n                            if (!angular.isFunction(targetScope.getData)) {\n                                return; // jmp out\n                            }\n\n                            _target = targetScope.getData();\n                            _parent = targetScope.getNode(_target.__parent_real__);\n\n                            if (targetBefore) {\n                                var _prev = targetScope.getPrevSibling(_target);\n\n                                _move.parent = _parent;\n                                _move.pos    = angular.isDefined(_prev) ? _prev.__index__ + 1 : 0;\n\n                                _drop = _prev;\n                            } else {\n                                if (_target.__expanded__ && !(_target.__children__.length === 1 && _target.__index_real__ === _drag.__parent_real__)) {\n                                    _move.parent = _target;\n                                    _move.pos    = 0;\n\n                                    _drop = undefined;\n                                } else {\n                                    _move.parent = _parent;\n                                    _move.pos    = _target.__index__ + 1;\n\n                                    _drop = _target;\n                                }\n                            }\n                        } else {\n                            // move horizontal\n                            if ($params.pos.dirAx && $params.pos.distAxX >= treeScope.dragBorder) {\n                                $params.pos.distAxX = 0;\n                                // increase horizontal level if previous sibling exists and is not collapsed\n                                if ($params.pos.distX > 0) {\n                                    _parent = _drop;\n                                    if (!_parent) {\n                                        if (_move.pos - 1 >= 0) {\n                                            _parent = _move.parent.__children__[_move.pos - 1];\n                                        } else {\n                                            return; // jmp out\n                                        }\n                                    }\n\n                                    if (_info.drag === _info.target && _parent === _drag && _$scope.enabledMove) {\n                                        _parent = treeScope.getPrevSibling(_parent);\n                                    }\n\n                                    if (_parent && _parent.__visible__) {\n                                        var _len = _parent.__children__.length;\n\n                                        _move.parent = _parent;\n                                        _move.pos    = _len;\n\n                                        if (_len > 0) {\n                                            _drop = _parent.__children__[_len - 1];\n                                        } else {\n                                            _drop = undefined;\n                                        }\n                                    } else {\n                                        // Not changed\n                                        return; // jmp out\n                                    }\n                                } else if ($params.pos.distX < 0) {\n                                    _target = _move.parent;\n                                    if (_target &&\n                                        (_target.__children__.length === 0 ||\n                                            _target.__children__.length - 1 < _move.pos ||\n                                            _info.drag === _info.target &&\n                                            _target.__index_real__ === _drag.__parent_real__ &&\n                                            _target.__children__.length - 1 === _drag.__index__ && _$scope.enabledMove)\n                                    ) {\n                                        _parent = treeScope.getNode(_target.__parent_real__);\n\n                                        _move.parent = _parent;\n                                        _move.pos    = _target.__index__ + 1;\n\n                                        _drop = _target;\n                                    } else {\n                                        // Not changed\n                                        return; // jmp out\n                                    }\n                                } else {\n                                    return; // jmp out\n                                }\n                            } else {\n                                // limited\n                                return;\n                            }\n                        }\n                    }\n\n                    if (_info.drag === _info.target &&\n                        _move.parent &&\n                        _drag.__parent_real__ === _move.parent.__index_real__ &&\n                        _drag.__index__ === _move.pos\n                    ) {\n                        isChanged = false;\n                    }\n\n                    if (treeScope.$callbacks.accept(_info, _move, isChanged)) {\n                        _info.move    = _move;\n                        _info.drop    = _drop;\n                        _info.changed = isChanged;\n                        _info.scope   = targetScope;\n\n                        if (targetScope.isTable) {\n                            $TreeDnDHelper.replaceIndent(\n                                treeScope,\n                                $params.placeElm,\n                                angular.isUndefinedOrNull(_move.parent) ? 1 : _move.parent.__level__ + 1\n                            );\n\n                            if (_drop) {\n                                _parent = (_move.parent ? _move.parent.__children__ : undefined) || _info.target.treeData;\n\n                                if (_drop.__index__ < _parent.length - 1) {\n                                    // Find fast\n                                    _drop  = _parent[_drop.__index__ + 1];\n                                    _scope = _info.target.getScope(_drop);\n                                    _scope.$element[0].parentNode.insertBefore(\n                                        $params.placeElm[0],\n                                        _scope.$element[0]\n                                    );\n                                } else {\n                                    _target = _info.target.getLastDescendant(_drop);\n                                    _scope  = _info.target.getScope(_target);\n                                    _scope.$element.after($params.placeElm);\n                                }\n                            } else {\n                                _scope = _info.target.getScope(_move.parent);\n                                if (_scope) {\n                                    if (_move.parent) {\n                                        _scope.$element.after($params.placeElm);\n\n                                    } else {\n                                        _scope.getElementChilds().prepend($params.placeElm);\n                                    }\n                                }\n                            }\n                        } else {\n                            _scope = _info.target.getScope(_drop || _move.parent);\n                            if (_drop) {\n                                _scope.$element.after($params.placeElm);\n                            } else {\n                                _scope.getElementChilds().prepend($params.placeElm);\n                            }\n                        }\n\n                        treeScope.showPlace();\n\n                        _$scope.$safeApply(function () {\n                            _$scope.$callbacks.dragMove(_info);\n                        });\n                    }\n\n                }\n            }\n\n            function _fnDragEnd(e, $params) {\n                e.preventDefault();\n                if ($params.dragElm) {\n                    var _passed  = false,\n                        _$scope  = $params.$scope,\n                        _scope   = _$scope.getScope($params.dragInfo.node),\n                        _element = _scope.$element;\n\n                    _$scope.$safeApply(function () {\n                        _passed = _$scope.$callbacks.beforeDrop($params.dragInfo);\n                    });\n\n                    // rollback all\n                    if (_scope.isTable) {\n                        _$scope.for_all_descendants(\n                            $params.dragInfo.node, function (_node, _parent) {\n                                _scope   = _$scope.getScope(_node);\n                                _element = _scope && _scope.$element;\n                                if (_scope && _element && (!_parent && _node.__visible__ || _parent.__expanded__)) {\n                                    if (_$scope.$class.hidden) {\n                                        _element.removeClass(_$scope.$class.hidden);\n                                    }\n                                }\n                                return _node.__visible__ === false || _node.__expanded__ === false;\n                            },\n                            undefined,\n                            true\n                        );\n                    } else {\n                        if (_$scope.$class.hidden) {\n                            _element.removeClass(_$scope.$class.hidden);\n                        }\n                    }\n\n                    $params.dragElm.remove();\n                    $params.dragElm = undefined;\n\n                    if (_$scope.enabledStatus) {\n                        _$scope.hideStatus();\n                    }\n\n                    if (_$scope.$$apply) {\n                        _$scope.$safeApply(function () {\n                            var _status = _$scope.$callbacks.dropped(\n                                $params.dragInfo,\n                                _passed\n                            );\n\n                            _$scope.$callbacks.dragStop($params.dragInfo, _status);\n                            clearData();\n                        });\n                    } else {\n                        _fnBindDrag($params);\n\n                        _$scope.$safeApply(function () {\n                            _$scope.$callbacks.dragStop($params.dragInfo, false);\n                            clearData();\n                        });\n                    }\n\n                }\n\n                function clearData() {\n                    $params.dragInfo.target.hidePlace();\n                    $params.dragInfo.target.targeting = false;\n\n                    $params.dragInfo = undefined;\n                    _$scope.$$apply  = false;\n                    _$scope.setDragging(undefined);\n                }\n\n                angular.element($params.$document).unbind('touchend', $params.dragEndEvent); // Mobile\n                angular.element($params.$document).unbind('touchcancel', $params.dragEndEvent); // Mobile\n                angular.element($params.$document).unbind('touchmove', $params.dragMoveEvent); // Mobile\n                angular.element($params.$document).unbind('mouseup', $params.dragEndEvent);\n                angular.element($params.$document).unbind('mousemove', $params.dragMoveEvent);\n                angular.element($params.$window.document.body).unbind('mouseleave', $params.dragCancelEvent);\n            }\n\n            function _fnDragStartEvent(e, $params) {\n                if ($params.$scope.$callbacks.draggable()) {\n                    _fnDragStart(e, $params);\n                }\n            }\n\n            function _fnBindDrag($params) {\n                $params.element.bind('touchstart mousedown', function (e) {\n                    $params.dragDelaying = true;\n                    $params.dragStarted  = false;\n\n                    _fnDragStartEvent(e, $params);\n\n                    $params.dragTimer = $timeout(\n                        function () {\n                            $params.dragDelaying = false;\n                        },\n                        $params.$scope.dragDelay\n                    );\n                });\n\n                $params.element.bind('touchend touchcancel mouseup', function () {\n                    $timeout.cancel($params.dragTimer);\n                });\n            }\n\n            function _fnKeydownHandler(e, $params) {\n                var _$scope = $params.$scope;\n                if (e.keyCode === 27) {\n                    if (_$scope.enabledStatus) {\n                        _$scope.hideStatus();\n                    }\n\n                    _$scope.$$apply = false;\n                    _fnDragEnd(e, $params);\n                } else {\n                    if (_$scope.enabledHotkey && e.shiftKey) {\n                        _$scope.enableMove(true);\n                        if (_$scope.enabledStatus) {\n                            _$scope.refreshStatus();\n                        }\n\n                        if (!$params.dragInfo) {\n                            return; // jmp out\n                        }\n\n                        var _scope   = _$scope.getScope($params.dragInfo.node),\n                            _element = _scope.$element;\n\n                        if (_scope.isTable) {\n                            _$scope.for_all_descendants(\n                                $params.dragInfo.node,\n                                function (_node, _parent) {\n                                    _scope   = _$scope.getScope(_node);\n                                    _element = _scope && _scope.$element;\n                                    if (_scope && _element && (!_parent && _node.__visible__ || _parent.__expanded__)) {\n                                        if (_$scope.$class.hidden) {\n                                            _element.addClass(_$scope.$class.hidden);\n                                        }\n                                    }\n\n                                    return _node.__visible__ === false || _node.__expanded__ === false;\n\n                                },\n                                undefined,\n                                true\n                            );\n                        } else {\n                            if (_$scope.$class.hidden) {\n                                _element.addClass(_$scope.$class.hidden);\n                            }\n                        }\n                    }\n                }\n            }\n\n            function _fnKeyupHandler(e, $params) {\n                var _$scope = $params.$scope;\n\n                if (_$scope.enabledHotkey && !e.shiftKey) {\n                    _$scope.enableMove(false);\n\n                    if (_$scope.enabledStatus) {\n                        _$scope.refreshStatus();\n                    }\n\n                    if (!$params.dragInfo) {\n                        return; // jmp out\n                    }\n\n                    var _scope   = _$scope.getScope($params.dragInfo.node),\n                        _element = _scope.$element;\n\n                    if (_scope.isTable) {\n                        _$scope.for_all_descendants(\n                            $params.dragInfo.node,\n                            function (_node, _parent) {\n                                _scope   = _$scope.getScope(_node);\n                                _element = _scope && _scope.$element;\n                                if (_scope && _element && (!_parent && _node.__visible__ || _parent.__expanded__)) {\n                                    if (_$scope.$class.hidden) {\n                                        _element.removeClass(_$scope.$class.hidden);\n                                    }\n                                }\n                                return _node.__visible__ === false || _node.__expanded__ === false;\n                            },\n                            undefined,\n                            true\n                        );\n                    } else {\n                        if (_$scope.$class.hidden) {\n                            _element.removeClass(_$scope.$class.hidden);\n                        }\n                    }\n                }\n            }\n\n            function _$init(scope, element, $window, $document) {\n\n                var $params        = {\n                        hasTouch:        'ontouchstart' in window,\n                        firstMoving:     undefined,\n                        dragInfo:        undefined,\n                        pos:             undefined,\n                        placeElm:        undefined,\n                        dragElm:         undefined,\n                        dragDelaying:    true,\n                        dragStarted:     false,\n                        dragTimer:       undefined,\n                        body:            document.body,\n                        html:            document.documentElement,\n                        document_height: undefined,\n                        document_width:  undefined,\n                        offsetEdge:      undefined,\n                        $scope:          scope,\n                        $window:         $window,\n                        $document:       $document,\n                        element:         element,\n                        bindDrag:        function () {\n                            _fnBindDrag($params);\n                        },\n                        dragEnd:         function (e) {\n                            _fnDragEnd(e, $params);\n                        },\n                        dragMoveEvent:   function (e) {\n                            _fnDragMove(e, $params);\n                        },\n                        dragEndEvent:    function (e) {\n                            scope.$$apply = true;\n                            _fnDragEnd(e, $params);\n                        },\n                        dragCancelEvent: function (e) {\n                            _fnDragEnd(e, $params);\n                        }\n                    },\n                    keydownHandler = function (e) {\n                        return _fnKeydownHandler(e, $params);\n                    },\n                    keyupHandler   = function (e) {\n                        return _fnKeyupHandler(e, $params);\n                    };\n\n                scope.dragEnd = function (e) {\n                    $params.dragEnd(e);\n                };\n\n                $params.bindDrag();\n\n                angular.element($window.document.body).bind('keydown', keydownHandler);\n                angular.element($window.document.body).bind('keyup', keyupHandler);\n\n                //unbind handler that retains scope\n                scope.$on('$destroy', function () {\n                    angular.element($window.document.body).unbind('keydown', keydownHandler);\n                    angular.element($window.document.body).unbind('keyup', keyupHandler);\n                    if (scope.statusElm) {\n                        scope.statusElm.remove();\n                    }\n\n                    if (scope.placeElm) {\n                        scope.placeElm.remove();\n                    }\n                });\n            }\n\n            return _$init;\n        }\n    ]);\n\nangular.module('ntt.TreeDnD')\n    .factory('$TreeDnDControl', function () {\n\n        function fnSetCollapse(node) {\n            node.__expanded__ = false;\n        }\n\n        function fnSetExpand(node) {\n            node.__expanded__ = true;\n        }\n\n        function _$init(scope) {\n            var tree = {\n                selected_node:        undefined,\n                on_select:            undefined,\n                for_all_descendants:  scope.for_all_descendants,\n                select_node:          function (node) {\n                    if (!node) {\n                        if (tree.selected_node) {\n                            delete tree.selected_node.__selected__;\n                        }\n                        tree.selected_node = undefined;\n\n                        return;\n                    }\n\n                    if (node !== tree.selected_node) {\n                        if (tree.selected_node) {\n                            delete tree.selected_node.__selected__;\n                        }\n                        node.__selected__  = true;\n                        tree.selected_node = node;\n                        tree.expand_all_parents(node);\n                        if (angular.isFunction(tree.on_select)) {\n                            tree.on_select(node);\n                        }\n                    }\n\n                    return node;\n                },\n                deselect_node:        function () {\n                    var _target;\n\n                    if (tree.selected_node) {\n                        delete tree.selected_node.__selected__;\n\n                        _target = tree.selected_node;\n\n                        tree.selected_node = undefined;\n                    }\n\n                    return _target;\n                },\n                get_parent:           function (node) {\n                    node = node || tree.selected_node;\n\n                    if (node && node.__parent_real__ !== undefined) {\n                        return scope.tree_nodes[node.__parent_real__];\n                    }\n                },\n                for_all_ancestors:    function (node, fn) {\n                    var _parent = tree.get_parent(node);\n                    if (_parent) {\n                        if (fn(_parent)) {\n                            return false;\n                        }\n\n                        return tree.for_all_ancestors(_parent, fn);\n                    }\n\n                    return true;\n                },\n                expand_all_parents:   function (node) {\n                    node = node || tree.selected_node;\n\n                    if (angular.isObject(node)) {\n                        tree.for_all_ancestors(node, fnSetExpand);\n                    }\n                },\n                collapse_all_parents: function (node) {\n                    node = node || tree.selected_node;\n                    if (angular.isObject(node)) {\n                        tree.for_all_ancestors(node, fnSetCollapse);\n                    }\n                },\n\n                reload_data:                       function () {\n                    return scope.reload_data();\n                },\n                add_node:                          function (parent, new_node, index) {\n                    if (typeof index !== 'number') {\n                        if (parent) {\n                            parent.__children__.push(new_node);\n                            parent.__expanded__ = true;\n                        } else {\n                            scope.treeData.push(new_node);\n                        }\n                    } else {\n                        if (parent) {\n                            parent.__children__.splice(index, 0, new_node);\n                            parent.__expanded__ = true;\n                        } else {\n                            scope.treeData.splice(index, 0, new_node);\n                        }\n                    }\n                    return new_node;\n                },\n                add_node_root:                     function (new_node) {\n                    tree.add_node(null, new_node);\n\n                    return new_node;\n                },\n                expand_all:                        function () {\n                    var len = scope.treeData.length;\n                    for (var i = 0; i < len; i++) {\n                        tree.for_all_descendants(scope.treeData[i], fnSetExpand);\n                    }\n                },\n                collapse_all:                      function () {\n                    var len = scope.treeData.length;\n                    for (var i = 0; i < len; i++) {\n                        tree.for_all_descendants(scope.treeData[i], fnSetCollapse);\n                    }\n                },\n                remove_node:                       function (node) {\n                    node = node || tree.selected_node;\n\n                    if (angular.isObject(node)) {\n                        var _parent;\n\n                        if (node.__parent_real__ !== undefined) {\n                            _parent = tree.get_parent(node).__children__;\n                        } else {\n                            _parent = scope.treeData;\n                        }\n\n                        _parent.splice(node.__index__, 1);\n\n                        tree.reload_data();\n\n                        if (tree.selected_node === node) {\n                            tree.selected_node = undefined;\n                        }\n                    }\n                },\n                expand_node:                       function (node) {\n                    node = node || tree.selected_node;\n\n                    if (angular.isObject(node)) {\n                        node.__expanded__ = true;\n\n                        return node;\n                    }\n                },\n                collapse_node:                     function (node) {\n                    node = node || tree.selected_node;\n\n                    if (angular.isObject(node)) {\n                        node.__expanded__ = false;\n\n                        return node;\n                    }\n                },\n                get_selected_node:                 function () {\n                    return tree.selected_node;\n                },\n                get_first_node:                    function () {\n                    var len = scope.treeData.length;\n\n                    if (len > 0) {\n                        return scope.treeData[0];\n                    }\n                },\n                get_children:                      function (node) {\n                    node = node || tree.selected_node;\n\n                    return node.__children__;\n                },\n                get_siblings:                      function (node) {\n                    node = node || tree.selected_node;\n                    if (angular.isObject(node)) {\n                        var _parent = tree.get_parent(node),\n                            _target;\n\n                        if (_parent) {\n                            _target = _parent.__children__;\n                        } else {\n                            _target = scope.treeData;\n                        }\n\n                        return _target;\n                    }\n                },\n                get_next_sibling:                  function (node) {\n                    node = node || tree.selected_node;\n                    if (angular.isObject(node)) {\n                        var _target = tree.get_siblings(node);\n\n                        var n = _target.length;\n\n                        if (node.__index__ < n) {\n                            return _target[node.__index__ + 1];\n                        }\n                    }\n                },\n                get_prev_sibling:                  function (node) {\n                    node = node || tree.selected_node;\n\n                    var _target = tree.get_siblings(node);\n\n                    if (node.__index__ > 0) {\n                        return _target[node.__index__ - 1];\n                    }\n                },\n                get_first_child:                   function (node) {\n                    node = node || tree.selected_node;\n                    if (angular.isObject(node)) {\n                        var _target = node.__children__;\n\n                        if (_target && _target.length > 0) {\n                            return node.__children__[0];\n                        }\n                    }\n                },\n                get_closest_ancestor_next_sibling: function (node) {\n                    node = node || tree.selected_node;\n\n                    var _target = tree.get_next_sibling(node);\n                    if (_target) {\n                        return _target;\n                    }\n\n                    var _parent = tree.get_parent(node);\n                    if (_parent) {\n                        return tree.get_closest_ancestor_next_sibling(_parent);\n                    }\n                },\n                get_next_node:                     function (node) {\n                    node = node || tree.selected_node;\n\n                    if (angular.isObject(node)) {\n                        var _target = tree.get_first_child(node);\n\n                        if (_target) {\n                            return _target;\n                        } else {\n                            return tree.get_closest_ancestor_next_sibling(node);\n                        }\n                    }\n                },\n                get_prev_node:                     function (node) {\n                    node = node || tree.selected_node;\n\n                    if (angular.isObject(node)) {\n                        var _target = tree.get_prev_sibling(node);\n\n                        if (_target) {\n                            return tree.get_last_descendant(_target);\n                        }\n\n                        return tree.get_parent(node);\n                    }\n                },\n                get_last_descendant:               scope.getLastDescendant,\n                select_parent_node:                function (node) {\n                    node = node || tree.selected_node;\n\n                    if (angular.isObject(node)) {\n                        var _parent = tree.get_parent(node);\n\n                        if (_parent) {\n                            return tree.select_node(_parent);\n                        }\n                    }\n                },\n                select_first_node:                 function () {\n                    var firstNode = tree.get_first_node();\n                    return tree.select_node(firstNode);\n                },\n                select_next_sibling:               function (node) {\n                    node = node || tree.selected_node;\n\n                    if (angular.isObject(node)) {\n                        var _target = tree.get_next_sibling(node);\n\n                        if (_target) {\n                            return tree.select_node(_target);\n                        }\n                    }\n                },\n                select_prev_sibling:               function (node) {\n                    node = node || tree.selected_node;\n\n                    if (angular.isObject(node)) {\n                        var _target = tree.get_prev_sibling(node);\n\n                        if (_target) {\n                            return tree.select_node(_target);\n                        }\n                    }\n                },\n                select_next_node:                  function (node) {\n                    node = node || tree.selected_node;\n\n                    if (angular.isObject(node)) {\n                        var _target = tree.get_next_node(node);\n\n                        if (_target) {\n                            return tree.select_node(_target);\n                        }\n                    }\n                },\n                select_prev_node:                  function (node) {\n                    node = node || tree.selected_node;\n\n                    if (angular.isObject(node)) {\n                        var _target = tree.get_prev_node(node);\n\n                        if (_target) {\n                            return tree.select_node(_target);\n                        }\n                    }\n                }\n            };\n\n            // override options\n            angular.extend(scope.tree, tree);\n\n            return scope.tree;\n        }\n\n        return _$init;\n    });\n\nangular.module('template/TreeDnD/TreeDnD.html', []).run(\n    ['$templateCache', function ($templateCache) {\n        $templateCache.put(\n            'template/TreeDnD/TreeDnD.html',\n            ['<table ng-class=\"$tree_class\">',\n             '    <thead>',\n             '  <tr>',\n             '     <th ng-class=\"expandingProperty.titleClass\" ng-style=\"expandingProperty.titleStyle\">',\n             '         {{expandingProperty.displayName || expandingProperty.field || expandingProperty}}',\n             '        <\\/th>',\n             '        <th ng-repeat=\"col in colDefinitions\" ng-class=\"col.titleClass\" ng-style=\"col.titleStyle\">',\n             '         {{col.displayName || col.field}}',\n             '     </th>',\n             '    </tr>',\n             '    </thead>',\n             ' <tbody tree-dnd-nodes>',\n             '  <tr tree-dnd-node=\"node\" ng-repeat=\"node in tree_nodes track by node.__hashKey__\" ',\n             '       ng-if=\"(node.__inited__ || node.__visible__)\"',\n             '       ng-click=\"onSelect(node)\" ',\n             '       ng-class=\"(node.__selected__ ? \\' active\\':\\'\\')\">',\n             '        <td tree-dnd-node-handle',\n             '          ng-style=\"expandingProperty.cellStyle ? expandingProperty.cellStyle : {\\'padding-left\\': $callbacks.calsIndent(node.__level__)}\"',\n             '          ng-class=\"expandingProperty.cellClass\"',\n             '          compile=\"expandingProperty.cellTemplate\">',\n             '              <a data-nodrag>',\n             '                  <i ng-class=\"node.__icon_class__\" ng-click=\"toggleExpand(node)\"',\n             '                     class=\"tree-icon\"></i>',\n             '              </a>',\n             '             {{node[expandingProperty.field] || node[expandingProperty]}}',\n             '        </td>',\n             '        <td ng-repeat=\"col in colDefinitions\" ng-class=\"col.cellClass\" ng-style=\"col.cellStyle\"',\n             '            compile=\"col.cellTemplate\">',\n             '            {{node[col.field]}}',\n             '        </td>',\n             '    </tr>',\n             '    </tbody>',\n             '</table>'].join('\\n')\n        );\n\n        $templateCache.put(\n            'template/TreeDnD/TreeDnDStatusCopy.html',\n            '<label><i class=\"fa fa-copy\"></i>&nbsp;<b>Copying</b></label>'\n        );\n\n        $templateCache.put(\n            'template/TreeDnD/TreeDnDStatusMove.html',\n            '<label><i class=\"fa fa-file-text\"></i>&nbsp;<b>Moving</b></label>'\n        );\n    }]\n);\n\n    function isUndefinedOrNull(val) {\n        return angular.isUndefined(val) || val === null;\n    }\n\n    function isDefined(val) {\n        return !(angular.isUndefined(val) || val === null);\n    }\n})();"]}