{"version":3,"sources":["ng-tree-dnd.js"],"names":["fnInitTreeDnD","$timeout","$http","$compile","$parse","$window","$document","$templateCache","$TreeDnDTemplate","$TreeDnDClass","$TreeDnDHelper","$TreeDnDPlugin","$TreeDnDViewport","restrict","scope","replace","controller","$scope","$element","$attrs","indent","indent_plus","indent_unit","$tree_class","primary_key","$type","colDefinitions","$globals","$class","angular","copy","extend","icon","1","iconExpand","0","iconCollapse","-1","iconLeaf","treeData","tree_nodes","for_all_descendants","node","fn","parent","checkSibling","isFunction","_i","_len","_nodes","__children__","length","getLastDescendant","last_child","n","tree","selected_node","isArray","getElementChilds","element","querySelector","onClick","isDefined","on_click","setTimeout","onSelect","select_node","on_select","toggleExpand","fnCallback","passedExpand","$callbacks","expand","__expanded__","_fnGetHash","__parent__","getHash","setHash","_hashKey","isUndefinedOrNull","__hashKey__","accept","dropEnabled","calsIndent","level","skipUnit","skipEdge","unit","edge","droppable","draggable","dragEnabled","beforeDrop","changeKey","_key","__uid__","Math","random","__selected__","clone","_clone","this","remove","_this","delayReload","temp","splice","__index__","reload_data","clearInfo","__inited__","__visible__","add","pos","push","deleteScope","_hash","setScope","getScope","enableDrag","enableDrop","placeElm","undefined","horizontal","dragDelay","enabledMove","statusMove","enabledHotkey","enabledCollapse","statusElm","dragging","beforeDrag","dragStop","info","passed","changed","drag","target","dropped","_nodeAdd","_parent","_node","_move","move","_parentRemove","_parentAdd","isMove","dragStart","event","dragMove","setDragging","dragInfo","enableMove","val","enableStatus","enabledStatus","hideStatus","addClass","hidden","refreshStatus","statusElmOld","getMove","getCopy","attr","find","append","removeClass","setPositionStatus","e","css","left","pageX","top","pageY","z-index","status","targeting","getPrevSibling","_index","__parent_real__","getNode","index","initPlace","dragElm","isTable","document","createElement","_len_down","empty","place","height","parentNode","insertBefore","hidePlace","showPlace","getScopeTree","$safeApply","phase","$root","$$phase","$apply","hiddenChild","nodeScope","_fnInitFilter","_fnInitOrderBy","_fnGetControl","w","i","len","_curW","_typeW","_nameW","_defaultW","_scopeW","_NotW","_AfterW","_BeforeW","timeReloadData","tmpTreeData","_defaultFilterOption","showParent","showChild","beginAnd","_watches","isHotkey","templateCopy","_url","get","setCopy","templateMove","setMove","treeClass","test","trim","getExpandOn","expandOn","expandingProperty","treeControl","getColDefs","colDefs","orderBy","filters","_passed","_iF","_keysF","Object","keys","_lenF","enabledFilter","option","filterOptions","primaryKey","indentUnit","optCallbacks","forEach","value","key","lenW","check_exist_attr","generateWatch","$watch","equals","timeLoadData","attrs","existAttr","isAnd","isUndefined","exist","for_each_attrs","type","nameAttr","valDefault","nameScope","fnNotExist","fnAfter","fnBefore","indexOf","_firstNode","_keys","_regex","RegExp","_col_defs","field","do_f","root","parent_real","visible","_icon","_index_real","_dept","expandLevel","__index_real__","__level__","__icon__","__icon_class__","__dept__","init_data","data","oData","_data","_tree_nodes","columnDefs","filter","updateLimit","$TreeLimit","compile","tElement","$_Template","_element","html","_fnInitDrag","ready","checkTreeTable","template","attrInclude","elemNode","treeInclude","cache","then","response","tempDiv","innerHTML","setTemplate","templateNode","promiseCheck","templateUrl","getPath","fnInitTreeDnDViewport","$q","viewport","updateTimeout","renderTime","isUpdating","isRender","updateAgain","items","$initViewport","setViewport","getViewport","updateDelayed","getItems","eWindow","on","update","width","prop","documentElement","clientWidth","clientHeight","body","scrollTop","scrollLeft","recursivePromise","number","cancel","module","constant","nodes","handle","directive","link","new_val","compileReplace","replaceWith","$node_class","childsElem","enabledDnD","keyNode","treeDndNode","getData","getScopeNode","objexpr","objprops","keyO","lenO","hashKey","skipAttr","keepAttr","lenKeep","join","newVal","oldVal","nodeOf","_childs","$on","$nodes_class","$inject","factory","line2tree","parentKey","callback","parentId","rootIds","item","_primary","treeObjs","console","error","log","tree2tree","access_child","containKey","_copy","_child","_tree","_$helper","nodrag","targetElm","eventObj","obj","targetTouches","originalEvent","drop","offset","boundingClientRect","getBoundingClientRect","pageYOffset","pageXOffset","positionStarted","offsetX","offsetY","startX","lastX","startY","lastY","nowX","nowY","distX","distY","dirAx","dirX","dirY","lastDirX","lastDirY","distAxX","distAxY","positionMoved","firstMoving","newAx","abs","moving","replaceIndent","children","isTreeDndNode","isTreeDndNodes","isTreeDndNodeHandle","isTreeDndDroppable","closestByAttr","fnClosestByAttr","$parent","isPassed","$injector","name","has","scopes","path","$id","movePath","copyPath","$filter","options","keyChild","_filter","_fnConvert","_state","_fnBeforeClear","_fnAfter","filter_index","_fnBefore","fieldChild","parentPassed","_nodePassed","_childPassed","_filter_index","_fnCheck","err","_fnProccess","condition","conditions","for_each_filter","_iO","_keysO","_lenO","_callback","isNodePassed","isChildPassed","isParentPassed","__filtered__","__filtered_visible__","__filtered_index__","_fnOrderBy","fnOrderBy","_fnOrder","list","isString","_fnDragMove","$params","_$scope","dragStarted","preventDefault","getSelection","removeAllRanges","selection","leftElmPos","topElmPos","document_height","document_width","offsetEdge","top_scroll","window","bottom_scroll","innerHeight","scrollBy","targetScope","targetBefore","targetOffset","isEmpty","isSwapped","_scope","_target","fnSwapTree","targetX","targetY","isChanged","isVeritcal","_info","_drag","_drop","treeScope","isHolder","_offset","_fnPlaceHolder","elementFromPoint","_height","_prev","dragBorder","after","prepend","dragDelaying","_fnDragEnd","$$apply","_status","clearData","_fnBindDrag","unbind","dragEndEvent","dragMoveEvent","dragCancelEvent","_fnDragStartEvent","hasTouch","button","which","uiTreeDragging","eventScope","eventElm","dragScope","eventElmTagName","toLowerCase","_tbody","_frag","_width","_needCollapse","_copied","createDocumentFragment","bind","max","scrollHeight","offsetHeight","scrollWidth","offsetWidth","_fnDragStart","dragTimer","bindDrag","dragEnd","keydownHandler","keyCode","shiftKey","_fnKeydownHandler","keyupHandler","_fnKeyupHandler","fnSetCollapse","fnSetExpand","_selected","deselect_node","expand_all_parents","get_parent","for_all_ancestors","collapse_all_parents","add_node","new_node","parent_auto_expand","add_node_root","expand_all","collapse_all","remove_node","expand_node","collapse_node","get_selected_node","get_first_node","wrapper","get_children","get_siblings","get_next_sibling","get_prev_sibling","get_first_child","get_closest_ancestor_next_sibling","get_next_node","get_prev_node","get_last_descendant","select_parent_node","select_first_node","firstNode","select_next_sibling","select_prev_sibling","select_next_node","select_prev_node","run","put"],"mappings":"CAsDA,WACI,aAuSJ,SAASA,EAAcC,EAAUC,EAAOC,EAAUC,EAAQC,EAASC,EAAWC,EACvDC,EAAkBC,EAAeC,EAAgBC,EAAgBC,GACpF,MAAO,CACHC,SAAY,IACZC,OAAY,EACZC,SAAY,EACZC,WAAY,CAAC,SAAU,WAAY,SAIvC,SAAsBC,EAAQC,EAAUC,GAYpCF,EAAOG,OAAS,GAQhBH,EAAOI,YAAc,GAQrBJ,EAAOK,YAAc,KAQrBL,EAAOM,YAAc,QASrBN,EAAOO,YAAc,UAQrBP,EAAOQ,MAAQ,UAEfR,EAAOS,eAAiB,GACxBT,EAAOU,SAAiB,GAKxBV,EAAOW,OAASC,QAAQC,KAAKrB,GAE7BoB,QAAQE,OACJd,EAAOW,OAAOI,KAAM,CAChBC,EAAMd,EAAOe,YAAc,4BAC3BC,EAAMhB,EAAOiB,cAAgB,2BAC7BC,KAAMlB,EAAOmB,UAAY,6BASjCrB,EAAOsB,SAAW,GAOlBtB,EAAOuB,WAAa,GAYpBvB,EAAOwB,oBAAsB,SAAUC,EAAMC,EAAIC,EAAQC,GACrD,GAAIhB,QAAQiB,WAAWH,GAAK,CACxB,IAAII,EAAIC,EAAMC,EAEd,GAAIN,EAAGD,EAAME,GAET,OAAO,EAGX,GAAoB,iBAATF,EACP,OAAO,EAKX,IAFAO,EAASP,EAAKQ,aACdF,EAASC,EAASA,EAAOE,OAAS,EAC7BJ,EAAK,EAAGA,EAAKC,EAAMD,IACpB,IAAK9B,EAAOwB,oBAAoBQ,EAAOF,GAAKJ,EAAID,KAAUG,EAEtD,OAAO,EAMnB,OAAO,GAUX5B,EAAOmC,kBAAoB,SAAUV,GACjC,IAAIW,EAAYC,EAMhB,GAJKZ,GAA+B,iBAAhBzB,EAAOsC,OACvBb,EAAOzB,EAAOsC,KAAKC,eAGH,iBAATd,GACHb,QAAQ4B,QAAQf,EAAKQ,cAIrB,OAAU,KAFVI,EAAIZ,EAAKQ,aAAaC,QAGXT,GAEPW,EAAaX,EAAKQ,aAAaI,EAAI,GAE5BrC,EAAOmC,kBAAkBC,KAWhDpC,EAAOyC,iBAAmB,WACtB,OAAO7B,QAAQ8B,QAAQzC,EAAS,GAAG0C,cAAc,sBAQrD3C,EAAO4C,QAAU,SAAUnB,GACnBb,QAAQiC,UAAU7C,EAAOsC,OAAS1B,QAAQiB,WAAW7B,EAAOsC,KAAKQ,WAGjEC,WACI,WACI/C,EAAOsC,KAAKQ,SAASrB,IAEzB,IAUZzB,EAAOgD,SAAW,SAAUvB,GACpBb,QAAQiC,UAAU7C,EAAOsC,QACrBb,IAASzB,EAAOsC,KAAKC,eACrBvC,EAAOsC,KAAKW,YAAYxB,GAGxBb,QAAQiB,WAAW7B,EAAOsC,KAAKY,YAC/BH,WACI,WACI/C,EAAOsC,KAAKY,UAAUzB,IAE1B,KAYhBzB,EAAOmD,aAAe,SAAU1B,EAAM2B,GAIlC,IAAIC,EAHgB,iBAAT5B,IAKPb,QAAQiB,WAAWuB,GACnBC,IAAiBD,EAAW3B,GACQ,iBAAtBzB,EAAOsD,YAA2B1C,QAAQiB,WAAW7B,EAAOsD,WAAWC,UACrFF,IAAiBrD,EAAOsD,WAAWC,OAAO9B,IAIf,EAA3BA,EAAKQ,aAAaC,SAEdT,EAAK+B,kBADmB,IAAjBH,EACaA,GAEC5B,EAAK+B,gBAgBtC,IAAIC,EAAa,SAAUhC,GACvB,MAAO,IAAMA,EAAKiC,WAAa,IAAMjC,EAAKzB,EAAOO,cAuBrDP,EAAO2D,QAAUF,EAOjBzD,EAAOsD,WAAa,CAChBK,QAAqBF,EACrBG,QAxBa,SAAUnC,GACnB,IAAIoC,EAAWJ,EAAWhC,GAM1B,OAJIb,QAAQkD,kBAAkBrC,EAAKsC,cAAgBtC,EAAKsC,cAAgBF,KACpEpC,EAAKsC,YAAcF,GAGhBpC,GAkBXD,oBAAqBxB,EAAOwB,oBAI5BwC,OAAqB,WACjB,OAA8B,IAAvBhE,EAAOiE,aAWlBC,WAAY,SAAUC,EAAOC,EAAUC,GACnC,IAAIC,EAAO,EACPC,EAAOF,EAAW,EAAIrE,EAAOI,YAKjC,OAJKgE,IACDE,EAAOtE,EAAOK,YAAcL,EAAOK,YAAc,MAGjD8D,EAAQ,EAAI,EACLI,EAAOD,EAEPtE,EAAOG,QAAUgE,EAAQ,GAAKI,EAAOD,GASpDE,UAAY,WACR,OAA8B,IAAvBxE,EAAOiE,aAOlBQ,UAAY,WACR,OAA8B,IAAvBzE,EAAO0E,aAOlBC,WAAY,WACR,OAAO,GAQXC,UAAW,SAAUnD,GACjB,IAAIoD,EAAWpD,EAAKqD,QACpBrD,EAAKqD,QAAUC,KAAKC,SAChBvD,EAAKwD,qBACExD,EAAKwD,aAGW,YAAvBjF,EAAOO,cAEPsE,GADAA,EAAO,GAAKpD,EAAKzB,EAAOO,cACZT,QAAQ,SAAU,IAAM,KAAO2B,EAAKqD,QAEhDrD,EAAKzB,EAAOO,aAAesE,IAWnCK,MAAO,SAAUzD,GACb,IAAI0D,EAASvE,QAAQC,KAAKY,GAI1B,OAFA2D,KAAK5D,oBAAoB2D,EAAQC,KAAKR,WAE/BO,GAYXE,OAAQ,SAAU5D,EAAME,EAAQ2D,EAAOC,GACnC,IAAIC,EAAO7D,EAAO8D,OAAOhE,EAAKiE,UAAW,GAAG,GAI5C,OAHKH,GACDvF,EAAO2F,cAEJH,GAQXI,UAAW,SAAUnE,UACVA,EAAKoE,kBACLpE,EAAKqE,aAchBC,IAAK,SAAUtE,EAAMuE,EAAKrE,GAEtByD,KAAK5D,oBAAoBC,EAAM2D,KAAKQ,WAChCjE,KACqB,EAAjBA,EAAOO,SACI,EAAP8D,EACArE,EAAO8D,OAAOO,EAAK,EAAGvE,GAM1BE,EAAOsE,KAAKxE,MAY5BzB,EAAOkG,YAAc,SAAUrG,EAAO4B,GAClC,IAAI0E,EAAQ1E,EAAKsC,YACb/D,EAAOU,SAASyF,IAAUnG,EAAOU,SAASyF,KAAWtG,UAC9CG,EAAOU,SAASyF,IAU/BnG,EAAOoG,SAAW,SAAUvG,EAAO4B,GAC/B,IAAI0E,EAAQ1E,EAAKsC,YACb/D,EAAOU,SAASyF,KAAWtG,IAC3BG,EAAOU,SAASyF,GAAStG,IAUjCG,EAAOqG,SAAW,SAAU5E,GACxB,GAAIA,EAAM,CACN,IAAI0E,EAAQ1E,EAAKsC,YAEjB,OAAO/D,EAAOU,SAASyF,GAG3B,OAAOnG,IAGPE,EAAOoG,YAAcpG,EAAOqG,cAC5BvG,EAAOwG,cAAcC,EAErBzG,EAAO0E,iBAAc+B,EACrBzG,EAAOiE,iBAAcwC,EACrBzG,EAAO0G,gBAAcD,EAEjBvG,EAAOoG,aAEPtG,EAAO2G,UAAkB,EACzB3G,EAAO4G,aAAkB,EACzB5G,EAAO6G,YAAkB,EACzB7G,EAAO8G,eAAkB,EACzB9G,EAAO+G,qBAAkBN,EACzBzG,EAAOgH,eAAkBP,EACzBzG,EAAOiH,cAAkBR,EAEzB7F,QAAQE,OACJd,EAAOsD,WAAY,CACf4D,WAAY,WACR,OAAO,GAQXC,SAAY,SAAUC,EAAMC,GACnBD,IAASA,EAAKE,UAAWF,EAAKG,KAAKX,cAAgBS,IAIxDD,EAAKI,OAAO7B,cAERyB,EAAKI,SAAWJ,EAAKG,MAAQH,EAAKG,KAAKX,aACvCQ,EAAKG,KAAK5B,gBAUlB8B,QAAS,SAAUL,GACf,GAAKA,EAAL,CAIA,IACIM,EAEAC,EAHAC,EAAgBR,EAAK3F,KAErBoG,EAAgBT,EAAKU,KAErBC,EAAgBX,EAAKzF,QAAUyF,EAAKG,KAAKjG,SACzC0G,EAAgBH,EAAMlG,QAAUyF,EAAKI,OAAOlG,SAC5C2G,EAAgBb,EAAKG,KAAKX,YAE9B,SAAKQ,EAAKE,SAAWW,OAIjBb,EAAKI,OAAOlE,WAAWU,OAAOoD,EAAMA,EAAKU,KAAMV,EAAKE,WAChDW,GACAN,EAAUI,EACNnH,QAAQiC,UAAU8E,EAAQ1F,gBAC1B0F,EAAUA,EAAQ1F,cAGtByF,EAAWN,EAAKG,KAAKjE,WAAW+B,OAC5BuC,EACAD,EACAP,EAAKG,KAAKjE,YACV,IAGJoE,EAAWN,EAAKG,KAAKjE,WAAW4B,MAAM0C,EAAOR,EAAKG,KAAKjE,YAKvD2E,GACAb,EAAKG,OAASH,EAAKI,QACnBO,IAAkBC,GAClBH,EAAM7B,KAAOoB,EAAK3F,KAAKiE,WACvBmC,EAAM7B,OAGV2B,EAAUK,GACE/F,eACR0F,EAAUA,EAAQ1F,cAGtBmF,EAAKI,OAAOlE,WAAWyC,IACnB2B,EACAG,EAAM7B,IACN2B,EACAP,EAAKG,KAAKjE,aAGP,MAWf4E,UAAW,SAAUC,KAQrBC,SAAU,SAAUD,OAU5BnI,EAAOqI,YAAc,SAAUC,GAC3BtI,EAAOiH,SAAWqB,GAQtBtI,EAAOuI,WAAa,SAAUC,GAEtBxI,EAAO4G,YADQ,kBAAR4B,GACcA,GAMzBtI,EAAOuI,eAMPzI,EAAO0I,eAAgB,EAKvB1I,EAAO2I,WAAa,WACZ3I,EAAOgH,WACPhH,EAAOgH,UAAU4B,SAAS5I,EAAOW,OAAOkI,SAOhD7I,EAAO8I,cAAgB,WACnB,GAAK9I,EAAOiH,UAIRjH,EAAO0I,cAAe,CACtB,IAAIK,EAAe/I,EAAOgH,UACtBhH,EAAO4G,YACP5G,EAAOgH,UAAYpG,QAAQ8B,QAAQnD,EAAiByJ,QAAQhJ,IAE5DA,EAAOgH,UAAYpG,QAAQ8B,QAAQnD,EAAiB0J,QAAQjJ,IAG5D+I,IAAiB/I,EAAOgH,YACpB+B,IACA/I,EAAOgH,UAAUkC,KAAK,QAASH,EAAaG,KAAK,UACjDlJ,EAAOgH,UAAUkC,KAAK,QAASH,EAAaG,KAAK,UACjDH,EAAa1D,UAEjBhG,EAAU8J,KAAK,QAAQC,OAAOpJ,EAAOgH,YAIzChH,EAAOgH,UAAUqC,YAAYrJ,EAAOW,OAAOkI,UASnD7I,EAAOsJ,kBAAoB,SAAUC,GAC7BvJ,EAAOgH,YACPhH,EAAOgH,UAAUwC,IACb,CACIC,KAAWF,EAAEG,MAAQ,GAAK,KAC1BC,IAAWJ,EAAEK,MAAQ,GAAK,KAC1BC,UAAW,OAInB7J,EAAOgH,UAAU4B,SAAS5I,EAAOW,OAAOmJ,YAMxD9J,EAAO+J,WAAY,EAQnB/J,EAAOgK,eAAiB,SAAUvI,GAC9B,GAAIA,GAAyB,EAAjBA,EAAKiE,UAAe,CAC5B,IAAauE,EAASxI,EAAKiE,UAAY,EAEvC,OAAI9E,QAAQiC,UAAUpB,EAAKyI,iBACblK,EAAOuB,WAAWE,EAAKyI,iBAElBjI,aAAagI,GAGzBjK,EAAOsB,SAAS2I,KAW/BjK,EAAOmK,QAAU,SAAUC,GACvB,IAAIxJ,QAAQkD,kBAAkBsG,GAI9B,OAAOpK,EAAOuB,WAAW6I,IAG7BpK,EAAOqK,UAAY,SAAU3H,EAAS4H,GAElC,IAAKtK,EAAOwG,SACR,GAAIxG,EAAOuK,QAAS,CAChBvK,EAAOwG,SAAW5F,QAAQ8B,QAAQtD,EAAQoL,SAASC,cAAc,OAEjE,IAAIC,EAAY1K,EAAOS,eAAeyB,OAStC,IAPAlC,EAAOwG,SAAS4C,OACZxI,QAAQ8B,QAAQtD,EAAQoL,SAASC,cAAc,OAC1C7B,SAAS5I,EAAOW,OAAOgK,OACvB/B,SAAS,YACTA,SAAS5I,EAAOW,OAAOiK,QAGX,EAAdF,KACH1K,EAAOwG,SAAS4C,OACZxI,QAAQ8B,QAAQtD,EAAQoL,SAASC,cAAc,OAC1C7B,SAAS5I,EAAOW,OAAOgK,OACvB/B,SAAS5I,EAAOW,OAAOiK,aAIpC5K,EAAOwG,SAAW5F,QAAQ8B,QAAQtD,EAAQoL,SAASC,cAAc,OAC5D7B,SAAS5I,EAAOW,OAAOgK,OACvB/B,SAAS5I,EAAOW,OAAOiK,OAepC,OAVIN,GACAtK,EAAOwG,SAASgD,IAAI,SAAU/J,EAAeoL,OAAOP,GAAW,MAG/D5H,EACAA,EAAQ,GAAGoI,WAAWC,aAAa/K,EAAOwG,SAAS,GAAI9D,EAAQ,IAE/D1C,EAAOyC,mBAAmB2G,OAAOpJ,EAAOwG,UAGrCxG,EAAOwG,UAGlBxG,EAAOgL,UAAY,WACXhL,EAAOwG,UACPxG,EAAOwG,SAASoC,SAAS5I,EAAOW,OAAOkI,SAI/C7I,EAAOiL,UAAY,WACXjL,EAAOwG,UACPxG,EAAOwG,SAAS6C,YAAYrJ,EAAOW,OAAOkI,SAIlD7I,EAAOkL,aAAe,WAClB,OAAOlL,IAKfA,EAAOmL,WAiUP,SAAoBzJ,GAChB,IAAI0J,EAAQhG,KAAKiG,MAAMC,QACT,WAAVF,GAAgC,YAAVA,EAClB1J,GAAoB,mBAAPA,GACbA,IAGJ0D,KAAKmG,OAAO7J,IAtUpB1B,EAAOwL,YAAc,SAAuB/J,EAAME,GAC9C,IAAI8J,EAAYzL,EAAOqG,SAAS5E,GAmBhC,OAlBIgK,EACI9J,GAAUA,EAAO6B,cAAgB7B,EAAOmE,aACxC2F,EAAUxL,SAASoJ,YAAYrJ,EAAOW,OAAOkI,QAC7CpH,EAAKqE,aAAc,IAEnB2F,EAAUxL,SAAS2I,SAAS5I,EAAOW,OAAOkI,QAC1CpH,EAAKqE,aAAc,GAInBnE,GAAUA,EAAO6B,cAAgB7B,EAAOmE,YACxCrE,EAAKqE,aAAc,EAEnBrE,EAAKqE,aAAc,GAKE,IAAtBrE,EAAK+B,cAGhB,IAAIkI,EACAC,EACAC,EAiKAC,EACAC,EAAGC,EACHC,EACAC,EAAQC,EAAQC,EAAWC,EAASC,EAAOC,EAASC,EAGpDC,EAAgBC,EAtKhBC,EAAuB,CACnBC,YAAY,EACZC,WAAY,EACZC,UAAY,GAEhBC,EAAuB,CACnB,CACI,aACA,CACI,CAAC,UAAW,oBAAgBrG,EAAW,iBACvC,CAAC,UAAW,kBAAcA,EAAW,eACrC,CAAC,SAAU,YAAa,OAAGA,EAAW,GACtC,CAAC,UAAW,sBAAkBA,EAAW,mBACzC,CAAC,UAAW,oBAAgBA,EAAW,qBAAiBA,EAAW,SAAUsG,GAErE/M,EAAO4G,aADPmG,GAGqB/M,EAAO6G,eAK5C,CACI,CAAC,aAAc,gBACf,CACI,CAAC,SAAU,eAAgB3G,EAAO8M,aAAc,oBAAgBvG,EAAW,SAAUwG,GAC7EA,GAAQ3N,EAAe4N,IAAID,IAC3B1N,EAAiB4N,QAAQF,EAAMjN,KAGvC,CAAC,SAAU,eAAgBE,EAAOkN,aAAc,oBAAgB3G,EAAW,SAAUwG,GAC7EA,GAAQ3N,EAAe4N,IAAID,IAC3B1N,EAAiB8N,QAAQJ,EAAMjN,OAK/C,CACI,CAAC,CAAC,aAAc,eAChB,CACI,CAAC,SAAU,aAAc,GAAI,aAAc,MAGnD,CACI,IACA,CACI,CAAC,UAAW,aAAa,EAAM,iBAAayG,GAC5C,CAAC,UAAW,cACZ,CACI,WACA,YACA,SAAU+B,GACN,cAAeA,GACX,IAAK,SACDxI,EAAOM,YAAckI,EACrB,MACJ,IAAK,SACD5H,QAAQE,OAAOd,EAAOW,OAAQ6H,GAC9BxI,EAAOM,YAAcN,EAAOW,OAAO2B,KACnC,MACJ,QACItC,EAAOM,YAAcJ,EAAOoN,YAIxC,YACA,WACItN,EAAOM,YAAcN,EAAOW,OAAO2B,KAAO,eAE9CmE,EACA,WACI,GAAI,sBAAsB8G,KAAK,IAAMrN,EAAOoN,WAExC,OADAtN,EAAOM,YAAcJ,EAAOoN,UAAUE,QAC/B,IAInB,CAAC,CAAC,SAAU,UAAW,WAAYC,EAAa,oBAAqBA,EAAa,SAAUC,GACpF9M,QAAQkD,kBAAkB4J,KAC1B1N,EAAO2N,kBAAoBzN,EAAOwN,YAG1C,CAAC,SAAU,cAAe9M,QAAQiC,UAAU7C,EAAOsC,MAAQtC,EAAOsC,KAAO,GAAI,YAAQmE,EAAW,SAAUmH,GACjGhN,QAAQiB,WAAW+J,KACpBA,EAAgBlM,EAAe,oBAG/BkB,QAAQiB,WAAW+J,IACnBhL,QAAQE,OACJd,EAAOsC,KACPsJ,EAAc5L,GACd4N,KAIZ,CAAC,CAAC,QAAS,UAAW,aAAcC,EAAY,iBAAkBA,EAAY,SAAUC,IAChFlN,QAAQkD,kBAAkBgK,IAAalN,QAAQ4B,QAAQsL,KACvD9N,EAAOS,eAAiBoN,OAGhC,CAAC,CAAC,SAAU,SAAU,QAAS,YAAa,UAAW3N,EAAO6N,SAC9D,CAAC,CAAC,SAAU,SAAU,cAAUtH,EAAW,cAAUA,EAAW,SAAUuH,GACtE,IAAIC,GAAU,EACd,GAAIrN,QAAQiC,UAAUmL,KAAapN,QAAQ4B,QAAQwL,GAAU,CACzD,IAC4BE,EADxBC,EAASC,OAAOC,KAAKL,GACrBM,EAASH,EAAOjM,OAEpB,GAAY,EAARoM,EACA,IAAKJ,EAAM,EAAGA,EAAMI,EAAOJ,IAEvB,GAAoC,iBAAzBF,EAAQG,EAAOD,KACU,IAAhCF,EAAQG,EAAOD,IAAMhM,OADzB,CAIA+L,GAAU,EACV,OAKZjO,EAAOuO,cAAgBN,EACvBtI,MAEJ,CAAC,SAAU,gBAAiB+G,EAAsB,gBAAiBA,EAAsB,SAAU8B,GACzE,iBAAXA,IACPxO,EAAOyO,cAAgB7N,QAAQE,OAAO4L,EAAsB8B,MAGpE,CAAC,SAAU,aAActO,EAAOwO,WAAY,cAAe,WAC3D,CAAC,SAAU,aAAcxO,EAAOyO,WAAY,eAC5C,CAAC,SAAU,SAAU,QAAIlI,EAAW,IACpC,CAAC,SAAU,aAAc,QAAIA,EAAW,IACxC,CACI,SACA,YACA,SAAUmI,GAWN,OAVAhO,QAAQiO,QACJD,EAAc,SAAUE,EAAOC,GACN,mBAAVD,GACH9O,EAAOsD,WAAWyL,KAClB/O,EAAOsD,WAAWyL,GAAOD,KAMlC9O,EAAOsD,YAElB,cAEJ,CAAC,SAAU,cAAe,EAAG,cAAe,EAAG,WAC3CqC,MAEJ,CAAC,SAAU,YAAa,IAAK,aAAc,KAC3C,CAAC,UAAW,kBAAcc,EAAW,eACrC,CAAC,UAAW,kBAAcA,EAAW,kBAK9CuI,EAAoBlC,EAAS5K,OAQpC,IAAK2J,EAAI,EAAGA,EAAImD,EAAMnD,IAElB,GAAKoD,EAAiB/O,EAAQ4M,EAASjB,GAAG,IAAI,GAK9C,IADAG,EAAQc,EAASjB,GAAG,GACfC,EAAI,EAAGC,EAAMC,EAAM9J,OAAQ4J,EAAIC,EAAKD,IAErCG,EAAYD,EAAMF,GAAG,GACrBI,EAAYF,EAAMF,GAAG,GACrBK,EAAYH,EAAMF,GAAG,GACrBM,EAAYJ,EAAMF,GAAG,GACrBO,EAAYL,EAAMF,GAAG,GACrBQ,EAAYN,EAAMF,GAAG,GACrBS,EAAYP,EAAMF,GAAG,GAErBoD,EAAcjD,EAAQC,EAAQC,EAAWC,EAASC,EAAOC,EAASC,GAItErM,EAAOoB,UACPtB,EAAOmP,OACHjP,EAAOoB,SAAU,SAAUkH,GACnB5H,QAAQwO,OAAO5G,EAAKxI,EAAOsB,YAI/BmL,EAAcjE,EACV5H,QAAQkD,kBAAkB0I,KAC1BA,EAAiBxN,EAASqQ,EAAc,SAE7C,GAIX,SAASA,IACLrP,EAAOsB,SAAWmL,EAClB9G,IACA6G,OAAiB/F,EAUrB,SAASwI,EAAiBK,EAAOC,EAAWC,GACxC,OAAI5O,QAAQkD,kBAAkByL,KAIZ,MAAdA,IAAsB3O,QAAQ6O,YAAYH,EAAMC,MAIhD3O,QAAQ4B,QAAQ+M,GAKxB,SAAwBD,EAAOI,EAAOF,GAClC,IAAI1D,EAAGC,EAAM2D,EAAMxN,OAAQmF,GAAS,EAEpC,GAAY,IAAR0E,EACA,OAGJ,IAAKD,EAAI,EAAGA,EAAIC,EAAKD,IACjB,GAAImD,EAAiBK,EAAOI,EAAM5D,IAAK0D,IAEnC,GADAnI,GAAS,GACJmI,EACD,OAAO,OAGX,GAAIA,EACA,OAAO,EAKnB,OAAOnI,EAxBIsI,CAAeL,EAAOC,EAAWC,QAD5C,IA4BJ,SAASN,EAAcU,EAAMC,EAAUC,EAAYC,EAAWC,EAAYC,EACnDC,GAEnB,GADAH,EAAYA,GAAaF,EACL,iBAATD,GAAqBhP,QAAQ4B,QAAQoN,GAAO,CACnD,GAAIhP,QAAQiB,WAAWqO,IAAaA,IAChC,OAG4B,iBAArBhQ,EAAO2P,GACd7P,EAAOmP,OACHjP,EAAO2P,GAAW,SAAUrH,GACJ,iBAAToH,UAA4BpH,IAAQoH,GAC3ChP,QAAQ4B,QAAQoN,KAAqC,EAA5BA,EAAKO,eAAe3H,GAE7CxI,EAAO+P,GAAavH,EAEhB5H,QAAQiB,WAAWiO,GACnB9P,EAAO+P,GAAaD,EAAWtH,GAE/BxI,EAAO+P,GAAaD,EAIxBlP,QAAQiB,WAAWoO,IACnBA,EAAQjQ,EAAO+P,GAAY/P,KAEhC,GAIHY,QAAQiB,WAAWmO,GACnBhQ,EAAO+P,GAAaC,IACZpP,QAAQ6O,YAAYO,KAC5BhQ,EAAO+P,GAAaC,IAqBpC,SAASvC,IACL,GAAIzN,EAAOsB,UAAYtB,EAAOsB,SAASY,OAAQ,CAC3C,IAEIH,EACA+J,EAHAsE,EAAapQ,EAAOsB,SAAS,GAAI+O,EAAQjC,OAAOC,KAAK+B,GACrDE,EAAyC,IAAIC,OAAO,0BAIxD,IAAKzE,EAAI,EAAG/J,EAAOsO,EAAMnO,OAAQ4J,EAAI/J,EAAM+J,IACvC,GAAoC,iBAAzBsE,EAAWC,EAAMvE,MAAqBwE,EAAO/C,KAAK8C,EAAMvE,IAG/D,YAFA9L,EAAO2N,kBAAoB0C,EAAMvE,IAOrClL,QAAQkD,kBAAkB9D,EAAO2N,qBACjC3N,EAAO2N,kBAAoB0C,EAAM,KAW7C,SAASxC,IAEL,GAAI7N,EAAOsB,SAASY,OAAQ,CACxB,IAGI4J,EAAG/J,EAHHyO,EAAY,GAAIJ,EAAapQ,EAAOsB,SAAS,GAC7CgP,EAA6B,IAAIC,OAAO,4BAA+BvQ,EAAO2N,kBAAoB,MAClG0C,EAA6BjC,OAAOC,KAAK+B,GAI7C,IAAKtE,EAAI,EAAG/J,EAAOsO,EAAMnO,OAAQ4J,EAAI/J,EAAM+J,IACH,iBAAzBsE,EAAWC,EAAMvE,KAAqBwE,EAAO/C,KAAK8C,EAAMvE,KAC/D0E,EAAUvK,KACN,CACIwK,MAAOJ,EAAMvE,KAM7B9L,EAAOS,eAAiB+P,GAIhC,SAASE,EAAKC,EAAMlP,EAAME,EAAQiP,EAAazM,EAAO0M,EAASzG,GAyB3D,GAAoB,iBAAT3I,EACP,OAAO,EAGX,IAAIK,EAAIC,EAAM+O,EAAOC,EAAaC,EAAOnN,EA+CzC,GA7CKjD,QAAQ4B,QAAQf,EAAKQ,gBACtBR,EAAKQ,aAAe,IAGxBR,EAAKyI,gBAAkB0G,EACvBnP,EAAKiC,WAAkB/B,EACvBI,EAAuBN,EAAKQ,aAAaC,OAErCtB,QAAQkD,kBAAkBrC,EAAK+B,eAAwB,EAAPzB,IAChDN,EAAK+B,aAAeW,EAAQnE,EAAOiR,aAInCH,EADS,IAAT/O,GACS,EAELN,EAAK+B,aACG,EAEA,EAKhBuN,EAAsBJ,EAAKzO,OAC3BT,EAAKiE,UAAiB0E,EACtB3I,EAAKyP,eAAiBH,EACtBtP,EAAK0P,UAAiBhN,EACtB1C,EAAK2P,SAAiBN,EACtBrP,EAAK4P,eAAiBrR,EAAOW,OAAOI,KAAK+P,GACzCrP,EAAKqE,cAAmB+K,EAEpBjQ,QAAQkD,kBAAkBrC,EAAKqD,WAC/BrD,EAAKqD,QAAU,GAAKC,KAAKC,UAG7BnB,EAAW7D,EAAO2D,QAAQlC,IAEtBb,QAAQkD,kBAAkBrC,EAAKsC,cAAgBtC,EAAKsC,cAAgBF,KACpEpC,EAAKsC,YAAcF,GAGvB8M,EAAK1K,KAAKxE,GAGVuP,EAAQ,EACG,EAAPjP,EACA,IAAKD,EAAK,EAAGA,EAAKC,EAAMD,IACpBkP,GAASN,EACLC,EACAlP,EAAKQ,aAAaH,GAClBL,EAAKzB,EAAOO,aACZwQ,EACA5M,EAAQ,EACR0M,GAAWpP,EAAK+B,aAChB1B,GAOZ,OAFAL,EAAK6P,SAAWN,EAWpB,SAASO,EAAUC,GASf,OANI5Q,QAAQiC,UAAU7C,EAAOuB,oBAClBvB,EAAOuB,WAGlBvB,EAAOuB,WAAaiQ,EAaxB,SAAS7L,EAAY8L,GACjB,IAAIC,EACA3P,EACA4P,EAAc,GAElB,GAAI/Q,QAAQiC,UAAU4O,GAAQ,CAC1B,IAAK7Q,QAAQ4B,QAAQiP,IAA2B,IAAjBA,EAAMvP,OACjC,OAAOqP,EAAU,IAEjBG,EAAQD,MAET,CAAA,IAAK7Q,QAAQ4B,QAAQxC,EAAOsB,WAAwC,IAA3BtB,EAAOsB,SAASY,OAC5D,OAAOqP,EAAU,IAEjBG,EAAQ1R,EAAOsB,SAgCnB,GA7BKpB,EAAOwN,UACRD,IAGCvN,EAAO0R,YACR/D,IAGAjN,QAAQiC,UAAU7C,EAAO+N,WACpBnN,QAAQiB,WAAW8J,KACpBA,EAAiBjM,EAAe,oBAGhCkB,QAAQiB,WAAW8J,KACnB+F,EAAQ/F,EAAe+F,EAAO1R,EAAO+N,WAIzCnN,QAAQiC,UAAU7C,EAAO6R,UACpBjR,QAAQiB,WAAW6J,KACpBA,EAAgBhM,EAAe,mBAG/BkB,QAAQiB,WAAW6J,KACnBgG,EAAQhG,EAAcgG,EAAO1R,EAAO6R,OAAQ7R,EAAOyO,iBAKhD,GADX1M,EAAO2P,EAAMxP,QACC,CACV,IAAIJ,EAGJ,IAAKA,EAAK,EAAGA,EAAKC,EAAMD,IACN4O,EAAKiB,EAAaD,EAAM5P,QAAK2E,OAAWA,EAAW,GAAG,EAAM3E,GAOlF,OAFAyP,EAAUI,GAEHA,EAxUX3R,EAAO8R,YAAc,WAEjB9R,EAAO+R,YAAc,IAGzB/R,EAAO2F,YAAcA,IA7/BrBqM,QAo0CJ,SAAmBC,GAEf,IAAIC,EAAa,GACbC,EAAaF,EAASG,OAAO5E,OAEX,EAAlB2E,EAASjQ,SACTgQ,EAAaC,EACbF,EAASG,KAAK,KAGlB,OAAO,SAAgBvS,EAAO6C,EAAS4M,GAEnC,GAAqB,iBAAVA,GAAsBA,EAAMhJ,WAAY,CAC/C,IAAI+L,EAAc3S,EAAe,gBAC7BkB,QAAQiB,WAAWwQ,IACnBA,EAAYxS,EAAO6C,EAAStD,EAASC,GAK7CqD,EAAQ4P,MAAM,WAEV,SAASC,EAAeC,EAAU3S,GAC9B,IACI4S,EADAC,EAAWF,EAAS,GAAG7P,cAAc,mBAIzC,GADA9C,EAAM0K,aAAU9D,EACZiM,EAAJ,CAOA,GANIA,EAAc9R,QAAQ8B,QAAQgQ,GAC9BD,EAAcC,EAASxJ,KAAK,cAKf,CACb,IAAIyJ,EAAcxT,EAAOsT,EAAPtT,CAAoBU,IAAU4S,EAChD,GAA2B,iBAAhBE,EACP,OAAO1T,EAAMiO,IACTyF,EACA,CAACC,MAAOtT,IACVuT,KAAK,SAAUC,GACT,IAAItB,EAAgBsB,EAAStB,MAAQ,GACrCA,EAAoBA,EAAKhE,OAEzB,IAAIuF,EAAgBvI,SAASC,cAAc,OAC3CsI,EAAQC,UAAYxB,EACpBuB,EAAoBnS,QAAQ8B,QAAQqQ,GACpClT,EAAM0K,SAAewI,EAAQ,GAAGpQ,cAAc,2BAK1D9C,EAAM0K,SAAWmI,EAAS,GAAG/P,cAAc,oBAG/ChD,EAAiBsT,YAAYpT,EAAOA,EAAMqT,eAI9C,IAAIC,EACoB,EAApBjB,EAAWhQ,OAEiB,iBAD5BiR,EAAeZ,EAAe3R,QAAQ8B,QAAQwP,EAAW1E,QAAS3N,IAE9DsT,EAAaN,KAAK,WACdnQ,EAAQ0G,OAAOlK,EAASgT,EAAThT,CAAqBW,MAGxC6C,EAAQ0G,OAAOlK,EAASgT,EAAThT,CAAqBW,IAGxCZ,EAAMiO,IACFoC,EAAM8D,aAAe7T,EAAiB8T,UACtC,CAACT,MAAOtT,IACVuT,KAAK,SAAUC,GACT,IAAItB,EAAWsB,EAAStB,MAAQ,GAChCA,EAAe5Q,QAAQ8B,QAAQ8O,EAAKhE,QAER,iBAD5B2F,EAAeZ,EAAef,EAAM3R,IAEhCsT,EAAaN,KAAK,WACdnQ,EAAQ0G,OAAOlK,EAASsS,EAATtS,CAAeW,MAGlC6C,EAAQ0G,OAAOlK,EAASsS,EAATtS,CAAeW,WAuhB9D,SAASyT,EAAsBlU,EAASC,EAAWL,EAAUuU,EAAIrU,GAE7D,IAAIsU,EAOAC,EACAC,EAPAC,GAAgB,EAChBC,GAAgB,EAChBC,GAAgB,EAEhBC,EAAgB,GAIhBC,EAAgB,CACZC,YAoFR,SAAqBtR,GACjB8Q,EAAW9Q,GApFPuR,YA2FR,WACI,OAAOT,GA3FHzN,IAiHR,SAAalG,EAAO6C,GAChBwR,IAEAJ,EAAM7N,KAAK,CACPvD,QAASA,EACT7C,MAASA,KArHToT,YAyHR,SAAqBpT,EAAO2S,GACTA,GAzHX2B,SAgIR,WACI,OAAOL,GAhIHI,cAAeA,GAEnBE,EAAgBxT,QAAQ8B,QAAQtD,GAIpC,OAFAgV,EAAQC,GAAG,qBAAsBH,GAE1BH,EAEP,SAASO,KAEU,CACXC,MAAQH,EAAQI,KAAK,gBAAkBhK,SAASiK,gBAAgBC,YAChE7J,OAAQuJ,EAAQI,KAAK,iBAAmBhK,SAASiK,gBAAgBE,aACjEhL,IAAQtK,EAAU,GAAGuV,KAAKC,WAAaxV,EAAU,GAAGoV,gBAAgBI,UACpEpL,KAAQpK,EAAU,GAAGuV,KAAKE,YAAczV,EAAU,GAAGoV,gBAAgBK,aAGrEnB,GAAcC,EACdC,GAAc,GAKlBF,GAAa,EAKjB,SAASoB,IACL,GAAInB,EACA,OAGJ,IAAIoB,EAAkB,EAATA,EAAaA,EAASlB,EAAM5R,OAE5B,EAAT8S,GACOlB,EAAM,GAEbF,GAAa,EACbF,EAAa1U,EAAS,WAIlB8U,EAAMrO,OAAO,EAAG,GAChBmO,GAAW,EACXoB,IACAhW,EAASiW,OAAOvB,GAChBqB,KACD,KAGHpB,GAAa,EACTE,IACAA,GAAc,EACdS,MA7BRS,IAqEJ,SAASb,IACLlV,EAASiW,OAAOxB,GAEhBA,EAAgBzU,EACZ,WACIsV,KAEJ,IAh1ER1T,QAAQkD,kBA4uIR,SAA2B0E,GACvB,OAAO5H,QAAQ6O,YAAYjH,IAAgB,OAARA,GA3uIvC5H,QAAQiC,UA8uIR,SAAmB2F,GACf,QAAS5H,QAAQ6O,YAAYjH,IAAgB,OAARA,IA3uIzC5H,QAAQsU,OAAO,cAAe,CAAC,kCAC1BC,SAAS,gBAA6C,CACnD7S,KAAQ,WACRqI,MAAQ,iBACR9B,OAAQ,kBACRpH,KAAQ,gBACR2T,MAAQ,iBACRC,OAAQ,kBACRzK,MAAQ,uBACRrD,KAAQ,gBACRuC,OAAQ,kBACR/I,KAAQ,CACJC,EAAM,4BACNE,EAAM,2BACNE,KAAM,8BAEXR,QAAQsU,OAAO,eACrBnV,WAAW,8BAA+B,CACvC,SACA,SAAUC,GACNoF,KAAKvF,MAAQG,KAIzBY,QAAQsU,OAAO,eACVnV,WAAW,wBAAyB,CACjC,SACA,SAAUC,GACNoF,KAAKvF,MAAQG,KAIzBY,QAAQsU,OAAO,eACVnV,WAAW,yBAA0B,CAClC,SACA,SAAUC,GACNoF,KAAKvF,MAAQG,KAIzBY,QAAQsU,OAAO,eACVI,UAAU,UAAW,CAClB,WACA,SAAUpW,GACN,MAAO,CACHU,SAAU,IACV2V,KAAU,SAAU1V,EAAO6C,EAAS4M,GAChCzP,EAAMsP,OACFG,EAAM0C,QACN,SAAUwD,GACFA,IACI5U,QAAQiB,WAAWa,EAAQiI,OAC3BjI,EAAQiI,QAERjI,EAAQ0P,KAAK,IAGjB1P,EAAQ0G,OAAOlK,EAASsW,EAATtW,CAAkBW,YAQ5DyV,UAAU,iBAAkB,CACzB,WACA,SAAUpW,GACN,MAAO,CACHU,SAAU,IACV2V,KAAU,SAAU1V,EAAO6C,EAAS4M,GAChCzP,EAAMsP,OACFG,EAAMmG,eACN,SAAUD,GACFA,GACA9S,EAAQgT,YAAYxW,EAASsW,EAATtW,CAAkBW,WAStEe,QAAQsU,OAAO,eACVI,UAAU,oBAAqB,WAC5B,MAAO,CACH1V,SAAY,IACZC,OAAY,EACZE,WAAY,8BACZwV,KAGJ,SAAgB1V,EAAO6C,GACnB7C,EAAMW,MAAQ,oBACVX,EAAMc,OAAO0U,QACb3S,EAAQkG,SAAS/I,EAAMc,OAAO0U,YAK9CzU,QAAQsU,OAAO,eACVI,UAAU,cAAe,CACtB,mBACA,SAAU3V,GACN,MAAO,CACHC,SAAY,IACZE,SAAY,EACZC,WAAY,wBACZwV,KAYJ,SAAgB1V,EAAO6C,EAAS4M,GAE5BzP,EAAM8V,YAAc,GAEhB9V,EAAMc,OAAOc,OACbiB,EAAQkG,SAAS/I,EAAMc,OAAOc,MAC9B5B,EAAM8V,YAAc9V,EAAMc,OAAOc,MAErC,IAEImU,EAFAC,EAA0C,kBAAtBhW,EAAM6E,aAA0D,kBAAtB7E,EAAMoE,YACpE6R,EAAaxG,EAAMyG,YAGvBpW,EAAiBoG,IAAIlG,EAAO6C,GAExBmT,IACAhW,EAAMW,MAAQ,cAEdX,EAAMmW,QAAU,WACZ,OAAOnW,EAAMiW,KAIrBjW,EAAMI,SAAsByC,EAC5B7C,EAAMiW,GAASjQ,YAAa,EAE5BhG,EAAM4C,iBAAmB,WACrB,OAAO7B,QAAQ8B,QAAQA,EAAQ,GAAGC,cAAc,sBAGpD9C,EAAMuG,SAASvG,EAAOA,EAAMiW,IAE5BjW,EAAMoW,aAAe,WACjB,OAAOpW,GAGX,IACIqW,EACApK,EAFAqK,EAAW,GAERC,EAAQhI,OAAOC,KAAKxO,EAAMiW,IAC7BO,EAAWD,EAAKlU,OAChBoU,EAAWzW,EAAMiW,GAAS/R,YAC1BwS,EAAW,CACP,cACA,eACA,YACA,YACA,iBAEA,aACA,kBACA,WACA,WACA,kBAEJC,EAAW,CACP,gBAEJC,EAAWD,EAAStU,OAGxB,IAAK4J,EAAI,EAAGA,EAAIuK,EAAOI,EAAS3K,IACxBA,EAAIuK,GAC+B,IAA/BE,EAASpG,QAAQiG,EAAKtK,KACtBqK,EAASlQ,KAAK6P,EAAU,IAAMM,EAAKtK,KAGG,IAAtCsK,EAAKjG,QAAQqG,EAAS1K,EAAIuK,KAC1BF,EAASlQ,KAAK6P,EAAU,IAAMU,EAAS1K,EAAIuK,IAKvDH,EAAU,IAAMC,EAASO,KAAK,KAAO,IAErC7W,EAAMsP,OAAO+G,EAMb,SAAqBS,EAAQC,EAAQ/W,GACjC,IAAIgX,EAAShX,EAAMiW,GAEnB,GAAsB,iBAAXe,EACP,OAGCA,EAAOhR,aACRgR,EAAOhR,YAAa,GAGpBgR,EAAO9S,cAAgBuS,IAEvBzW,EAAMqG,YAAYrG,EAAOgX,GAGzBhX,EAAMuG,SAASvG,EAAOgX,GACtBP,EAAUO,EAAO9S,aAGrB,IAEIjC,EAEAgP,EAJAgG,EAAUD,EAAO5U,aACjBF,EAAU+U,EAAQ5U,OAKlB4O,EADS,IAAT/O,GACS,EAEL8U,EAAOrT,aACC,EAEA,EAIhBqT,EAAOzF,SAAiBN,EACxB+F,EAAOxF,eAAiBxR,EAAMc,OAAOI,KAAK+P,GAErCjR,EAAM0K,UACFqL,IACDA,EAAa/V,EAAM4C,oBAGnBoU,EAAOrT,aACPoS,EAAWvM,YAAYxJ,EAAMc,OAAOkI,QAEpC+M,EAAWhN,SAAS/I,EAAMc,OAAOkI,SAIzC,IAAK/G,EAAK,EAAGA,EAAKC,EAAMD,IACpBjC,EAAM2B,oBAAoBsV,EAAQhV,GAAKjC,EAAM2L,YAAaqL,GAAQ,KAzDvC,GAEnChX,EAAMkX,IAAI,WAAY,WAClBlX,EAAMqG,YAAYrG,EAAOA,EAAMiW,WA8DnDlV,QAAQsU,OAAO,eACVI,UAAU,eAAgB,WACvB,MAAO,CACH1V,SAAY,IACZE,SAAY,EACZC,WAAY,yBACZwV,KAGJ,SAAgB1V,EAAO6C,GACnB7C,EAAMW,MAAQ,eAEVX,EAAMc,OAAOyU,OACb1S,EAAQkG,SAAS/I,EAAMc,OAAOyU,OAC9BvV,EAAMmX,aAAenX,EAAMc,OAAOyU,OAElCvV,EAAMmX,aAAe,OAKrCpW,QAAQsU,OAAO,eACVI,UAAU,UAAWvW,GAE1BA,EAAckY,QAAU,CACpB,WAAY,QAAS,WAAY,SAAU,UAAW,YAAa,iBACnE,mBAAoB,gBAAiB,iBAAkB,iBAAkB,oBA26C7ErW,QAAQsU,OAAO,eACVgC,QAAQ,kBAAmB,WA0FxB,MAzFoB,CAChBC,UAAW,SAAU3F,EAAM9C,EAAY0I,EAAWC,GAI9C,GAHAA,EAA+B,mBAAbA,EAA0BA,EAAW,cAGlD7F,GAAwB,IAAhBA,EAAKtP,SAAiBwM,IAAe0I,EAC9C,MAAO,GAYX,IATA,IAKIE,EAAU3V,EALVW,EAAW,GACXiV,EAAW,GACXC,EAAWhG,EAAK,GAChBiG,EAAWD,EAAK9I,GAChBgJ,EAAW,GAEX3L,EAAWyF,EAAKtP,OAChB4J,EAAW,EAERA,EAAIC,GAEPsL,EADAG,EAAOhG,EAAK1F,MAGZ4L,EADAD,EAAqBD,EAAK9I,IACL8I,EAKzB,IADA1L,EAAI,EACGA,EAAIC,GAGPsL,EAFAG,EAAOhG,EAAK1F,OAMZwL,GADAI,EADAD,EAAqBD,EAAK9I,IACL8I,GACKJ,KAGtBzV,EAAS+V,EAASJ,MAEV3V,EAAOM,aACHrB,QAAQ4B,QAAQb,EAAOM,cACvBN,EAAOM,aAAagE,KAAKuR,IAEzBG,QAAQC,MAAM,6CACdD,QAAQE,IAAIlW,EAAOM,eAGvBN,EAAOM,aAAe,CAACuV,IAI/BD,EAAQtR,KAAKwR,GAKrB,IADA1L,EAAMwL,EAAQrV,OACT4J,EAAI,EAAGA,EAAIC,EAAKD,IACjBxJ,EAAK2D,KAAKyR,EAASH,EAAQzL,KAG/B,OAAOxJ,GAEXwV,UAAW,SAASC,EAAavG,EAAMwG,EAAYX,GAC/CA,EAA+B,mBAAbA,EAA0BA,EAAW,aAGvD,IACIvV,EAEAmW,EAAOC,EAHPC,EAAQ,GAERpW,EAAQyP,EAAOA,EAAKtP,OAAS,EAGjC,IAAKJ,EAAK,EAAGA,EAAKC,EAAMD,IAGpBuV,EAFAY,EAAQrX,QAAQC,KAAK2Q,EAAK1P,KAItBlB,QAAQ4B,QAAQyV,EAAMD,KAA2C,EAA3BC,EAAMD,GAAY9V,SACxDgW,EAASH,EAAaE,EAAMD,GAAaA,EAAYX,UAC9CY,EAAMD,GACbC,EAAMhW,aAAeiW,GAGzBC,EAAMlS,KAAKgS,GAGf,OAAOE,MAoBvBvX,QAAQsU,OAAO,eACVgC,QAAQ,iBAAkB,CACvB,YAAa,UACb,SAAU7X,EAAWD,GACjB,IAAIgZ,EAAwC,CAOxCC,OAAU,SAAUC,GAChB,YAAgD,IAAlCA,EAAUpP,KAAK,gBAQjCqP,SAAU,SAAUhP,GAChB,IAAIiP,EAAMjP,EAQV,YANwB9C,IAApB8C,EAAEkP,cACFD,EAAMjP,EAAEkP,cAAcjB,KAAK,QACA/Q,IAApB8C,EAAEmP,oBAAiEjS,IAAlC8C,EAAEmP,cAAcD,gBACxDD,EAAMjP,EAAEmP,cAAcD,cAAcjB,KAAK,IAGtCgB,GASXlQ,SAAU,SAAUzI,GAChB,IAAI+H,EAAU/H,EAAMmW,UAChBmC,EAAUtY,EAAMqL,eAChBvD,EAAU9H,EAAMsK,QAAQvC,EAAMsC,iBAElC,MAAO,CACHzI,KAASmG,EACTjG,OAASgG,EACTG,KAAS,CACLnG,OAAQgG,EACR3B,IAAQ4B,EAAMlC,WAElB7F,MAASA,EACT2H,OAAS2Q,EACT5Q,KAAS4Q,EACTQ,KAAS9Y,EAAMmK,eAAepC,GAC9BN,SAAS,IAUjBuD,OAAQ,SAAUnI,GACd,OAAOA,EAAQ8R,KAAK,iBASxBD,MAAO,SAAU7R,GACb,OAAOA,EAAQ8R,KAAK,gBASxBoE,OAAQ,SAAUlW,GACd,IAAImW,EAAqBnW,EAAQ,GAAGoW,wBAEpC,MAAO,CACHvE,MAAQ7R,EAAQ8R,KAAK,eACrB3J,OAAQnI,EAAQ8R,KAAK,gBACrB7K,IAAQkP,EAAmBlP,KAAOvK,EAAQ2Z,aAAe1Z,EAAU,GAAGuV,KAAKC,WAAaxV,EAAU,GAAGoV,gBAAgBI,WACrHpL,KAAQoP,EAAmBpP,MAAQrK,EAAQ4Z,aAAe3Z,EAAU,GAAGuV,KAAKE,YAAczV,EAAU,GAAGoV,gBAAgBK,cAW/HmE,gBAAiB,SAAU1P,EAAG/B,GAqB1B,MApBoD,CAChD0R,QAAU3P,EAAEG,MAAQtE,KAAKwT,OAAOpR,GAAQiC,KACxC0P,QAAU5P,EAAEK,MAAQxE,KAAKwT,OAAOpR,GAAQmC,IACxCyP,OAAU7P,EAAEG,MACZ2P,MAAU9P,EAAEG,MACZ4P,OAAU/P,EAAEK,MACZ2P,MAAUhQ,EAAEK,MACZ4P,KAAU,EACVC,KAAU,EACVC,MAAU,EACVC,MAAU,EACVC,MAAU,EACVC,KAAU,EACVC,KAAU,EACVC,SAAU,EACVC,SAAU,EACVC,QAAU,EACVC,QAAU,IAclBC,cAAe,SAAU5Q,EAAGvD,EAAKoU,GAE7BpU,EAAIqT,MAAQrT,EAAIwT,KAChBxT,EAAIuT,MAAQvT,EAAIyT,KAGhBzT,EAAIwT,KAAOjQ,EAAEG,MACb1D,EAAIyT,KAAOlQ,EAAEK,MAGb5D,EAAI0T,MAAQ1T,EAAIwT,KAAOxT,EAAIqT,MAC3BrT,EAAI2T,MAAQ3T,EAAIyT,KAAOzT,EAAIuT,MAG3BvT,EAAI+T,SAAW/T,EAAI6T,KACnB7T,EAAIgU,SAAWhU,EAAI8T,KAGnB9T,EAAI6T,KAAqB,IAAd7T,EAAI0T,MAAc,EAAgB,EAAZ1T,EAAI0T,MAAY,GAAK,EACtD1T,EAAI8T,KAAqB,IAAd9T,EAAI2T,MAAc,EAAgB,EAAZ3T,EAAI2T,MAAY,GAAK,EAGtD,IAAIU,EAAQtV,KAAKuV,IAAItU,EAAI0T,OAAS3U,KAAKuV,IAAItU,EAAI2T,OAAS,EAAI,EAG5D,OAAIS,GACApU,EAAI4T,MAASS,OACbrU,EAAIuU,QAAS,KAMbvU,EAAI4T,QAAUS,GACdrU,EAAIiU,QAAU,EACdjU,EAAIkU,QAAU,IAEdlU,EAAIiU,SAAWlV,KAAKuV,IAAItU,EAAI0T,OACX,IAAb1T,EAAI6T,MAAc7T,EAAI6T,OAAS7T,EAAI+T,WACnC/T,EAAIiU,QAAU,GAElBjU,EAAIkU,SAAWnV,KAAKuV,IAAItU,EAAI2T,OACX,IAAb3T,EAAI8T,MAAc9T,EAAI8T,OAAS9T,EAAIgU,WACnChU,EAAIkU,QAAU,IAItBlU,EAAI4T,MAAQS,EAELrU,IAWXwU,cAAe,SAAU3a,EAAO6C,EAASvC,EAAQ+I,GAC7CA,EAAOA,GAAQ,OACftI,QAAQ8B,QAAQA,EAAQ+X,WAAW,IAAIjR,IAAIN,EAAMrJ,EAAMyD,WAAWY,WAAW/D,KASjFua,cAAe,SAAUhY,GACrB,GAAIA,EAAS,CACT,IAAIzC,EAAWW,QAAQ8B,QAAQA,GAC/B,OAAOzC,GAAYA,EAASiC,aAAoD,IAAnCjC,EAASiJ,KAAK,iBAG/D,OAAO,GASXyR,eAAgB,SAAUjY,GACtB,GAAIA,EAAS,CACT,IAAIzC,EAAWW,QAAQ8B,QAAQA,GAE/B,OAAOzC,GAAYA,EAASiC,aAAqD,IAApCjC,EAASiJ,KAAK,kBAG/D,OAAO,GASX0R,oBAAqB,SAAUlY,GAC3B,GAAIA,EAAS,CACT,IAAIzC,EAAWW,QAAQ8B,QAAQA,GAE/B,OAAOzC,GAAYA,EAASiC,aAA2D,IAA1CjC,EAASiJ,KAAK,wBAG/D,OAAO,GASX2R,mBAAoB,SAAUnY,GAC1B,OAAO0V,EAASsC,cAAchY,IACvB0V,EAASuC,eAAejY,IACxB0V,EAASwC,oBAAoBlY,IAUxCoY,cAAe,SAASC,EAAgBrY,EAASwG,GAC7C,GAAIxG,GAAWwG,EAAM,CACjB,IACI8R,EADWpa,QAAQ8B,QAAQA,GACPf,SAExB,GAAIqZ,EAAS,CACT,IAAIC,GAAW,EAEf,cAAe/R,GACX,IAAK,WACD+R,EAAW/R,EAAK8R,GAChB,MACJ,QACIC,OAAyC,IAAvBD,EAAQ9R,KAAKA,GAIvC,OAAI+R,EACOD,EAEAD,EAAgBC,EAAS9R,OAOpD,OAAOkP,KAInBxX,QAAQsU,OAAO,eACVgC,QAAQ,iBAAkB,CACvB,YACA,SAAUgE,GACN,OAEA,SAAgBC,GACZ,GAAIva,QAAQiC,UAAUqY,IAAcA,EAAUE,IAAID,GAC9C,OAAOD,EAAUhO,IAAIiO,OAYzCva,QAAQsU,OAAO,eACVgC,QAAQ,mBAAoB,CACzB,iBACA,SAAU5X,GACN,IAeI+b,EAAe,GAyEnB,MAvEiD,CAOzChO,QAAS,SAAUiO,EAAMzb,GAChBwb,EAAOxb,EAAM0b,OACdF,EAAOxb,EAAM0b,KAAO,IAExBF,EAAOxb,EAAM0b,KAAKC,SAAWF,GASjCnO,QAAS,SAAUmO,EAAMzb,GAChBwb,EAAOxb,EAAM0b,OACdF,EAAOxb,EAAM0b,KAAO,IAExBF,EAAOxb,EAAM0b,KAAKE,SAAWH,GAQjCjI,QAAS,WACL,MAlDO,iCA2DXpK,QAAS,SAAUpJ,GACf,GAAIwb,EAAOxb,EAAM0b,MAAQF,EAAOxb,EAAM0b,KAAKE,SAAU,CACjD,IAAIjW,EAAOlG,EAAe4N,IAAImO,EAAOxb,EAAM0b,KAAKE,UAChD,GAAIjW,EACA,OAAOA,EAIf,OAAOlG,EAAe4N,IA9Df,4CAuEXlE,QAAS,SAAUnJ,GACf,GAAIwb,EAAOxb,EAAM0b,MAAQF,EAAOxb,EAAM0b,KAAKC,SAAU,CACjD,IAAIhW,EAAOlG,EAAe4N,IAAImO,EAAOxb,EAAM0b,KAAKC,UAChD,GAAIhW,EACA,OAAOA,EAIf,OAAOlG,EAAe4N,IA1Ef,gDAkF/BtM,QAAQsU,OAAO,eACVgC,QAAQ,mBAAoB5D,GAEjCA,EAAsB2D,QAAU,CAAC,UAAW,YAAa,WAAY,KAAM,YAuJ3ErW,QAAQsU,OAAO,eACVgC,QAAQ,iBAAkB,CACvB,UAAW,SAAUwE,GACjB,OA4PA,SAAsBpa,EAAU0M,EAAS2N,EAASC,GAC9C,IAAKhb,QAAQ4B,QAAQlB,IACM,IAApBA,EAASY,OACZ,OAAOZ,EAGX,IAAIQ,EAAIC,EACJ8Z,EAGJ,GADAA,EAxDJ,SAASC,EAAW9N,GAChB,IAAIE,EAAKI,EAAOH,EACZ0N,EACAE,EAGJ,GAAuB,iBAAZ/N,GAAyBpN,QAAQ4B,QAAQwL,GA2BhD,OAAOA,EAtBP,GAJAG,EAAUC,OAAOC,KAAKL,GACtBM,EAAUH,EAAOjM,OACjB2Z,EAAU,GAEE,EAARvN,EACA,IAAKJ,EAAM,EAAGA,EAAMI,EAAOJ,IAEa,iBAAzBF,EAAQG,EAAOD,KAAsD,IAAhCF,EAAQG,EAAOD,IAAMhM,SAGjE6Z,EADOnb,QAAQ4B,QAAQwL,EAAQG,EAAOD,KAC7BF,EAAQG,EAAOD,IACe,iBAAzBF,EAAQG,EAAOD,IACpB4N,EAAW9N,EAAQG,EAAOD,KAE1B,CACLuC,MAAUtC,EAAOD,GACjBmJ,SAAUrJ,EAAQG,EAAOD,KAGjC2N,EAAQ5V,KAAK8V,IAIrB,OAAOF,EA0BDC,CAAW9N,IACfpN,QAAQ4B,QAAQqZ,IAA+B,iBAAZA,GACf,IAAnBA,EAAQ3Z,OAAc,CACzB,IAAKJ,EAAK,EAAGC,EAAOT,EAASY,OAAQJ,EAAKC,EAAMD,IAC5CN,EACIma,EACAra,EAASQ,GACT8Z,GAAY,eACZI,EAAgBC,GAIxB,OAAO3a,EAKX,IAFAqa,EAAQ9J,OAAegK,EACvBF,EAAQO,aAAe,EAClBpa,EAAK,EAAGC,EAAOT,EAASY,OAAQJ,EAAKC,EAAMD,IAC5CN,EACIma,EACAra,EAASQ,GACT8Z,GAAY,eACZO,EAAWF,GAInB,OAAO3a,GA7RX,SAASE,EAAoBma,EAASla,EAAM2a,EAAYlM,EAAUD,EAASoM,GACvE,GAAKzb,QAAQiB,WAAWqO,GAAxB,CAIA,IAAIpO,EAAIC,EAAMC,EACVsa,EAAgBpM,EAASyL,EAASla,GAClC8a,GAAgB,EAChBC,EAAgBb,EAAQO,aAE5B,GAAItb,QAAQiC,UAAUpB,EAAK2a,IAAc,CAKrC,IAHAra,GADAC,EAASP,EAAK2a,IACEla,OAGXJ,EADL6Z,EAAQO,aAAe,EACVpa,EAAKC,EAAMD,IACpBya,EAAe/a,EACXma,EACA3Z,EAAOF,GACPsa,EACAlM,EACAD,EACAqM,GAAeD,IACdE,EAITZ,EAAQO,aAAeM,EAO3B,OAJI5b,QAAQiB,WAAWoO,IACnBA,EAAQ0L,EAASla,GAAsB,IAAhB6a,GAAuC,IAAjBC,GAAwC,IAAjBF,GAGjEC,GAAeC,GAU1B,SAASE,EAASpF,EAAU7F,GACxB,IAAI5Q,QAAQkD,kBAAkB0N,KAAS5Q,QAAQ4B,QAAQgP,GAAvD,CAIA,GAAI5Q,QAAQiB,WAAWwV,GACnB,OAAOA,EAAS7F,EAAMkK,GAEtB,GAAwB,kBAAbrE,EAEP,OADA7F,IAASA,KACO6F,EACb,GAAIzW,QAAQiC,UAAUwU,GACzB,IAEI,OADa,IAAI9G,OAAO8G,GACV9J,KAAKiE,GAEvB,MAAOkL,GACH,MAAoB,iBAATlL,GAC0B,EAA1BA,EAAKrB,QAAQkH,QAEpB,IAmBpB,SAASsF,EAAYlb,EAAMmb,EAAWpN,GAClC,GAAI5O,QAAQ4B,QAAQoa,GAChB,OA2BR,SAAyBnb,EAAMob,EAAYrN,GACvC,IAAI1D,EAAGC,EAAM8Q,EAAW3a,QAAU,EAAGmF,GAAS,EAC9C,GAAY,IAAR0E,EACA,OAGJ,IAAKD,EAAI,EAAGA,EAAIC,EAAKD,IACjB,GAAI6Q,EAAYlb,EAAMob,EAAW/Q,IAAK0D,IAGlC,GAFAnI,GAAS,GAEJmI,EACD,OAAO,OAKX,GAAIA,EACA,OAAO,EAKnB,OAAOnI,EAjDIyV,CAAgBrb,EAAMmb,EAAWpN,GAExC,IAEIuN,EAAKC,EAAQC,EAFbpY,EAAY+X,EAAUnM,MACtByM,EAAYN,EAAUvF,SAG1B,GAAa,OAATxS,GAGA,IADAoY,GADAD,EAAS5O,OAAOC,KAAK5M,IACLS,OACX6a,EAAM,EAAGA,EAAME,EAAOF,IACvB,GAAIN,EAASS,EAAWzb,EAAKub,EAAOD,KAChC,OAAO,OAGZ,GAAInc,QAAQiC,UAAUpB,EAAKoD,IAC9B,OAAO4X,EAASS,EAAWzb,EAAKoD,IA8C5C,SAASoX,EAASN,EAASla,EAAM0b,EAAcC,EAAeC,GAC1D,OAAqB,IAAjBF,GACA1b,EAAK6b,cAAuB,EAC5B7b,EAAK8b,sBAAuB,OAC5B9b,EAAK+b,mBAAuB7B,EAAQO,kBAEX,IAAlBkB,IAAiD,IAAvBzB,EAAQhP,aACnB,IAAnB0Q,IAAiD,IAAtB1B,EAAQ/O,WACtCnL,EAAK6b,cAAuB,EAC5B7b,EAAK8b,sBAAuB,OAC5B9b,EAAK+b,mBAAuB7B,EAAQO,yBAKjCza,EAAK6b,oBACL7b,EAAK8b,iCACL9b,EAAK+b,oBAYhB,SAASrB,EAAUR,EAASla,GACxB,OAA8B,IAA1Bka,EAAQ9J,OAAO3P,QAGRya,EAAYlb,EAAMka,EAAQ9J,OAAQ8J,EAAQ9O,WAAY,GAarE,SAASmP,EAAeL,EAASla,GAC7B,OAAO,MAkGvBb,QAAQsU,OAAO,eACVgC,QAAQ,kBAAmB,CACxB,UACA,SAAUwE,GACN,IAAI+B,EAAsB/B,EAAQ,WAC9Bla,EAAsB,SAASA,EAAoBma,EAASla,EAAM0Z,EAAMuC,GACpE,IAAI5b,EAAIC,EAAMC,EAEd,GAAIpB,QAAQiC,UAAUpB,EAAK0Z,IAAQ,CAI/B,IAFApZ,GADAC,EAASP,EAAK0Z,IACEjZ,OAEXJ,EAAK,EAAGA,EAAKC,EAAMD,IACpBE,EAAOF,GAAMN,EAAoBma,EAAS3Z,EAAOF,GAAKqZ,EAAMuC,GAGhEjc,EAAK0Z,GAAQuC,EAAUjc,EAAK0Z,GAAOQ,GAGvC,OAAOla,GAEXkc,EAAsB,SAAkBC,EAAM7P,GAC1C,OAAO0P,EAAWG,EAAM7P,IAyBhC,OAvB0B,SAAiBzM,EAAUyM,GAC7C,IAAKnN,QAAQ4B,QAAQlB,IACM,IAApBA,EAASY,UACPtB,QAAQ4B,QAAQuL,IAA+B,iBAAZA,GAAwBnN,QAAQid,SAAS9P,IAAYnN,QAAQiB,WAAWkM,KAC1F,IAAnBA,EAAQ7L,SAAiBtB,QAAQiB,WAAWkM,GAE/C,OAAOzM,EAGX,IAAIQ,EAAIC,EAER,IAAKD,EAAK,EAAGC,EAAOT,EAASY,OAAQJ,EAAKC,EAAMD,IAC5CR,EAASQ,GAAMN,EACXuM,EACAzM,EAASQ,GACT,eACA6b,GAIR,OAAOA,EAASrc,EAAUyM,OAO9CnN,QAAQsU,OAAO,eACVgC,QAAQ,eAAgB,CACrB,WAAY,iBACZ,SAAUlY,EAAUS,GA4OhB,SAASqe,EAAYvU,EAAGwU,GACpB,IAAIC,EAAUD,EAAQ/d,OACtB,GAAK+d,EAAQE,aAWb,GAAIF,EAAQzT,QAAS,CACjBf,EAAE2U,iBAEEH,EAAQ3e,QAAQ+e,aAChBJ,EAAQ3e,QAAQ+e,eAAeC,kBACxBL,EAAQ3e,QAAQoL,SAAS6T,WAChCN,EAAQ3e,QAAQoL,SAAS6T,UAAU1T,QAGvC,IAAI4N,EAAa9Y,EAAe8Y,SAAShP,GACrC+U,EAAa/F,EAAS7O,MAAQqU,EAAQ/X,IAAIkT,QAC1CqF,EAAahG,EAAS3O,MAAQmU,EAAQ/X,IAAImT,QAG1CmF,EAAa,IACbA,EAAa,GAIbC,EAAY,IACZA,EAAY,GAIZA,EAAY,GAAKR,EAAQS,kBACzBD,EAAYR,EAAQS,gBAAkB,IAItCF,EAAa,GAAKP,EAAQU,iBAC1BH,EAAaP,EAAQU,eAAiB,IAG1CV,EAAQzT,QAAQd,IACZ,CACIC,KAAQ6U,EAAaN,EAAQ1a,WAAWY,WACpC6Z,EAAQW,WAAa,GACrB,GACA,GACA,KACJ/U,IAAQ4U,EAAY,OAIxBP,EAAQtV,eACRsV,EAAQ1U,kBAAkBC,GAG9B,IAAIoV,EAAgBC,OAAO7F,aAAegF,EAAQ3e,QAAQoL,SAASiK,gBAAgBI,UAC/EgK,EAAgBF,GAAcC,OAAOE,aAAef,EAAQ3e,QAAQoL,SAASmK,cAAgBoJ,EAAQ3e,QAAQoL,SAASmK,cAY1H,GAVIkK,EAAgBtG,EAAS3O,OAASiV,GAAiBd,EAAQS,iBAC3DI,OAAOG,SAAS,EAAG,IAGnBJ,EAAapG,EAAS3O,OACtBgV,OAAOG,SAAS,GAAI,IAGxBtf,EAAe0a,cAAc5Q,EAAGwU,EAAQ/X,IAAK+X,EAAQ3D,aAEjD2D,EAAQ3D,YAGR,YAFA2D,EAAQ3D,aAAc,GAM1B,IAGI9B,EACA0G,EACAC,EACAC,EAIAC,EACAC,EAEAC,EACAC,EACA3X,EAMA4X,EArBAC,EAAajH,EAAS7O,MAAQqU,EAAQ3e,QAAQoL,SAASoK,KAAKE,WAC5D2K,EAAalH,EAAS3O,OAASgV,OAAO7F,aAAegF,EAAQ3e,QAAQoL,SAASiK,gBAAgBI,WAO9F6K,GAAa,EACbC,GAAa,EAObC,EAAa7B,EAAQzV,SACrBT,EAAa+X,EAAM9X,KACnB+X,EAAaD,EAAMne,KACnBqe,EAAaF,EAAMjH,KACnBoH,EAAaH,EAAMpY,OAEnBwY,EAjVZ,SAAwBzW,EAAGwU,GACvB,GAAIA,EAAQvX,SAAU,CAClB,IAAIyZ,EAAUxgB,EAAemZ,OAAOmF,EAAQvX,UAC5C,GAAIyZ,EAAQtW,KAAOJ,EAAEK,OAASL,EAAEK,OAASqW,EAAQtW,IAAMsW,EAAQpV,QAC3DoV,EAAQxW,MAAQF,EAAEG,OAASH,EAAEG,OAASuW,EAAQxW,KAAOwW,EAAQ1L,MAE7D,OAAO,EAIf,OAAO,EAuUc2L,CAAe3W,EAAGwU,GAEnC,IAAKiC,EAAU,CAmBX,GAhBAjC,EAAQ3e,QAAQoL,SAAS2V,iBAAiBX,EAASC,GAEnDnH,EAAY1X,QAAQ8B,QAAQqb,EAAQ3e,QAAQoL,SAAS2V,iBAAiBX,EAASC,IAE1EhgB,EAAeob,mBAAmBvC,KACnCA,EAAY7Y,EAAeqb,cAAcxC,EAAW7Y,EAAeob,qBAGnEpb,EAAeib,cAAcpC,GAC7B0G,EAAc1G,EAAUvY,WAAW,eAAeF,MAC3CJ,EAAekb,eAAerC,GACrC0G,EAAc1G,EAAUvY,WAAW,gBAAgBF,MAC5CJ,EAAemb,oBAAoBtC,KAC1C0G,EAAc1G,EAAUvY,WAAW,qBAAqBF,QAGvDmf,IAAgBA,EAAY1b,aAAe0b,EAAY1b,WAAWkB,YAEnE,OAsBJ,GAnBA+a,EAAa,WAgBT,OAfAQ,EAAYf,EAAY9T,eACxBoU,EAAYM,EAAMpY,OAEdoY,EAAMpY,SAAWuY,IAEjBT,EAAQtU,YACRsU,EAAQvV,WAAc,EACtBgW,EAAUhW,WAAY,EAEtB6V,EAAMpY,OAAauY,EACnBhC,EAAQvX,SAAWuZ,EAAU1V,UAAU2U,EAAY/e,SAAU8d,EAAQzT,SAGrE8U,IADAE,OAAY7Y,KAGT,GAGP7F,QAAQiB,WAAWmd,EAAY/I,eAE/B,GADA+I,EAAcA,EAAY/I,gBACrBsJ,IACD,WAED,CACH,GAA0B,iBAAtBP,EAAYxe,OAAkD,YAAtBwe,EAAYxe,MAapD,OAZA,IAAIwe,EAAYzd,WASZ,OARA,GAAsC,IAAlCyd,EAAYzd,WAAWW,OAAc,CACrC,IAAKqd,IACD,OAGJJ,GAAU,IAgB9B,IALIpB,EAAQ/X,IAAI4T,QAAUwF,GAAaY,KACnCL,GAAc,EACdX,EAAcY,EAAM/f,QAGnBmf,EAAY/e,WAAa+e,EAC1B,OAGJ,GAAIG,EACAtX,EAAMlG,YAAS8E,EAGfqZ,OAFAjY,EAAM7B,IAAS,QAKf,GAAI2Z,EAAY,CAEZ,GADArH,EAAY0G,EAAY/e,SACpBW,QAAQkD,kBAAkBwU,GAC1B,OAIJ,GAFA4G,EAAezf,EAAemZ,OAAON,GAEjC0G,EAAYtY,aAAesY,EAAYzU,QACvC0U,EAAe1G,EAAS7O,MAAQwV,EAAazV,KAAOhK,EAAe8U,MAAM+D,GAAa,OAEtF,GAAI0G,EAAYzU,QACZ0U,EAAe1G,EAAS3O,MAAQsV,EAAavV,IAAMlK,EAAeoL,OAAOyN,GAAa,MACnF,CACH,IAAI8H,EAAU3gB,EAAeoL,OAAOyN,GAMpC,GAJI0G,EAAYvc,qBACZ2d,IAAY3gB,EAAeoL,OAAOmU,EAAYvc,qBAG9C8V,EAAS3O,MAAQsV,EAAavV,IAAMyW,EACpC,OAGJnB,EAAe1G,EAAS3O,MAAQsV,EAAavV,IAAMyW,EAAU,EAIrE,IAAKxf,QAAQiB,WAAWmd,EAAYhJ,SAChC,OAMJ,GAHAsJ,EAAUN,EAAYhJ,UACtBrO,EAAUqX,EAAY7U,QAAQmV,EAAQpV,iBAElC+U,EAAc,CACd,IAAIoB,EAAQrB,EAAYhV,eAAesV,GAEvCzX,EAAMlG,OAASgG,EACfE,EAAM7B,IAASpF,QAAQiC,UAAUwd,GAASA,EAAM3a,UAAY,EAAI,EAEhEoa,EAAQO,OAEJf,EAAQ9b,cAAkD,IAAhC8b,EAAQrd,aAAaC,QAAgBod,EAAQpO,iBAAmB2O,EAAM3V,iBAMhGrC,EAAMlG,OAASgG,EACfE,EAAM7B,IAASsZ,EAAQ5Z,UAAY,EAEnCoa,EAAQR,IARRzX,EAAMlG,OAAS2d,EAGfQ,OAFAjY,EAAM7B,IAAS,QAUpB,CAEH,KAAI+X,EAAQ/X,IAAI4T,OAASmE,EAAQ/X,IAAIiU,SAAW8F,EAAUO,YAwDtD,OArDA,IAFAvC,EAAQ/X,IAAIiU,QAAU,GAElB8D,EAAQ/X,IAAI0T,MAAW,CAEvB,KADA/R,EAAUmY,GACI,CACV,KAAqB,GAAjBjY,EAAM7B,IAAM,GAGZ,OAFA2B,EAAUE,EAAMlG,OAAOM,aAAa4F,EAAM7B,IAAM,GAUxD,GAJI4Z,EAAMrY,OAASqY,EAAMpY,QAAUG,IAAYkY,GAAS7B,EAAQpX,cAC5De,EAAUoY,EAAU/V,eAAerC,KAGnCA,IAAWA,EAAQ7B,YAanB,OAZA,IAAI/D,EAAO4F,EAAQ1F,aAAaC,OAEhC2F,EAAMlG,OAASgG,EAIXmY,EADO,GAFXjY,EAAM7B,IAASjE,GAGH4F,EAAQ1F,aAAaF,EAAO,QAE5B0E,MAMb,CAAA,KAAIsX,EAAQ/X,IAAI0T,MAAQ,GAoB3B,OAlBA,KADA4F,EAAUzX,EAAMlG,WAEqB,IAAhC2d,EAAQrd,aAAaC,QAClBod,EAAQrd,aAAaC,OAAS,EAAI2F,EAAM7B,KACxC4Z,EAAMrY,OAASqY,EAAMpY,QACrB8X,EAAQpO,iBAAmB2O,EAAM3V,iBACjCoV,EAAQrd,aAAaC,OAAS,IAAM2d,EAAMna,WAAasY,EAAQpX,aAUnE,OARAe,EAAUoY,EAAU5V,QAAQmV,EAAQpV,iBAEpCrC,EAAMlG,OAASgG,EACfE,EAAM7B,IAASsZ,EAAQ5Z,UAAY,EAEnCoa,EAAQR,GAexBM,EAAMrY,OAASqY,EAAMpY,QACrBK,EAAMlG,QACNke,EAAM3V,kBAAoBrC,EAAMlG,OAAOuP,gBACvC2O,EAAMna,YAAcmC,EAAM7B,MAE1B0Z,GAAY,GAGZK,EAAUzc,WAAWU,OAAO4b,EAAO/X,EAAO6X,KAC1CE,EAAM9X,KAAUD,EAChB+X,EAAMjH,KAAUmH,EAChBF,EAAMtY,QAAUoY,GAChBE,EAAM/f,MAAUmf,GAEAzU,SACZ9K,EAAe+a,cACXuF,EACAhC,EAAQvX,SACR5F,QAAQkD,kBAAkB+D,EAAMlG,QAAU,EAAIkG,EAAMlG,OAAOwP,UAAY,GAGvE2O,GACAnY,GAAWE,EAAMlG,OAASkG,EAAMlG,OAAOM,kBAAewE,IAAcmZ,EAAMpY,OAAOlG,SAE7Ewe,EAAMpa,UAAYiC,EAAQzF,OAAS,GAEnC4d,EAASnY,EAAQmY,EAAMpa,UAAY,IACnC2Z,EAASO,EAAMpY,OAAOnB,SAASyZ,IACxB7f,SAAS,GAAG6K,WAAWC,aAC1BgT,EAAQvX,SAAS,GACjB6Y,EAAOpf,SAAS,MAGpBqf,EAAUM,EAAMpY,OAAOrF,kBAAkB2d,IACzCT,EAAUO,EAAMpY,OAAOnB,SAASiZ,IACzBrf,SAASsgB,MAAMxC,EAAQvX,aAGlC6Y,EAASO,EAAMpY,OAAOnB,SAASwB,EAAMlG,WAE7BkG,EAAMlG,OACN0d,EAAOpf,SAASsgB,MAAMxC,EAAQvX,UAG9B6Y,EAAO5c,mBAAmB+d,QAAQzC,EAAQvX,aAKtD6Y,EAASO,EAAMpY,OAAOnB,SAASyZ,GAASjY,EAAMlG,QAC1Cme,EACAT,EAAOpf,SAASsgB,MAAMxC,EAAQvX,UAE9B6Y,EAAO5c,mBAAmB+d,QAAQzC,EAAQvX,WAIlDuZ,EAAU9U,YAEV+S,EAAQ7S,WAAW,WACf6S,EAAQ1a,WAAW8E,SAASwX,YA1W/B7B,EAAQ0C,eACT1C,EAAQE,aAAc,EACtBD,EAAQ7S,WAAW,WACf6S,EAAQ1a,WAAW4E,UAAU6V,EAAQzV,aA8WrD,SAASoY,EAAWnX,EAAGwU,GAEnB,GADAxU,EAAE2U,iBACEH,EAAQzT,QAAS,CACjB,IAAI2D,GAAW,EACX+P,EAAWD,EAAQ/d,OACnBqf,EAAWrB,EAAQ3X,SAAS0X,EAAQzV,SAAS7G,MAC7C0Q,EAAWkN,EAAOpf,SAEtB+d,EAAQ7S,WAAW,WACf8C,EAAU+P,EAAQ1a,WAAWqB,WAAWoZ,EAAQzV,YAIhD+W,EAAO9U,QACPyT,EAAQxc,oBACJuc,EAAQzV,SAAS7G,KAAM,SAAUmG,EAAOD,GAQpC,OAPA0X,EAAWrB,EAAQ3X,SAASuB,GAC5BuK,EAAWkN,GAAUA,EAAOpf,SACxBof,GAAUlN,KAAcxK,GAAWC,EAAM9B,aAAe6B,EAAQnE,eAC5Dwa,EAAQrd,OAAOkI,QACfsJ,EAAS9I,YAAY2U,EAAQrd,OAAOkI,SAGf,IAAtBjB,EAAM9B,cAAgD,IAAvB8B,EAAMpE,mBAEhDiD,GACA,GAGAuX,EAAQrd,OAAOkI,QACfsJ,EAAS9I,YAAY2U,EAAQrd,OAAOkI,QAI5CkV,EAAQzT,QAAQjF,SAChB0Y,EAAQzT,aAAU7D,EAEduX,EAAQtV,eACRsV,EAAQrV,aAGRqV,EAAQ2C,QACR3C,EAAQ7S,WAAW,WACf,IAAIyV,EAAU5C,EAAQ1a,WAAWmE,QAC7BsW,EAAQzV,SACR2F,GAGJ+P,EAAQ1a,WAAW6D,SAAS4W,EAAQzV,SAAUsY,GAC9CC,OAGJC,EAAY/C,GAEZC,EAAQ7S,WAAW,WACf6S,EAAQ1a,WAAW6D,SAAS4W,EAAQzV,UAAU,GAC9CuY,OAMZ,SAASA,IACL9C,EAAQzV,SAASd,OAAOwD,YACxB+S,EAAQzV,SAASd,OAAOuC,WAAY,EAEpCgU,EAAQzV,cAAW7B,EACnBuX,EAAQ2C,SAAW,EACnB3C,EAAQ3V,iBAAY5B,GAGxB7F,QAAQ8B,QAAQqb,EAAQ1e,WAAW0hB,OAAO,WAAYhD,EAAQiD,cAC9DpgB,QAAQ8B,QAAQqb,EAAQ1e,WAAW0hB,OAAO,cAAehD,EAAQiD,cACjEpgB,QAAQ8B,QAAQqb,EAAQ1e,WAAW0hB,OAAO,YAAahD,EAAQkD,eAC/DrgB,QAAQ8B,QAAQqb,EAAQ1e,WAAW0hB,OAAO,UAAWhD,EAAQiD,cAC7DpgB,QAAQ8B,QAAQqb,EAAQ1e,WAAW0hB,OAAO,YAAahD,EAAQkD,eAC/DrgB,QAAQ8B,QAAQqb,EAAQ3e,QAAQoL,SAASoK,MAAMmM,OAAO,aAAchD,EAAQmD,iBAGhF,SAASC,EAAkB5X,EAAGwU,GACtBA,EAAQ/d,OAAOsD,WAAWmB,aAjqBlC,SAAsB8E,EAAGwU,GACrB,IAAKA,EAAQqD,UAA0B,IAAb7X,EAAE8X,QAA4B,IAAZ9X,EAAE+X,UAK1C/X,EAAEgY,gBAAkBhY,EAAEmP,eAAiBnP,EAAEmP,cAAc6I,gBAA3D,CAKA,IACIC,EADAC,EAAW7gB,QAAQ8B,QAAQ6G,EAAE/B,QAYjC,GATI/H,EAAemb,oBAAoB6G,GACnCD,EAAaC,EAAS1hB,WAAW,qBAAqBF,OAEtD4hB,EAAWhiB,EAAeqb,cAAc2G,EAAUhiB,EAAemb,wBAE7D4G,EAAaC,EAAS1hB,WAAW,qBAAqBF,OAIzD2hB,GAAeA,EAAWhhB,OAQN,sBAArBghB,EAAWhhB,MAAf,CAIA,IACIkhB,EADAC,EAAkBF,EAASjN,KAAK,WAAWoN,cAE3C5D,EAAkBD,EAAQ/d,OAE9B,GAAwB,UAApB2hB,GACuB,aAApBA,GACoB,WAApBA,GACoB,WAApBA,EAHP,CAQA,KAAOF,GAAYA,EAAS,IAAMA,EAAS,KAAO1D,EAAQrb,SAAS,CAC/D,GAAIjD,EAAe4Y,OAAOoJ,GACtB,OAEJA,EAAWA,EAAS9f,SAexB,GAZA4H,EAAEgY,gBAAiB,EAEfhY,EAAEmP,gBACFnP,EAAEmP,cAAc6I,gBAAiB,GAGrChY,EAAE2U,iBAEFwD,EAAYF,EAAWvL,eAEvB8H,EAAQzV,SAAW7I,EAAe6I,SAASoZ,GAEtC1D,EAAQ1a,WAAW4D,WAAWwa,EAAW3D,EAAQzV,UAAtD,CAIAyV,EAAQ3D,aAAc,EAEtB4D,EAAQ3V,YAAY0V,EAAQzV,UAE5B,IAAIiQ,EAAW9Y,EAAe8Y,SAAShP,GAEvCwU,EAAQ/X,IAAMvG,EAAewZ,gBAAgBV,EAAUmJ,EAAUzhB,UAE7DyhB,EAAUnX,QACVwT,EAAQzT,QAAU1J,QAAQ8B,QAAQqb,EAAQ3e,QAAQoL,SAASC,cAAc,UACpE7B,SAASoV,EAAQrd,OAAO2B,MACxBsG,SAASoV,EAAQrd,OAAO4G,MACxBqB,SAASoV,EAAQ1d,aAEtByd,EAAQzT,QAAU1J,QAAQ8B,QAAQqb,EAAQ3e,QAAQoL,SAASC,cAAc,OACpE7B,SAASoV,EAAQrd,OAAO4G,MACxBqB,SAAS,kBACTA,SAASoV,EAAQ1d,aAG1Byd,EAAQzT,QAAQd,IACZ,CACI+K,MAAW9U,EAAe8U,MAAMmN,EAAUzhB,UAAY,KACtD4J,UAAW,OAInBkU,EAAQW,WAAa,EACrB,IAGIvZ,EAGA0c,EACAC,EAPAC,EAAiBtiB,EAAe8U,MAAMmN,EAAUzhB,UAChDof,EAAiBqC,EACjBvP,EAAiBkN,EAAOpf,SAExB+hB,IAAmBhE,EAAQjX,gBAC3Bkb,GAAiB,EAIjB5C,EAAO9U,SACPwT,EAAQW,WAAaX,EAAQzV,SAAS7G,KAAK0P,UAAY,EAEvD0Q,EAASjhB,QAAQ8B,QAAQ8H,SAASC,cAAc,UAChDqX,EAASlhB,QAAQ8B,QAAQ8H,SAAS0X,0BAElClE,EAAQxc,oBACJuc,EAAQzV,SAAS7G,KAAM,SAAUmG,EAAOD,GA6BpC,OA5BA0X,EAAWrB,EAAQ3X,SAASuB,GAC5BuK,EAAWkN,GAAUA,EAAOpf,SACxBof,GAAUlN,IACL8P,IACD9c,EAASgN,EAASjN,QAElBzF,EAAe+a,cACXwD,EACA7Y,EACAyC,EAAMuJ,UAAY4M,EAAQW,WAC1B,gBAGJoD,EAAM1Y,OAAOjE,GAGT6c,IACAC,GAAU,GAIVjE,EAAQpX,aAAeoX,EAAQrd,OAAOkI,UACpClB,GAAWC,EAAM9B,aAAe6B,EAAQ7B,aAAe6B,EAAQnE,eACjE2O,EAASvJ,SAASoV,EAAQrd,OAAOkI,UAKtCoZ,IAAiC,IAAtBra,EAAM9B,cAAgD,IAAvB8B,EAAMpE,mBAG3DiD,GACCub,GAGLH,EAAOzY,OAAO0Y,GAEd/D,EAAQzT,QAAQlB,OAAOyY,KAGvB1c,EAASgN,EAASjN,QACd8c,GACA7c,EAAO,GAAGxC,cAAc,oBAAoB0C,SAIhD0Y,EAAQzT,QAAQlB,OAAOjE,GACnB6Y,EAAQpX,aAAeoX,EAAQrd,OAAOkI,QACtCsJ,EAASvJ,SAASoV,EAAQrd,OAAOkI,SAIzCkV,EAAQzT,QAAQd,IACZ,CACIC,KAAQ8O,EAAS7O,MAAQqU,EAAQ/X,IAAIkT,QAAU8E,EAAQ1a,WAAWY,WAC9D6Z,EAAQW,WAAa,GACrB,GACA,GACA,KACJ/U,IAAQ4O,EAAS3O,MAAQmU,EAAQ/X,IAAImT,QAAU,OAIvD4E,EAAQ1e,UAAU8J,KAAK,QAAQC,OAAO2U,EAAQzT,SAC1C0T,EAAQ1a,WAAWkB,cACnBuZ,EAAQvX,SAAWwX,EAAQ3T,UAAUqX,EAAUzhB,SAAU8d,EAAQzT,SAE7DoX,EAAUnX,SACV9K,EAAe+a,cAAcwD,EAASD,EAAQvX,SAAUuX,EAAQzV,SAAS7G,KAAK0P,WAGlF4M,EAAQvX,SAASgD,IAAI,QAASuY,IAGlC/D,EAAQ/S,YACR+S,EAAQjU,WAAY,EAEhBiU,EAAQtV,gBACRsV,EAAQlV,gBACRkV,EAAQ1U,kBAAkBC,IAG9B3I,QAAQ8B,QAAQqb,EAAQ1e,WAAW8iB,KAAK,WAAYpE,EAAQiD,cAC5DpgB,QAAQ8B,QAAQqb,EAAQ1e,WAAW8iB,KAAK,cAAepE,EAAQiD,cAC/DpgB,QAAQ8B,QAAQqb,EAAQ1e,WAAW8iB,KAAK,YAAapE,EAAQkD,eAC7DrgB,QAAQ8B,QAAQqb,EAAQ1e,WAAW8iB,KAAK,UAAWpE,EAAQiD,cAC3DpgB,QAAQ8B,QAAQqb,EAAQ1e,WAAW8iB,KAAK,YAAapE,EAAQkD,eAC7DrgB,QAAQ8B,QAAQqb,EAAQ1e,WAAW8iB,KAAK,aAAcpE,EAAQmD,iBAE9DnD,EAAQS,gBAAkBzZ,KAAKqd,IAC3BrE,EAAQnJ,KAAKyN,aACbtE,EAAQnJ,KAAK0N,aACbvE,EAAQ3L,KAAKuC,aACboJ,EAAQ3L,KAAKiQ,aACbtE,EAAQ3L,KAAKkQ,cAGjBvE,EAAQU,eAAiB1Z,KAAKqd,IAC1BrE,EAAQnJ,KAAK2N,YACbxE,EAAQnJ,KAAK4N,YACbzE,EAAQ3L,KAAKsC,YACbqJ,EAAQ3L,KAAKmQ,YACbxE,EAAQ3L,KAAKoQ,iBAycbC,CAAalZ,EAAGwU,GAIxB,SAAS+C,EAAY/C,GACjBA,EAAQrb,QAAQyf,KAAK,uBAAwB,SAAU5Y,GACnDwU,EAAQ0C,cAAe,EACvB1C,EAAQE,aAAe,EAEvBkD,EAAkB5X,EAAGwU,GAErBA,EAAQ2E,UAAY1jB,EAChB,WACI+e,EAAQ0C,cAAe,GAE3B1C,EAAQ/d,OAAO2G,aAIvBoX,EAAQrb,QAAQyf,KAAK,+BAAgC,WACjDnjB,EAASiW,OAAO8I,EAAQ2E,aAoKhC,OArEA,SAAgB7iB,EAAO6C,EAAStD,EAASC,GAErC,IAAI0e,EAAiB,CACbqD,SAAiB,iBAAkBxC,OACnCxE,iBAAiB3T,EACjB6B,cAAiB7B,EACjBT,SAAiBS,EACjBD,cAAiBC,EACjB6D,aAAiB7D,EACjBga,cAAiB,EACjBxC,aAAiB,EACjByE,eAAiBjc,EACjBmO,KAAiBpK,SAASoK,KAC1BxC,KAAiB5H,SAASiK,gBAC1B+J,qBAAiB/X,EACjBgY,oBAAiBhY,EACjBiY,gBAAiBjY,EACjBzG,OAAiBH,EACjBT,QAAiBA,EACjBC,UAAiBA,EACjBqD,QAAiBA,EACjBigB,SAAiB,WACb7B,EAAY/C,IAEhB6E,QAAiB,SAAUrZ,GACvBmX,EAAWnX,EAAGwU,IAElBkD,cAAiB,SAAU1X,GACvBuU,EAAYvU,EAAGwU,IAEnBiD,aAAiB,SAAUzX,GACvB1J,EAAM8gB,SAAU,EAChBD,EAAWnX,EAAGwU,IAElBmD,gBAAiB,SAAU3X,GACvBmX,EAAWnX,EAAGwU,KAGtB8E,EAAiB,SAAUtZ,GACvB,OAlIZ,SAA2BA,EAAGwU,GAC1B,IAAIC,EAAUD,EAAQ/d,OACtB,GAAkB,KAAduJ,EAAEuZ,QACE9E,EAAQtV,eACRsV,EAAQrV,aAGZqV,EAAQ2C,SAAU,EAClBD,EAAWnX,EAAGwU,QAEd,GAAIC,EAAQlX,eAAiByC,EAAEwZ,SAAU,CAMrC,GALA/E,EAAQzV,YAAW,GACfyV,EAAQtV,eACRsV,EAAQlV,iBAGPiV,EAAQzV,SACT,OAGJ,IAAI+W,EAAWrB,EAAQ3X,SAAS0X,EAAQzV,SAAS7G,MAC7C0Q,EAAWkN,EAAOpf,SAElBof,EAAO9U,QACPyT,EAAQxc,oBACJuc,EAAQzV,SAAS7G,KACjB,SAAUmG,EAAOD,GASb,OARA0X,EAAWrB,EAAQ3X,SAASuB,GAC5BuK,EAAWkN,GAAUA,EAAOpf,SACxBof,GAAUlN,KAAcxK,GAAWC,EAAM9B,aAAe6B,EAAQnE,eAC5Dwa,EAAQrd,OAAOkI,QACfsJ,EAASvJ,SAASoV,EAAQrd,OAAOkI,SAIZ,IAAtBjB,EAAM9B,cAAgD,IAAvB8B,EAAMpE,mBAGhDiD,GACA,GAGAuX,EAAQrd,OAAOkI,QACfsJ,EAASvJ,SAASoV,EAAQrd,OAAOkI,SAuFlCma,CAAkBzZ,EAAGwU,IAEhCkF,EAAiB,SAAU1Z,GACvB,OAnFZ,SAAyBA,EAAGwU,GACxB,IAAIC,EAAUD,EAAQ/d,OAEtB,GAAIge,EAAQlX,gBAAkByC,EAAEwZ,SAAU,CAOtC,GANA/E,EAAQzV,YAAW,GAEfyV,EAAQtV,eACRsV,EAAQlV,iBAGPiV,EAAQzV,SACT,OAGJ,IAAI+W,EAAWrB,EAAQ3X,SAAS0X,EAAQzV,SAAS7G,MAC7C0Q,EAAWkN,EAAOpf,SAElBof,EAAO9U,QACPyT,EAAQxc,oBACJuc,EAAQzV,SAAS7G,KACjB,SAAUmG,EAAOD,GAQb,OAPA0X,EAAWrB,EAAQ3X,SAASuB,GAC5BuK,EAAWkN,GAAUA,EAAOpf,SACxBof,GAAUlN,KAAcxK,GAAWC,EAAM9B,aAAe6B,EAAQnE,eAC5Dwa,EAAQrd,OAAOkI,QACfsJ,EAAS9I,YAAY2U,EAAQrd,OAAOkI,SAGf,IAAtBjB,EAAM9B,cAAgD,IAAvB8B,EAAMpE,mBAEhDiD,GACA,GAGAuX,EAAQrd,OAAOkI,QACfsJ,EAAS9I,YAAY2U,EAAQrd,OAAOkI,SAgDjCqa,CAAgB3Z,EAAGwU,IAGlCle,EAAM+iB,QAAU,SAAUrZ,GACtBwU,EAAQ6E,QAAQrZ,IAGpBwU,EAAQ4E,WAER/hB,QAAQ8B,QAAQtD,EAAQoL,SAASoK,MAAMuN,KAAK,UAAWU,GACvDjiB,QAAQ8B,QAAQtD,EAAQoL,SAASoK,MAAMuN,KAAK,QAASc,GAGrDpjB,EAAMkX,IAAI,WAAY,WAClBnW,QAAQ8B,QAAQtD,EAAQoL,SAASoK,MAAMmM,OAAO,UAAW8B,GACzDjiB,QAAQ8B,QAAQtD,EAAQoL,SAASoK,MAAMmM,OAAO,QAASkC,GAEnDpjB,EAAMmH,WACNnH,EAAMmH,UAAU3B,SAGhBxF,EAAM2G,UACN3G,EAAM2G,SAASnB,eASvCzE,QAAQsU,OAAO,eACVgC,QAAQ,kBAAmB,WAExB,SAASiM,EAAc1hB,GACnBA,EAAK+B,cAAe,EAQxB,SAAS4f,EAAY3hB,GACjBA,EAAK+B,cAAe,EAinBxB,OA9mBA,SAAgB3D,GA2mBZ,MApmBY,CACR0C,mBAAqBkE,EACrBvD,eAAqBuD,EAIrBjF,oBAAqB3B,EAAM2B,oBAS3ByB,YAAa,SAAUxB,GACnB,IAAIa,EAAOzC,EAAMyC,KAEb+gB,EAAY/gB,EAAKghB,gBAcrB,MAZoB,iBAAT7hB,GAAqBA,IAAS4hB,IACrC5hB,EAAKwD,cAAe,EAEpB3C,EAAKC,cAAgBd,EAErBa,EAAKihB,mBAAmB9hB,GAEM,mBAAnBa,EAAKY,WACZZ,EAAKY,UAAUzB,IAIhBA,GAQX6hB,cAAe,WACX,IAEIhE,EAFAhd,EAAOzC,EAAMyC,KAcjB,MAVkC,iBAAvBA,EAAKC,gBACZD,EAAKC,cAAc0C,kBAAewB,SAE3BnE,EAAKC,cAAc0C,aAE1Bqa,EAAUhd,EAAKC,cAEfD,EAAKC,mBAAgBkE,GAGlB6Y,GAUXkE,WAAY,SAAU/hB,GAClB,IAAIa,EAAOzC,EAAMyC,KAIjB,IAFAb,EAAOA,GAAQa,EAAKC,qBAEiBkE,IAAzBhF,EAAKyI,gBACb,OAAOrK,EAAM0B,WAAWE,EAAKyI,kBAarCuZ,kBAAmB,SAAUhiB,EAAMC,GAC/B,IAAIY,EAAOzC,EAAMyC,KAEbqF,EAAUrF,EAAKkhB,WAAW/hB,GAC9B,OAAIkG,IACIjG,EAAGiG,IAIArF,EAAKmhB,kBAAkB9b,EAASjG,IAW/C6hB,mBAAoB,SAAU9hB,GAC1B,IAAIa,EAAOzC,EAAMyC,KAIG,iBAFpBb,EAAOA,GAAQa,EAAKC,gBAGhBD,EAAKmhB,kBAAkBhiB,EAAM2hB,IAUrCM,qBAAsB,SAAUjiB,GAC5B,IAAIa,EAAOzC,EAAMyC,KAGG,iBADpBb,EAAOA,GAAQa,EAAKC,gBAEhBD,EAAKmhB,kBAAkBhiB,EAAM0hB,IASrCxd,YAAa,WACT,OAAO9F,EAAM8F,eAajBge,SAAU,SAAUhiB,EAAQiiB,EAAUxZ,EAAOyZ,GAuBzC,MAtBsB,iBAAXliB,GAC4B,iBAAxBA,EAAOM,eACdN,EAAOM,aAAe,IAGb,GAATmI,EACAzI,EAAOM,aAAawD,OAAO2E,EAAO,EAAGwZ,GAErCjiB,EAAOM,aAAagE,KAAK2d,GAGzBC,IACAliB,EAAO6B,cAAe,IAGb,GAAT4G,EACAvK,EAAMyB,SAASmE,OAAO2E,EAAO,EAAGwZ,GAEhC/jB,EAAMyB,SAAS2E,KAAK2d,GAIrBA,GAUXE,cAAe,SAAUF,GAOrB,MANwB,iBAAbA,GACI/jB,EAAMyC,KAEZqhB,cAASld,EAAWmd,GAGtBA,GAMXG,WAAY,WAIR,IAHA,IAAIzhB,EAAOzC,EAAMyC,KAEbyJ,EAAMlM,EAAMyB,SAASY,OAChB4J,EAAI,EAAGA,EAAIC,EAAKD,IACrBxJ,EAAKd,oBAAoB3B,EAAMyB,SAASwK,GAAIsX,IAOpDY,aAAc,WAIV,IAHA,IAAI1hB,EAAOzC,EAAMyC,KAEbyJ,EAAMlM,EAAMyB,SAASY,OAChB4J,EAAI,EAAGA,EAAIC,EAAKD,IACrBxJ,EAAKd,oBAAoB3B,EAAMyB,SAASwK,GAAIqX,IASpDc,YAAa,SAAUxiB,GACnB,IAAIa,EAAOzC,EAAMyC,KAIG,iBAFpBb,EAAOA,GAAQa,EAAKC,uBAKakE,IAAzBhF,EAAKyI,gBACK5H,EAAKkhB,WAAW/hB,GAAMQ,aAEtBpC,EAAMyB,UAGZmE,OAAOhE,EAAKiE,UAAW,GAE/BpD,EAAKqD,cAEDrD,EAAKC,gBAAkBd,IACvBa,EAAKC,mBAAgBkE,KAYjCyd,YAAa,SAAUziB,GACnB,IAAIa,EAAOzC,EAAMyC,KAIjB,GAAoB,iBAFpBb,EAAOA,GAAQa,EAAKC,eAKhB,OAFAd,EAAK+B,cAAe,EAEb/B,GAWf0iB,cAAe,SAAU1iB,GACrB,IAAIa,EAAOzC,EAAMyC,KAIjB,GAAoB,iBAFpBb,EAAOA,GAAQa,EAAKC,eAKhB,OAFAd,EAAK+B,cAAe,EAEb/B,GASf2iB,kBAAmB,WAGf,OAFWvkB,EAAMyC,KAELC,eAQhB8hB,eAAgB,WACZ,IAEIC,EAFOzkB,EAAMyC,KAEEC,cAMnB,QAJgBkE,IAAZ6d,IACAA,EAAUzkB,EAAMyB,UAGG,iBAAZgjB,GAGG,EAFAA,EAAQpiB,OAGd,OAAOoiB,EAAQ,IAY3BC,aAAc,SAAU9iB,GACpB,IAAIa,EAAOzC,EAAMyC,KAEjB,YAAamE,IAAThF,QAA6CgF,IAAvBnE,EAAKC,cACpBD,EAAKhB,SAKI,iBAFpBG,EAAOA,GAAQa,EAAKC,qBAEkCkE,IAAtBhF,EAAKQ,aAC1BR,EAAKQ,kBADhB,GAYJuiB,aAAc,SAAU/iB,GACpB,IAAIa,EAAOzC,EAAMyC,KAGjB,GAAoB,iBADpBb,EAAOA,GAAQa,EAAKC,eACU,CAC1B,IAAIoF,EAAUrF,EAAKkhB,WAAW/hB,GAS9B,OANIkG,EACUA,EAAQ1F,aAERpC,EAAMyB,WAc5BmjB,iBAAkB,SAAUhjB,GACxB,IAAIa,EAAOzC,EAAMyC,KAGjB,GAAoB,iBADpBb,EAAOA,GAAQa,EAAKC,eACU,CAC1B,IAAI+c,EAAUhd,EAAKkiB,aAAa/iB,GAE5BY,EAAIid,EAAQpd,OAEhB,GAAIT,EAAKiE,UAAYrD,EACjB,OAAOid,EAAQ7d,EAAKiE,UAAY,KAY5Cgf,iBAAkB,SAAUjjB,GACxB,IAAIa,EAAOzC,EAAMyC,KAEjBb,EAAOA,GAAQa,EAAKC,cAEpB,IAAI+c,EAAUhd,EAAKkiB,aAAa/iB,GAEhC,GAAqB,EAAjBA,EAAKiE,UACL,OAAO4Z,EAAQ7d,EAAKiE,UAAY,IAWxCif,gBAAiB,SAAUljB,GACvB,IAAIa,EAAOzC,EAAMyC,KAGjB,GAAoB,iBADpBb,EAAOA,GAAQa,EAAKC,eACU,CAC1B,IAAI+c,EAAU7d,EAAKQ,aAEnB,GAAIqd,GAA4B,EAAjBA,EAAQpd,OACnB,OAAOT,EAAKQ,aAAa,KAYrC2iB,kCAAmC,SAAUnjB,GACzC,IAAIa,EAAOzC,EAAMyC,KAEjBb,EAAOA,GAAQa,EAAKC,cAEpB,IAAI+c,EAAUhd,EAAKmiB,iBAAiBhjB,GACpC,GAAI6d,EACA,OAAOA,EAGX,IAAI3X,EAAUrF,EAAKkhB,WAAW/hB,GAC9B,OAAIkG,EACOrF,EAAKsiB,kCAAkCjd,QADlD,GAYJkd,cAAe,SAAUpjB,GACrB,IAAIa,EAAOzC,EAAMyC,KAIjB,GAAoB,iBAFpBb,EAAOA,GAAQa,EAAKC,eAEU,CAC1B,IAAI+c,EAAUhd,EAAKqiB,gBAAgBljB,GAEnC,OAAI6d,GAGOhd,EAAKsiB,kCAAkCnjB,KAY1DqjB,cAAqB,SAAUrjB,GAC3B,IAAIa,EAAOzC,EAAMyC,KAIjB,GAAoB,iBAFpBb,EAAOA,GAAQa,EAAKC,eAEU,CAC1B,IAAI+c,EAAUhd,EAAKoiB,iBAAiBjjB,GAEpC,OAAI6d,EACOhd,EAAKyiB,oBAAoBzF,GAG7Bhd,EAAKkhB,WAAW/hB,KAG/BsjB,oBAAqBllB,EAAMsC,kBAS3B6iB,mBAAoB,SAAUvjB,GAC1B,IAAIa,EAAOzC,EAAMyC,KAIjB,GAAoB,iBAFpBb,EAAOA,GAAQa,EAAKC,eAEU,CAC1B,IAAIoF,EAAUrF,EAAKkhB,WAAW/hB,GAE9B,GAAIkG,EACA,OAAOrF,EAAKW,YAAY0E,KAUpCsd,kBAAmB,WACf,IAAI3iB,EAAOzC,EAAMyC,KAEb4iB,EAAY5iB,EAAK+hB,iBAErB,OAAO/hB,EAAKW,YAAYiiB,IAU5BC,oBAAqB,SAAU1jB,GAC3B,IAAIa,EAAOzC,EAAMyC,KAIjB,GAAoB,iBAFpBb,EAAOA,GAAQa,EAAKC,eAEU,CAC1B,IAAI+c,EAAUhd,EAAKmiB,iBAAiBhjB,GAEpC,GAAI6d,EACA,OAAOhd,EAAKW,YAAYqc,KAYpC8F,oBAAqB,SAAU3jB,GAC3B,IAAIa,EAAOzC,EAAMyC,KAIjB,GAAoB,iBAFpBb,EAAOA,GAAQa,EAAKC,eAEU,CAC1B,IAAI+c,EAAUhd,EAAKoiB,iBAAiBjjB,GAEpC,GAAI6d,EACA,OAAOhd,EAAKW,YAAYqc,KAYpC+F,iBAAkB,SAAU5jB,GACxB,IAAIa,EAAOzC,EAAMyC,KAIjB,GAAoB,iBAFpBb,EAAOA,GAAQa,EAAKC,eAEU,CAC1B,IAAI+c,EAAUhd,EAAKuiB,cAAcpjB,GAEjC,GAAI6d,EACA,OAAOhd,EAAKW,YAAYqc,KAYpCgG,iBAAkB,SAAU7jB,GACxB,IAAIa,EAAOzC,EAAMyC,KAIjB,GAAoB,iBAFpBb,EAAOA,GAAQa,EAAKC,eAEU,CAC1B,IAAI+c,EAAUhd,EAAKwiB,cAAcrjB,GAEjC,GAAI6d,EACA,OAAOhd,EAAKW,YAAYqc,SAYpD1e,QAAQsU,OAAO,gCAAiC,IAAIqQ,IAChD,CAAC,iBAAkB,SAAUjmB,GACzBA,EAAekmB,IACX,gCACA,+6CAiCJlmB,EAAekmB,IACX,0CACA,iEAGJlmB,EAAekmB,IACX,0CACA,wEAzuIZ","file":"ng-tree-dnd.min.js","sourcesContent":["/**\n * The MIT License (MIT)\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to\n * deal in the Software without restriction, including without limitation the\n * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n * sell copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS\n * IN THE SOFTWARE.\n * @preserve\n */\n\n/**\n * Implementing TreeDnD & Event DrapnDrop (allow drag multi tree-table include all type: table, ol, ul)\n * Demo: http://thienhung1989.github.io/angular-tree-dnd\n * Github: https://github.com/thienhung1989/angular-tree-dnd\n * @version 3.0.9\n * @preserve\n * (c) 2015 Nguyuễn Thiện Hùng - <nguyenthienhung1989@gmail.com>\n * @license\n * The MIT License (MIT)\n * \n * Copyright (c) 2015 Nguyễn Thiện Hùng\n * \n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n * \n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n * \n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n * \n */\n(function () {\n    'use strict';\n    angular.isUndefinedOrNull = isUndefinedOrNull;\n\n    angular.isDefined = isDefined;\n    /**\n     * @const $TreeDnDClass\n     */\n    angular.module('ntt.TreeDnD', ['template/TreeDnD/TreeDnD.html'])\n        .constant('$TreeDnDClass', /** @lends $TreeDnDClass# */{\n            tree:   'tree-dnd',\n            empty:  'tree-dnd-empty',\n            hidden: 'tree-dnd-hidden',\n            node:   'tree-dnd-node',\n            nodes:  'tree-dnd-nodes',\n            handle: 'tree-dnd-handle',\n            place:  'tree-dnd-placeholder',\n            drag:   'tree-dnd-drag',\n            status: 'tree-dnd-status',\n            icon:   {\n                '1':  'glyphicon glyphicon-minus',\n                '0':  'glyphicon glyphicon-plus',\n                '-1': 'glyphicon glyphicon-file'\n            }\n        });angular.module('ntt.TreeDnD')\n    .controller('treeDndNodeHandleController', [\n        '$scope',\n        function ($scope) {\n            this.scope = $scope;\n        }\n    ]);\n\nangular.module('ntt.TreeDnD')\n    .controller('treeDndNodeController', [\n        '$scope',\n        function ($scope) {\n            this.scope = $scope;\n        }\n    ]);\n\nangular.module('ntt.TreeDnD')\n    .controller('treeDndNodesController', [\n        '$scope',\n        function ($scope) {\n            this.scope = $scope;\n        }\n    ]);\n\nangular.module('ntt.TreeDnD')\n    .directive('compile', [\n        '$compile',\n        function ($compile) {\n            return {\n                restrict: 'A',\n                link:     function (scope, element, attrs) {\n                    scope.$watch(\n                        attrs.compile,\n                        function (new_val) {\n                            if (new_val) {\n                                if (angular.isFunction(element.empty)) {\n                                    element.empty();\n                                } else {\n                                    element.html('');\n                                }\n\n                                element.append($compile(new_val)(scope));\n                            }\n                        }\n                    );\n                }\n            };\n        }]\n    )\n    .directive('compileReplace', [\n        '$compile',\n        function ($compile) {\n            return {\n                restrict: 'A',\n                link:     function (scope, element, attrs) {\n                    scope.$watch(\n                        attrs.compileReplace,\n                        function (new_val) {\n                            if (new_val) {\n                                element.replaceWith($compile(new_val)(scope));\n                            }\n                        }\n                    );\n                }\n            };\n        }]\n    );\n\nangular.module('ntt.TreeDnD')\r    .directive('treeDndNodeHandle', function () {\r        return {\r            restrict:   'A',\r            scope:      true,\r            controller: 'treeDndNodeHandleController',\r            link:       fnLink\r        };\r\r        function fnLink(scope, element/*, attrs, controller*/) {\r            scope.$type = 'TreeDnDNodeHandle';\r            if (scope.$class.handle) {\r                element.addClass(scope.$class.handle);\r            }\r        }\r    });\n\nangular.module('ntt.TreeDnD')\n    .directive('treeDndNode', [\n        '$TreeDnDViewport',\n        function ($TreeDnDViewport) {\n            return {\n                restrict:   'A',\n                replace:    true,\n                controller: 'treeDndNodeController',\n                link:       fnLink\n            };\n\n            /**\n             * Link\n             *\n             * @param {Object} scope\n             * @param {Object} element\n             * @param {Object} attrs\n             *\n             * @private\n             */\n            function fnLink(scope, element, attrs) {\n\n                scope.$node_class = '';\n\n                if (scope.$class.node) {\n                    element.addClass(scope.$class.node);\n                    scope.$node_class = scope.$class.node;\n                }\n                var enabledDnD = typeof scope.dragEnabled === 'boolean' || typeof scope.dropEnabled === 'boolean',\n                    keyNode    = attrs.treeDndNode,\n                    childsElem;\n\n                $TreeDnDViewport.add(scope, element);\n\n                if (enabledDnD) {\n                    scope.$type = 'TreeDnDNode';\n\n                    scope.getData = function () {\n                        return scope[keyNode];\n                    };\n                }\n\n                scope.$element            = element;\n                scope[keyNode].__inited__ = true;\n\n                scope.getElementChilds = function () {\n                    return angular.element(element[0].querySelector('[tree-dnd-nodes]'));\n                };\n\n                scope.setScope(scope, scope[keyNode]);\n\n                scope.getScopeNode = function () {\n                    return scope;\n                };\n\n                var objprops = [],\n                    objexpr,\n                    i, keyO  = Object.keys(scope[keyNode]),\n                    lenO     = keyO.length,\n                    hashKey  = scope[keyNode].__hashKey__,\n                    skipAttr = [\n                        '__visible__',\n                        '__children__',\n                        '__level__',\n                        '__index__',\n                        '__index_real__',\n\n                        '__parent__',\n                        '__parent_real__',\n                        '__dept__',\n                        '__icon__',\n                        '__icon_class__'\n                    ],\n                    keepAttr = [\n                        '__expanded__'\n                    ],\n                    lenKeep  = keepAttr.length;\n\n                // skip __visible__\n                for (i = 0; i < lenO + lenKeep; i++) {\n                    if (i < lenO) {\n                        if (skipAttr.indexOf(keyO[i]) === -1) {\n                            objprops.push(keyNode + '.' + keyO[i]);\n                        }\n                    } else {\n                        if (keyO.indexOf(keepAttr[i - lenO]) === -1) {\n                            objprops.push(keyNode + '.' + keepAttr[i - lenO]);\n                        }\n                    }\n                }\n\n                objexpr = '[' + objprops.join(',') + ']';\n\n                scope.$watch(objexpr, fnWatchNode, true);\n\n                scope.$on('$destroy', function () {\n                    scope.deleteScope(scope, scope[keyNode]);\n                });\n\n                function fnWatchNode(newVal, oldVal, scope) {\n                    var nodeOf = scope[keyNode];\n\n                    if (typeof nodeOf !== 'object') {\n                        return; // jmp out\n                    }\n\n                    if (!nodeOf.__inited__) {\n                        nodeOf.__inited__ = true;\n                    }\n\n                    if (nodeOf.__hashKey__ !== hashKey) {\n                        // clear scope in $globals\n                        scope.deleteScope(scope, nodeOf);\n\n                        // add new scope into $globals\n                        scope.setScope(scope, nodeOf);\n                        hashKey = nodeOf.__hashKey__;\n                    }\n\n                    var _childs = nodeOf.__children__,\n                        _len    = _childs.length,\n                        _i;\n\n                    var _icon;\n                    if (_len === 0) {\n                        _icon = -1;\n                    } else {\n                        if (nodeOf.__expanded__) {\n                            _icon = 1;\n                        } else {\n                            _icon = 0;\n                        }\n                    }\n\n                    nodeOf.__icon__       = _icon;\n                    nodeOf.__icon_class__ = scope.$class.icon[_icon];\n\n                    if (!scope.isTable) {\n                        if (!childsElem) {\n                            childsElem = scope.getElementChilds();\n                        }\n\n                        if (nodeOf.__expanded__) {\n                            childsElem.removeClass(scope.$class.hidden);\n                        } else {\n                            childsElem.addClass(scope.$class.hidden);\n                        }\n                    }\n\n                    for (_i = 0; _i < _len; _i++) {\n                        scope.for_all_descendants(_childs[_i], scope.hiddenChild, nodeOf, true);\n                    }\n\n                }\n            }\n        }]\n    );\n\nangular.module('ntt.TreeDnD')\n    .directive('treeDndNodes', function () {\n        return {\n            restrict:   'A',\n            replace:    true,\n            controller: 'treeDndNodesController',\n            link:       fnLink\n        };\n\n        function fnLink(scope, element/*, attrs*/) {\n            scope.$type = 'TreeDnDNodes';\n\n            if (scope.$class.nodes) {\n                element.addClass(scope.$class.nodes);\n                scope.$nodes_class = scope.$class.nodes;\n            } else {\n                scope.$nodes_class = '';\n            }\n        }\n    });\n\nangular.module('ntt.TreeDnD')\n    .directive('treeDnd', fnInitTreeDnD);\n\nfnInitTreeDnD.$inject = [\n    '$timeout', '$http', '$compile', '$parse', '$window', '$document', '$templateCache',\n    '$TreeDnDTemplate', '$TreeDnDClass', '$TreeDnDHelper', '$TreeDnDPlugin', '$TreeDnDViewport'\n];\n\nfunction fnInitTreeDnD($timeout, $http, $compile, $parse, $window, $document, $templateCache,\n                       $TreeDnDTemplate, $TreeDnDClass, $TreeDnDHelper, $TreeDnDPlugin, $TreeDnDViewport) {\n    return {\n        restrict:   'E',\n        scope:      true,\n        replace:    true,\n        controller: ['$scope', '$element', '$attrs', fnController],\n        compile:    fnCompile\n    };\n\n    function fnController($scope, $element, $attrs) {\n        /**\n         * Scope of tree\n         * @namespace $scope\n         */\n\n        /**\n         * Indent basic\n         *\n         * @type {number}\n         * @default 20\n         */\n        $scope.indent = 20;\n\n        /**\n         * Indent plus each level\n         *\n         * @type {number}\n         * @default 15\n         */\n        $scope.indent_plus = 15;\n\n        /**\n         * Indent unit\n         *\n         * @type {string}\n         * @default 'px'\n         */\n        $scope.indent_unit = 'px';\n\n        /**\n         * Tree's class\n         *\n         * @type {string}\n         * @default 'table'\n         */\n        $scope.$tree_class = 'table';\n\n\n        /**\n         * Primary key\n         *\n         * @type {string}\n         * @default '__uid__'\n         */\n        $scope.primary_key = '__uid__';\n\n        /**\n         * Type of Tree\n         *\n         * @type {string}\n         * @default 'TreeDnD'\n         */\n        $scope.$type = 'TreeDnD';\n        // $scope.enabledFilter = undefined;\n        $scope.colDefinitions = [];\n        $scope.$globals       = {};\n        /**\n         * Classes status\n         * @type {Object}\n         */\n        $scope.$class = angular.copy($TreeDnDClass);\n\n        angular.extend(\n            $scope.$class.icon, {\n                '1':  $attrs.iconExpand || 'glyphicon glyphicon-minus',\n                '0':  $attrs.iconCollapse || 'glyphicon glyphicon-plus',\n                '-1': $attrs.iconLeaf || 'glyphicon glyphicon-file'\n            }\n        );\n\n        /**\n         * Tree data\n         * @type {Node[]}\n         * @default []\n         */\n        $scope.treeData = [];\n\n        /**\n         * Tree nodes\n         * @type {Node[]}\n         * @default []\n         */\n        $scope.tree_nodes = [];\n\n\n        /**\n         * Function foreach all descendants\n         * @callback $scope.for_all_descendants\n         * @param {Node} node\n         * @param {Function|$scope.for_all_descendants} fn\n         * @param {Node} [parent]\n         * @param {boolean} [checkSibling=false] Check sibling of node\n         * @returns {boolean}\n         */\n        $scope.for_all_descendants = function (node, fn, parent, checkSibling) {\n            if (angular.isFunction(fn)) {\n                var _i, _len, _nodes;\n\n                if (fn(node, parent)) {\n                    // have error or need ignore children\n                    return false;\n                }\n\n                if (typeof node !== 'object') {\n                    return false;\n                }\n\n                _nodes = node.__children__;\n                _len   = _nodes ? _nodes.length : 0;\n                for (_i = 0; _i < _len; _i++) {\n                    if (!$scope.for_all_descendants(_nodes[_i], fn, node) && !checkSibling) {\n                        // skip sibling of node checking\n                        return false;\n                    }\n                }\n            }\n\n            // succeed then continue\n            return true;\n        };\n\n        /**\n         * Get last descendant\n         *\n         * @param {Node|undefined} [node]\n         *\n         * @returns {Node|undefined}\n         */\n        $scope.getLastDescendant = function (node) {\n            var last_child, n;\n\n            if (!node && typeof $scope.tree === 'object') {\n                node = $scope.tree.selected_node;\n            }\n\n            if (typeof node === 'object') {\n                if (angular.isArray(node.__children__)) {\n\n                    n = node.__children__.length;\n\n                    if (n === 0) {\n                        return node;\n                    } else {\n                        last_child = node.__children__[n - 1];\n\n                        return $scope.getLastDescendant(last_child);\n                    }\n                }\n            }\n        };\n\n        /**\n         * Get element children\n         *\n         * @returns {Object}\n         */\n        $scope.getElementChilds = function () {\n            return angular.element($element[0].querySelector('[tree-dnd-nodes]'));\n        };\n\n        /**\n         * Event onClick, will call function [on_click]{@link $scope.tree.on_click}\n         *\n         * @param {Node|undefined} node - For node\n         */\n        $scope.onClick = function (node) {\n            if (angular.isDefined($scope.tree) && angular.isFunction($scope.tree.on_click)) {\n                // We want to detach from Angular's digest cycle so we can\n                // independently measure the time for one cycle.\n                setTimeout(\n                    function () {\n                        $scope.tree.on_click(node);\n                    },\n                    0\n                );\n            }\n        };\n\n        /**\n         * Event onSelect for node\n         *\n         * @param {Node|undefined} [node] - For node\n         */\n        $scope.onSelect = function (node) {\n            if (angular.isDefined($scope.tree)) {\n                if (node !== $scope.tree.selected_node) {\n                    $scope.tree.select_node(node);\n                }\n\n                if (angular.isFunction($scope.tree.on_select)) {\n                    setTimeout(\n                        function () {\n                            $scope.tree.on_select(node);\n                        },\n                        0\n                    );\n                }\n            }\n        };\n\n        /**\n         * Toggle Expand\n         *\n         * @param {Node|undefined} node - For node\n         * @param {Function} fnCallback\n         */\n        $scope.toggleExpand = function (node, fnCallback) {\n            if (typeof node !== 'object') {\n                return; // jmp out\n            }\n            var passedExpand;\n\n            if (angular.isFunction(fnCallback)) {\n                passedExpand = !!fnCallback(node);\n            } else if (typeof $scope.$callbacks === 'object' && angular.isFunction($scope.$callbacks.expand)) {\n                passedExpand = !!$scope.$callbacks.expand(node);\n            }\n\n            // just for node has children\n            if (node.__children__.length > 0) {\n                if (typeof passedExpand !== 'undefined') {\n                    node.__expanded__ = passedExpand;\n                } else {\n                    node.__expanded__ = !node.__expanded__;\n                }\n            }\n        };\n\n\n        /**\n         * Get hash\n         * @callback _fnGetHash\n         *\n         * @param {Node} node\n         *\n         * @returns {string}\n         *\n         * @private\n         */\n        var _fnGetHash = function (node) {\n            return '#' + node.__parent__ + '#' + node[$scope.primary_key];\n        },\n            /**\n             * Set hash\n             * @param {Node} node\n             * @returns {Node}\n             * @private\n             */\n            _fnSetHash = function (node) {\n                var _hashKey = _fnGetHash(node);\n\n                if (angular.isUndefinedOrNull(node.__hashKey__) || node.__hashKey__ !== _hashKey) {\n                    node.__hashKey__ = _hashKey;\n                }\n\n                return node;\n            };\n\n        /**\n         * Get hash of node\n         *\n         * @type {_fnGetHash}\n         */\n        $scope.getHash = _fnGetHash;\n\n        /**\n         * Override callbacks\n         * @namespace $scope.$callbacks\n         * @type object\n         */\n        $scope.$callbacks = {\n            getHash:             _fnGetHash,\n            setHash:             _fnSetHash,\n            for_all_descendants: $scope.for_all_descendants,\n            /*expand:              function (node) {\n             return true;\n             },*/\n            accept:              function (/*dragInfo, moveTo, isChanged*/) {\n                return $scope.dropEnabled === true;\n            },\n\n            /**\n             * Calc indent\n             *\n             * @param {int} level\n             * @param {boolean} skipUnit\n             * @param {boolean} skipEdge\n             * @returns {number|string}\n             */\n            calsIndent: function (level, skipUnit, skipEdge) {\n                var unit = 0,\n                    edge = skipEdge ? 0 : $scope.indent_plus;\n                if (!skipUnit) {\n                    unit = $scope.indent_unit ? $scope.indent_unit : 'px';\n                }\n\n                if (level - 1 < 1) {\n                    return edge + unit;\n                } else {\n                    return $scope.indent * (level - 1) + edge + unit;\n                }\n            },\n\n            /**\n             * Is droppable\n             *\n             * @returns {boolean}\n             */\n            droppable:  function () {\n                return $scope.dropEnabled === true;\n            },\n            /**\n             * Is draggable\n             *\n             * @returns {boolean}\n             */\n            draggable:  function () {\n                return $scope.dragEnabled === true;\n            },\n            /**\n             * Before drop\n             *\n             * @returns {boolean}\n             */\n            beforeDrop: function (/*event*/) {\n                return true;\n            },\n\n            /**\n             * Change key for node\n             *\n             * @param node\n             */\n            changeKey: function (node) {\n                var _key     = node.__uid__;\n                node.__uid__ = Math.random();\n                if (node.__selected__) {\n                    delete node.__selected__;\n                }\n\n                if ($scope.primary_key !== '__uid__') {\n                    _key = '' + node[$scope.primary_key];\n                    _key = _key.replace(/_#.+$/g, '') + '_#' + node.__uid__;\n\n                    node[$scope.primary_key] = _key;\n                }\n                // delete(node.__hashKey__);\n            },\n\n            /**\n             * Clone node\n             *\n             * @param node\n             * @returns {*}\n             */\n            clone: function (node/*, _this*/) {\n                var _clone = angular.copy(node);\n\n                this.for_all_descendants(_clone, this.changeKey);\n\n                return _clone;\n            },\n\n            /**\n             * Remove node\n             *\n             * @param {Node} node\n             * @param {Node[]} parent\n             * @param {this} _this\n             * @param {boolean} delayReload\n             * @returns {Node[]}\n             */\n            remove: function (node, parent, _this, delayReload) {\n                var temp = parent.splice(node.__index__, 1)[0];\n                if (!delayReload) {\n                    $scope.reload_data();\n                }\n                return temp;\n            },\n\n            /**\n             * Clear info\n             *\n             * @param {Node} node\n             */\n            clearInfo: function (node) {\n                delete node.__inited__;\n                delete node.__visible__;\n\n                // always changed after call reload_data\n                //delete node.__hashKey__;\n            },\n\n            /**\n             * Add node to\n             *\n             * @param {Node} node\n             * @param {int} pos\n             * @param {Node[]} parent\n             * @param {this} _this\n             */\n            add: function (node, pos, parent/*, _this*/) {\n                // clearInfo\n                this.for_all_descendants(node, this.clearInfo);\n                if (parent) {\n                    if (parent.length > -1) {\n                        if (pos > -1) {\n                            parent.splice(pos, 0, node);\n                        } else {\n                            // todo If children need load crazy\n                            parent.push(node);\n                        }\n                    } else {\n                        parent.push(node);\n                    }\n                }\n            }\n        };\n\n        /**\n         * Delete scope by node\n         *\n         * @param {$scope} scope\n         * @param {Node} node\n         */\n        $scope.deleteScope = function (scope, node) {\n            var _hash = node.__hashKey__;\n            if ($scope.$globals[_hash] && $scope.$globals[_hash] === scope) {\n                delete $scope.$globals[_hash];\n            }\n        };\n\n        /**\n         * Set scope for node\n         *\n         * @param {$scope} scope\n         * @param {Node} node\n         */\n        $scope.setScope = function (scope, node) {\n            var _hash = node.__hashKey__;\n            if ($scope.$globals[_hash] !== scope) {\n                $scope.$globals[_hash] = scope;\n            }\n        };\n\n        /**\n         * Get scope of node\n         *\n         * @param {Node} node\n         * @returns {$scope}\n         */\n        $scope.getScope = function (node) {\n            if (node) {\n                var _hash = node.__hashKey__;\n                //var _hash = typeof node === 'string' ? node : node.__hashKey__;\n                return $scope.$globals[_hash];\n            }\n\n            return $scope;\n        };\n\n        if ($attrs.enableDrag || $attrs.enableDrop) {\n            $scope.placeElm    = undefined;\n            //                            $scope.dragBorder = 30;\n            $scope.dragEnabled = undefined;\n            $scope.dropEnabled = undefined;\n            $scope.horizontal  = undefined;\n\n            if ($attrs.enableDrag) {\n\n                $scope.dragDelay       = 0;\n                $scope.enabledMove     = true;\n                $scope.statusMove      = true;\n                $scope.enabledHotkey   = false;\n                $scope.enabledCollapse = undefined;\n                $scope.statusElm       = undefined;\n                $scope.dragging        = undefined;\n\n                angular.extend(\n                    $scope.$callbacks, {\n                        beforeDrag: function (/*scopeDrag*/) {\n                            return true;\n                        },\n                        /**\n                         * Callback when drag stop\n                         *\n                         * @param info\n                         * @param {boolean} passed\n                         */\n                        dragStop:   function (info, passed) {\n                            if (!info || !info.changed && info.drag.enabledMove || !passed) {\n                                return; // jmp out\n                            }\n\n                            info.target.reload_data();\n\n                            if (info.target !== info.drag && info.drag.enabledMove) {\n                                info.drag.reload_data();\n                            }\n                        },\n\n                        /**\n                         * Callback when node dropped\n                         *\n                         * @param info\n                         * @returns {boolean}\n                         */\n                        dropped: function (info/*, pass*/) {\n                            if (!info) {\n                                return; // jmp out\n                            }\n\n                            var _node         = info.node,\n                                _nodeAdd,\n                                _move         = info.move,\n                                _parent,\n                                _parentRemove = info.parent || info.drag.treeData,\n                                _parentAdd    = _move.parent || info.target.treeData,\n                                isMove        = info.drag.enabledMove;\n\n                            if (!info.changed && isMove) {\n                                return false;\n                            }\n\n                            if (info.target.$callbacks.accept(info, info.move, info.changed)) {\n                                if (isMove) {\n                                    _parent = _parentRemove;\n                                    if (angular.isDefined(_parent.__children__)) {\n                                        _parent = _parent.__children__;\n                                    }\n\n                                    _nodeAdd = info.drag.$callbacks.remove(\n                                        _node,\n                                        _parent,\n                                        info.drag.$callbacks,\n                                        true // delay reload\n                                    );\n                                } else {\n                                    _nodeAdd = info.drag.$callbacks.clone(_node, info.drag.$callbacks);\n                                }\n\n                                // if node dragging change index in sample node parent\n                                // and index node decrement\n                                if (isMove &&\n                                    info.drag === info.target &&\n                                    _parentRemove === _parentAdd &&\n                                    _move.pos >= info.node.__index__) {\n                                    _move.pos--;\n                                }\n\n                                _parent = _parentAdd;\n                                if (_parent.__children__) {\n                                    _parent = _parent.__children__;\n                                }\n\n                                info.target.$callbacks.add(\n                                    _nodeAdd,\n                                    _move.pos,\n                                    _parent,\n                                    info.drag.$callbacks\n                                );\n\n                                return true;\n                            }\n\n                            return false;\n                        },\n\n                        /**\n                         * Callback when before drag start\n                         *\n                         * @param event\n                         */\n                        dragStart: function (event) {\n                        },\n\n                        /**\n                         * Callback when before drag move\n                         *\n                         * @param event\n                         */\n                        dragMove: function (event) {\n                        }\n                    }\n                );\n\n                /**\n                 * Set status dragging\n                 *\n                 * @param dragInfo\n                 */\n                $scope.setDragging = function (dragInfo) {\n                    $scope.dragging = dragInfo;\n                };\n\n                /**\n                 * Get status node is enable move\n                 *\n                 * @param val\n                 */\n                $scope.enableMove = function (val) {\n                    if (typeof val === 'boolean') {\n                        $scope.enabledMove = val;\n                    } else {\n                        $scope.enabledMove = true;\n                    }\n                };\n\n                if ($attrs.enableStatus) {\n                    /**\n                     * Enable status (moving, coping)\n                     *\n                     * @type {boolean}\n                     */\n                    $scope.enabledStatus = false;\n\n                    /**\n                     * Hide status\n                     */\n                    $scope.hideStatus = function () {\n                        if ($scope.statusElm) {\n                            $scope.statusElm.addClass($scope.$class.hidden);\n                        }\n                    };\n\n                    /**\n                     * Refresh Status\n                     */\n                    $scope.refreshStatus = function () {\n                        if (!$scope.dragging) {\n                            return;\n                        }\n\n                        if ($scope.enabledStatus) {\n                            var statusElmOld = $scope.statusElm;\n                            if ($scope.enabledMove) {\n                                $scope.statusElm = angular.element($TreeDnDTemplate.getMove($scope));\n                            } else {\n                                $scope.statusElm = angular.element($TreeDnDTemplate.getCopy($scope));\n                            }\n\n                            if (statusElmOld !== $scope.statusElm) {\n                                if (statusElmOld) {\n                                    $scope.statusElm.attr('class', statusElmOld.attr('class'));\n                                    $scope.statusElm.attr('style', statusElmOld.attr('style'));\n                                    statusElmOld.remove();\n                                }\n                                $document.find('body').append($scope.statusElm);\n\n                            }\n\n                            $scope.statusElm.removeClass($scope.$class.hidden);\n                        }\n                    };\n\n                    /**\n                     * Set position status\n                     *\n                     * @param {Event} e\n                     */\n                    $scope.setPositionStatus = function (e) {\n                        if ($scope.statusElm) {\n                            $scope.statusElm.css(\n                                {\n                                    'left':    e.pageX + 10 + 'px',\n                                    'top':     e.pageY + 15 + 'px',\n                                    'z-index': 9999\n                                }\n                            );\n\n                            $scope.statusElm.addClass($scope.$class.status);\n                        }\n                    };\n                }\n            }\n\n            $scope.targeting = false;\n\n            /**\n             * Get node previous sibling\n             *\n             * @param node\n             * @returns {*}\n             */\n            $scope.getPrevSibling = function (node) {\n                if (node && node.__index__ > 0) {\n                    var _parent, _index = node.__index__ - 1;\n\n                    if (angular.isDefined(node.__parent_real__)) {\n                        _parent = $scope.tree_nodes[node.__parent_real__];\n\n                        return _parent.__children__[_index];\n                    }\n\n                    return $scope.treeData[_index];\n\n                }\n            };\n\n            /**\n             * Get node by index\n             *\n             * @param {int} index\n             * @returns {Node|undefined}\n             */\n            $scope.getNode = function (index) {\n                if (angular.isUndefinedOrNull(index)) {\n                    return; // jmp out\n                }\n\n                return $scope.tree_nodes[index];\n            };\n\n            $scope.initPlace = function (element, dragElm) {\n\n                if (!$scope.placeElm) {\n                    if ($scope.isTable) {\n                        $scope.placeElm = angular.element($window.document.createElement('tr'));\n\n                        var _len_down = $scope.colDefinitions.length;\n\n                        $scope.placeElm.append(\n                            angular.element($window.document.createElement('td'))\n                                .addClass($scope.$class.empty)\n                                .addClass('indented')\n                                .addClass($scope.$class.place)\n                        );\n\n                        while (_len_down-- > 0) {\n                            $scope.placeElm.append(\n                                angular.element($window.document.createElement('td'))\n                                    .addClass($scope.$class.empty)\n                                    .addClass($scope.$class.place)\n                            );\n                        }\n                    } else {\n                        $scope.placeElm = angular.element($window.document.createElement('li'))\n                            .addClass($scope.$class.empty)\n                            .addClass($scope.$class.place);\n                    }\n\n                }\n\n                if (dragElm) {\n                    $scope.placeElm.css('height', $TreeDnDHelper.height(dragElm) + 'px');\n                }\n\n                if (element) {\n                    element[0].parentNode.insertBefore($scope.placeElm[0], element[0]);\n                } else {\n                    $scope.getElementChilds().append($scope.placeElm);\n                }\n\n                return $scope.placeElm;\n            };\n\n            $scope.hidePlace = function () {\n                if ($scope.placeElm) {\n                    $scope.placeElm.addClass($scope.$class.hidden);\n                }\n            };\n\n            $scope.showPlace = function () {\n                if ($scope.placeElm) {\n                    $scope.placeElm.removeClass($scope.$class.hidden);\n                }\n            };\n\n            $scope.getScopeTree = function () {\n                return $scope;\n            };\n\n        }\n\n        $scope.$safeApply = $safeApply;\n\n        $scope.hiddenChild = function fnHiddenChild(node, parent) {\n            var nodeScope = $scope.getScope(node);\n            if (nodeScope) {\n                if (parent && parent.__expanded__ && parent.__visible__) {\n                    nodeScope.$element.removeClass($scope.$class.hidden);\n                    node.__visible__ = true;\n                } else {\n                    nodeScope.$element.addClass($scope.$class.hidden);\n                    node.__visible__ = false;\n                }\n            } else {\n                // show node & init scope\n                if (parent && parent.__expanded__ && parent.__visible__) {\n                    node.__visible__ = true;\n                } else {\n                    node.__visible__ = false;\n                }\n            }\n\n            // skip all child hiding... if not expaned\n            return node.__expanded__ === false;\n        };\n\n        var _fnInitFilter,\n            _fnInitOrderBy,\n            _fnGetControl,\n            _defaultFilterOption = {\n                showParent: true,\n                showChild:  false,\n                beginAnd:   true\n            },\n            _watches             = [\n                [\n                    'enableDrag',\n                    [\n                        ['boolean', 'enableStatus', undefined, 'enabledStatus'],\n                        ['boolean', 'enableMove', undefined, 'enabledMove'],\n                        ['number', 'dragDelay', 0, undefined, 0],\n                        ['boolean', 'enableCollapse', undefined, 'enabledCollapse'],\n                        ['boolean', 'enableHotkey', undefined, 'enabledHotkey', undefined, function (isHotkey) {\n                            if (isHotkey) {\n                                $scope.enabledMove = false;\n                            } else {\n                                $scope.enabledMove = $scope.statusMove;\n                            }\n                        }]\n                    ]\n                ],\n                [\n                    ['enableDrag', 'enableStatus'],\n                    [\n                        ['string', 'templateCopy', $attrs.templateCopy, 'templateCopy', undefined, function (_url) {\n                            if (_url && $templateCache.get(_url)) {\n                                $TreeDnDTemplate.setCopy(_url, $scope);\n                            }\n                        }],\n                        ['string', 'templateMove', $attrs.templateMove, 'templateMove', undefined, function (_url) {\n                            if (_url && $templateCache.get(_url)) {\n                                $TreeDnDTemplate.setMove(_url, $scope);\n                            }\n                        }]\n                    ]\n                ],\n                [\n                    [['enableDrag', 'enableDrop']],\n                    [\n                        ['number', 'dragBorder', 30, 'dragBorder', 30]\n                    ]\n                ],\n                [\n                    '*',\n                    [\n                        ['boolean', 'treeTable', true, 'treeTable', undefined],\n                        ['boolean', 'horizontal'],\n                        [\n                            'callback',\n                            'treeClass',\n                            function (val) {\n                                switch (typeof val) {\n                                    case 'string':\n                                        $scope.$tree_class = val;\n                                        break;\n                                    case 'object':\n                                        angular.extend($scope.$class, val);\n                                        $scope.$tree_class = $scope.$class.tree;\n                                        break;\n                                    default:\n                                        $scope.$tree_class = $attrs.treeClass;\n                                        break;\n                                }\n                            },\n                            'treeClass',\n                            function () {\n                                $scope.$tree_class = $scope.$class.tree + ' table';\n                            },\n                            undefined,\n                            function () {\n                                if (/^(\\s+[\\w\\-]+){2,}$/g.test(' ' + $attrs.treeClass)) {\n                                    $scope.$tree_class = $attrs.treeClass.trim();\n                                    return true;\n                                }\n                            }\n                        ],\n                        [['object', 'string'], 'expandOn', getExpandOn, 'expandingProperty', getExpandOn, function (expandOn) {\n                            if (angular.isUndefinedOrNull(expandOn)) {\n                                $scope.expandingProperty = $attrs.expandOn;\n                            }\n                        }],\n                        ['object', 'treeControl', angular.isDefined($scope.tree) ? $scope.tree : {}, 'tree', undefined, function (treeControl) {\n                            if (!angular.isFunction(_fnGetControl)) {\n                                _fnGetControl = $TreeDnDPlugin('$TreeDnDControl');\n                            }\n\n                            if (angular.isFunction(_fnGetControl)) {\n                                angular.extend(\n                                    $scope.tree,\n                                    _fnGetControl($scope),\n                                    treeControl\n                                );\n                            }\n                        }],\n                        [['array', 'object'], 'columnDefs', getColDefs, 'colDefinitions', getColDefs, function (colDefs) {\n                            if (angular.isUndefinedOrNull(colDefs) || !angular.isArray(colDefs)) {\n                                $scope.colDefinitions = getColDefs();\n                            }\n                        }],\n                        [['object', 'string', 'array', 'function'], 'orderBy', $attrs.orderBy],\n                        [['object', 'array'], 'filter', undefined, 'filter', undefined, function (filters) {\n                            var _passed = false;\n                            if (angular.isDefined(filters) && !angular.isArray(filters)) {\n                                var _keysF = Object.keys(filters),\n                                    _lenF  = _keysF.length, _iF;\n\n                                if (_lenF > 0) {\n                                    for (_iF = 0; _iF < _lenF; _iF++) {\n\n                                        if (typeof filters[_keysF[_iF]] === 'string' &&\n                                            filters[_keysF[_iF]].length === 0) {\n                                            continue;\n                                        }\n                                        _passed = true;\n                                        break;\n                                    }\n                                }\n                            }\n\n                            $scope.enabledFilter = _passed;\n                            reload_data();\n                        }],\n                        ['object', 'filterOptions', _defaultFilterOption, 'filterOptions', _defaultFilterOption, function (option) {\n                            if (typeof option === 'object') {\n                                $scope.filterOptions = angular.extend(_defaultFilterOption, option);\n                            }\n                        }],\n                        ['string', 'primaryKey', $attrs.primaryKey, 'primary_key', '__uid__'],\n                        ['string', 'indentUnit', $attrs.indentUnit, 'indent_unit'],\n                        ['number', 'indent', 30, undefined, 30],\n                        ['number', 'indentPlus', 20, undefined, 20],\n                        [\n                            'object',\n                            'callbacks',\n                            function (optCallbacks) {\n                                angular.forEach(\n                                    optCallbacks, function (value, key) {\n                                        if (typeof value === 'function') {\n                                            if ($scope.$callbacks[key]) {\n                                                $scope.$callbacks[key] = value;\n                                            }\n                                        }\n                                    }\n                                );\n\n                                return $scope.$callbacks;\n                            },\n                            '$callbacks'\n                        ],\n                        ['number', 'expandLevel', 3, 'expandLevel', 3, function () {\n                            reload_data();\n                        }],\n                        ['number', 'treeLimit', 100, '$TreeLimit', 100],\n                        ['boolean', 'enableDrag', undefined, 'dragEnabled'],\n                        ['boolean', 'enableDrop', undefined, 'dropEnabled']\n                    ]\n                ]\n            ],\n\n            w, lenW              = _watches.length,\n            i, len,\n            _curW,\n            _typeW, _nameW, _defaultW, _scopeW, _NotW, _AfterW, _BeforeW,\n\n            // debounce reload_Data;\n            timeReloadData, tmpTreeData;\n\n        for (w = 0; w < lenW; w++) {\n            // skip if not exist\n            if (!check_exist_attr($attrs, _watches[w][0], true)) {\n                continue;\n            }\n\n            _curW = _watches[w][1];\n            for (i = 0, len = _curW.length; i < len; i++) {\n\n                _typeW    = _curW[i][0];\n                _nameW    = _curW[i][1];\n                _defaultW = _curW[i][2];\n                _scopeW   = _curW[i][3];\n                _NotW     = _curW[i][4];\n                _AfterW   = _curW[i][5];\n                _BeforeW  = _curW[i][6];\n\n                generateWatch(_typeW, _nameW, _defaultW, _scopeW, _NotW, _AfterW, _BeforeW);\n            }\n        }\n\n        if ($attrs.treeData) {\n            $scope.$watch(\n                $attrs.treeData, function (val) {\n                    if (angular.equals(val, $scope.treeData)) {\n                        return; // jmp out\n                    }\n\n                    tmpTreeData = val;\n                    if (angular.isUndefinedOrNull(timeReloadData)) {\n                        timeReloadData = $timeout(timeLoadData, 350);\n                    }\n                }, true\n            );\n        }\n\n        function timeLoadData() {\n            $scope.treeData = tmpTreeData;\n            reload_data();\n            timeReloadData = undefined;\n        }\n\n        $scope.updateLimit = function updateLimit() {\n            //console.log('Call fn UpdateLimit');\n            $scope.$TreeLimit += 50;\n        };\n\n        $scope.reload_data = reload_data;\n\n        function check_exist_attr(attrs, existAttr, isAnd) {\n            if (angular.isUndefinedOrNull(existAttr)) {\n                return false;\n            }\n\n            if (existAttr === '*' || !angular.isUndefined(attrs[existAttr])) {\n                return true;\n            }\n\n            if (angular.isArray(existAttr)) {\n                return for_each_attrs(attrs, existAttr, isAnd);\n            }\n        }\n\n        function for_each_attrs(attrs, exist, isAnd) {\n            var i, len = exist.length, passed = false;\n\n            if (len === 0) {\n                return; // jmp out\n            }\n\n            for (i = 0; i < len; i++) {\n                if (check_exist_attr(attrs, exist[i], !isAnd)) {\n                    passed = true;\n                    if (!isAnd) {\n                        return true;\n                    }\n                } else {\n                    if (isAnd) {\n                        return false;\n                    }\n                }\n            }\n\n            return passed;\n        }\n\n        function generateWatch(type, nameAttr, valDefault, nameScope, fnNotExist, fnAfter,\n                               fnBefore) {\n            nameScope = nameScope || nameAttr;\n            if (typeof type === 'string' || angular.isArray(type)) {\n                if (angular.isFunction(fnBefore) && fnBefore()) {\n                    return;//jmp\n                }\n\n                if (typeof $attrs[nameAttr] === 'string') {\n                    $scope.$watch(\n                        $attrs[nameAttr], function (val) {\n                            if (typeof type === 'string' && typeof val === type ||\n                                angular.isArray(type) && type.indexOf(typeof val) > -1\n                            ) {\n                                $scope[nameScope] = val;\n                            } else {\n                                if (angular.isFunction(valDefault)) {\n                                    $scope[nameScope] = valDefault(val);\n                                } else {\n                                    $scope[nameScope] = valDefault;\n                                }\n                            }\n\n                            if (angular.isFunction(fnAfter)) {\n                                fnAfter($scope[nameScope], $scope);\n                            }\n                        }, true\n                    );\n                } else {\n\n                    if (angular.isFunction(fnNotExist)) {\n                        $scope[nameScope] = fnNotExist();\n                    } else if (!angular.isUndefined(fnNotExist)) {\n                        $scope[nameScope] = fnNotExist;\n                    }\n                }\n            }\n        }\n\n        function $safeApply(fn) {\n            var phase = this.$root.$$phase;\n            if (phase === '$apply' || phase === '$digest') {\n                if (fn && typeof fn === 'function') {\n                    fn();\n                }\n            } else {\n                this.$apply(fn);\n            }\n        }\n\n        /**\n         * Get Expand on\n         * @callback getExpandOn\n         */\n        function getExpandOn() {\n            if ($scope.treeData && $scope.treeData.length) {\n                var _firstNode = $scope.treeData[0], _keys = Object.keys(_firstNode),\n                    _regex                                 = new RegExp('^__([a-zA-Z0-9_\\-]*)__$'),\n                    _len,\n                    i;\n                // Auto get first field with type is string;\n                for (i = 0, _len = _keys.length; i < _len; i++) {\n                    if (typeof _firstNode[_keys[i]] === 'string' && !_regex.test(_keys[i])) {\n                        $scope.expandingProperty = _keys[i];\n\n                        return; // jmp out\n                    }\n                }\n\n                // Auto get first\n                if (angular.isUndefinedOrNull($scope.expandingProperty)) {\n                    $scope.expandingProperty = _keys[0];\n                }\n\n            }\n        }\n\n        /**\n         * Get col defs\n         *\n         * @callback getColDefs\n         */\n        function getColDefs() {\n            // Auto get Defs except attribute __level__ ....\n            if ($scope.treeData.length) {\n                var _col_defs = [], _firstNode = $scope.treeData[0],\n                    _regex                     = new RegExp('(^__([a-zA-Z0-9_\\-]*)__$|^' + $scope.expandingProperty + '$)'),\n                    _keys                      = Object.keys(_firstNode),\n                    i, _len;\n\n                // Auto get first field with type is string;\n                for (i = 0, _len = _keys.length; i < _len; i++) {\n                    if (typeof _firstNode[_keys[i]] === 'string' && !_regex.test(_keys[i])) {\n                        _col_defs.push(\n                            {\n                                field: _keys[i]\n                            }\n                        );\n                    }\n                }\n\n                $scope.colDefinitions = _col_defs;\n            }\n        }\n\n        function do_f(root, node, parent, parent_real, level, visible, index) {\n            /**\n             * Data base\n             * @name NodeData\n             * @typedef {Object} NodeData\n             */\n            /**\n             * Node of tree\n             * @name Node\n             * @typedef {NodeData} Node\n             * @extends NodeData\n             * @property {int} __parent_real__\n             * @property {Node} __parent__\n             * @property {boolean} __expanded__\n             * @property {int} __index__\n             * @property {int} __index_real__\n             * @property {int} __level__\n             * @property {int} __icon__\n             * @property {string} __icon_class__\n             * @property {boolean} __visible__\n             * @property {string} __uid__\n             * @property {string} __hashKey__\n             * @property {int} __dept__\n             * @property {Node[]|undefined} [__children__]\n             */\n            if (typeof node !== 'object') {\n                return 0;\n            }\n\n            var _i, _len, _icon, _index_real, _dept, _hashKey;\n\n            if (!angular.isArray(node.__children__)) {\n                node.__children__ = [];\n            }\n\n            node.__parent_real__ = parent_real;\n            node.__parent__      = parent;\n            _len                 = node.__children__.length;\n\n            if (angular.isUndefinedOrNull(node.__expanded__) && _len > 0) {\n                node.__expanded__ = level < $scope.expandLevel;\n            }\n\n            if (_len === 0) {\n                _icon = -1;\n            } else {\n                if (node.__expanded__) {\n                    _icon = 1;\n                } else {\n                    _icon = 0;\n                }\n            }\n\n            // Insert item vertically\n            _index_real         = root.length;\n            node.__index__      = index;\n            node.__index_real__ = _index_real;\n            node.__level__      = level;\n            node.__icon__       = _icon;\n            node.__icon_class__ = $scope.$class.icon[_icon];\n            node.__visible__    = !!visible;\n\n            if (angular.isUndefinedOrNull(node.__uid__)) {\n                node.__uid__ = '' + Math.random();\n            }\n\n            _hashKey = $scope.getHash(node);\n\n            if (angular.isUndefinedOrNull(node.__hashKey__) || node.__hashKey__ !== _hashKey) {\n                node.__hashKey__ = _hashKey;\n            }\n\n            root.push(node);\n\n            // Check node children\n            _dept = 1;\n            if (_len > 0) {\n                for (_i = 0; _i < _len; _i++) {\n                    _dept += do_f(\n                        root,\n                        node.__children__[_i],\n                        node[$scope.primary_key],\n                        _index_real,\n                        level + 1,\n                        visible && node.__expanded__,\n                        _i\n                    );\n                }\n            }\n\n            node.__dept__ = _dept;\n\n            return _dept;\n        }\n\n        /**\n         * Init data for tree\n         *\n         * @param {Node[]|undefined} data - Data for tree\n         * @returns {Node[]|undefined}\n         */\n        function init_data(data) {\n\n            // clear memory\n            if (angular.isDefined($scope.tree_nodes)) {\n                delete $scope.tree_nodes;\n            }\n\n            $scope.tree_nodes = data;\n\n            return data;\n        }\n\n        /**\n         * Reload data of tree\n         *\n         * @callback reload_data\n         *\n         * @param oData\n         * @returns {Node[]}\n         */\n        function reload_data(oData) {\n            var _data,\n                _len,\n                _tree_nodes = [];\n\n            if (angular.isDefined(oData)) {\n                if (!angular.isArray(oData) || oData.length === 0) {\n                    return init_data([]);\n                } else {\n                    _data = oData;\n                }\n            } else if (!angular.isArray($scope.treeData) || $scope.treeData.length === 0) {\n                return init_data([]);\n            } else {\n                _data = $scope.treeData;\n            }\n\n            if (!$attrs.expandOn) {\n                getExpandOn();\n            }\n\n            if (!$attrs.columnDefs) {\n                getColDefs();\n            }\n\n            if (angular.isDefined($scope.orderBy)) {\n                if (!angular.isFunction(_fnInitOrderBy)) {\n                    _fnInitOrderBy = $TreeDnDPlugin('$TreeDnDOrderBy');\n                }\n\n                if (angular.isFunction(_fnInitOrderBy)) {\n                    _data = _fnInitOrderBy(_data, $scope.orderBy);\n                }\n            }\n\n            if (angular.isDefined($scope.filter)) {\n                if (!angular.isFunction(_fnInitFilter)) {\n                    _fnInitFilter = $TreeDnDPlugin('$TreeDnDFilter');\n                }\n\n                if (angular.isFunction(_fnInitFilter)) {\n                    _data = _fnInitFilter(_data, $scope.filter, $scope.filterOptions);\n                }\n            }\n\n            _len = _data.length;\n            if (_len > 0) {\n                var _i,\n                    _deptTotal = 0;\n\n                for (_i = 0; _i < _len; _i++) {\n                    _deptTotal += do_f(_tree_nodes, _data[_i], undefined, undefined, 1, true, _i);\n                }\n\n            }\n\n            init_data(_tree_nodes);\n\n            return _tree_nodes;\n        }\n    }\n\n    function fnCompile(tElement) {\n\n        var $_Template = '',\n            _element   = tElement.html().trim();\n\n        if (_element.length > 0) {\n            $_Template = _element;\n            tElement.html('');\n        }\n\n        return function fnPost(scope, element, attrs) {\n\n            if (typeof attrs === 'object' && attrs.enableDrag) {\n                var _fnInitDrag = $TreeDnDPlugin('$TreeDnDDrag');\n                if (angular.isFunction(_fnInitDrag)) {\n                    _fnInitDrag(scope, element, $window, $document);\n                }\n            }\n\n            // kick out $digest\n            element.ready(function () {\n                // apply Template\n                function checkTreeTable(template, scope) {\n                    var elemNode = template[0].querySelector('[tree-dnd-node]'),\n                        attrInclude;\n\n                    scope.isTable = undefined;\n                    if (elemNode) {\n                        elemNode    = angular.element(elemNode);\n                        attrInclude = elemNode.attr('ng-include');\n                    } else {\n                        return;\n                    }\n\n                    if (attrInclude) {\n                        var treeInclude = $parse(attrInclude)(scope) || attrInclude;\n                        if (typeof treeInclude === 'string') {\n                            return $http.get(\n                                treeInclude,\n                                {cache: $templateCache}\n                            ).then(function (response) {\n                                    var data          = response.data || '';\n                                    data              = data.trim();\n                                    //scope.templateNode = data;\n                                    var tempDiv       = document.createElement('div');\n                                    tempDiv.innerHTML = data;\n                                    tempDiv           = angular.element(tempDiv);\n                                    scope.isTable     = !tempDiv[0].querySelector('[tree-dnd-nodes]');\n                                }\n                            );\n                        }\n                    } else {\n                        scope.isTable = !elemNode[0].querySelector('[tree-dnd-nodes]');\n                        //scope.templateNode = elemNode.html();\n                    }\n                    $TreeDnDViewport.setTemplate(scope, scope.templateNode);\n                    //elemNode.html('');\n                }\n\n                var promiseCheck;\n                if ($_Template.length > 0) {\n                    promiseCheck = checkTreeTable(angular.element($_Template.trim()), scope);\n                    if (typeof promiseCheck === 'object') {\n                        promiseCheck.then(function () {\n                            element.append($compile($_Template)(scope));\n                        });\n                    } else {\n                        element.append($compile($_Template)(scope));\n                    }\n                } else {\n                    $http.get(\n                        attrs.templateUrl || $TreeDnDTemplate.getPath(),\n                        {cache: $templateCache}\n                    ).then(function (response) {\n                            var data     = response.data || '';\n                            data         = angular.element(data.trim());\n                            promiseCheck = checkTreeTable(data, scope);\n                            if (typeof promiseCheck === 'object') {\n                                promiseCheck.then(function () {\n                                    element.append($compile(data)(scope));\n                                });\n                            } else {\n                                element.append($compile(data)(scope));\n                            }\n                        }\n                    );\n                }\n            });\n        };\n    }\n}\n\n\nangular.module('ntt.TreeDnD')\n    .factory('$TreeDnDConvert', function () {\n        var _$initConvert = {\n            line2tree: function (data, primaryKey, parentKey, callback) {\n                callback = typeof callback === 'function' ? callback : function () {\n                };\n\n                if (!data || data.length === 0 || !primaryKey || !parentKey) {\n                    return [];\n                }\n\n                var tree     = [],\n                    rootIds  = [],\n                    item     = data[0],\n                    _primary = item[primaryKey],\n                    treeObjs = {},\n                    parentId, parent,\n                    len      = data.length,\n                    i        = 0;\n\n                while (i < len) {\n                    item = data[i++];\n                    callback(item);\n                    _primary           = item[primaryKey];\n                    treeObjs[_primary] = item;\n                }\n\n\n                i = 0;\n                while (i < len) {\n                    item = data[i++];\n\n                    callback(item);\n\n                    _primary           = item[primaryKey];\n                    treeObjs[_primary] = item;\n                    parentId           = item[parentKey];\n\n                    if (parentId) {\n                        parent = treeObjs[parentId];\n                        if (parent) {\n                            if (parent.__children__) {\n                                if (angular.isArray(parent.__children__)) {\n                                    parent.__children__.push(item);\n                                } else {\n                                    console.error('Type of `parent.__children__` isn\\'t array');\n                                    console.log(parent.__children__);\n                                }\n                            } else {\n                                parent.__children__ = [item];\n                            }\n                        }\n                    } else {\n                        rootIds.push(_primary);\n                    }\n                }\n\n                len = rootIds.length;\n                for (i = 0; i < len; i++) {\n                    tree.push(treeObjs[rootIds[i]]);\n                }\n\n                return tree;\n            },\n            tree2tree: function access_child(data, containKey, callback) {\n                callback = typeof callback === 'function' ? callback : function () {\n                };\n\n                var _tree = [],\n                    _i,\n                    _len  = data ? data.length : 0,\n                    _copy, _child;\n\n                for (_i = 0; _i < _len; _i++) {\n                    _copy = angular.copy(data[_i]);\n\n                    callback(_copy);\n\n                    if (angular.isArray(_copy[containKey]) && _copy[containKey].length > 0) {\n                        _child = access_child(_copy[containKey], containKey, callback);\n                        delete _copy[containKey];\n                        _copy.__children__ = _child;\n                    }\n\n                    _tree.push(_copy);\n                }\n\n                return _tree;\n            }\n        };\n\n        return _$initConvert;\n    });\n\n/**\n * Element position information (when drag & drop)\n *\n * @namespace ElementPosition\n * @name ElementPosition\n * @alias ElementPosition\n * @type {object}\n */\n/**\n * Factory $TreeDnDHelper\n * @namespace $TreeDnDHelper\n * @name $TreeDnDHelper\n */\nangular.module('ntt.TreeDnD')\n    .factory('$TreeDnDHelper', [\n        '$document', '$window',\n        function ($document, $window) {\n            var _$helper = /** @lends $TreeDnDHelper */ {\n                /**\n                 * Status is no draggable\n                 *\n                 * @param {Element} targetElm\n                 * @returns {boolean}\n                 */\n                nodrag:   function (targetElm) {\n                    return typeof targetElm.attr('data-nodrag') !== 'undefined';\n                },\n                /**\n                 *\n                 * Get event's object\n                 * @param {object} e\n                 * @returns {object|null}\n                 */\n                eventObj: function (e) {\n                    var obj = e;\n\n                    if (e.targetTouches !== undefined) {\n                        obj = e.targetTouches.item(0);\n                    } else if (e.originalEvent !== undefined && e.originalEvent.targetTouches !== undefined) {\n                        obj = e.originalEvent.targetTouches.item(0);\n                    }\n\n                    return obj;\n                },\n\n                /**\n                 * Get drag info\n                 *\n                 * @param {$scope} scope\n                 * @returns {object}\n                 */\n                dragInfo: function (scope) {\n                    var _node   = scope.getData(),\n                        _tree   = scope.getScopeTree(),\n                        _parent = scope.getNode(_node.__parent_real__);\n\n                    return {\n                        node:    _node,\n                        parent:  _parent,\n                        move:    {\n                            parent: _parent,\n                            pos:    _node.__index__\n                        },\n                        scope:   scope,\n                        target:  _tree,\n                        drag:    _tree,\n                        drop:    scope.getPrevSibling(_node),\n                        changed: false\n                    };\n                },\n\n                /**\n                 * Get element's height\n                 *\n                 * @param {Element} element\n                 * @returns {number}\n                 */\n                height: function (element) {\n                    return element.prop('scrollHeight');\n                },\n\n                /**\n                 * Get element's width\n                 *\n                 * @param {Element} element\n                 * @returns {number}\n                 */\n                width: function (element) {\n                    return element.prop('scrollWidth');\n                },\n\n                /**\n                 * Get element's offset\n                 *\n                 * @param {Element} element\n                 * @returns {{width: *, height: *, top: *, left: *}}\n                 */\n                offset: function (element) {\n                    var boundingClientRect = element[0].getBoundingClientRect();\n\n                    return {\n                        width:  element.prop('offsetWidth'),\n                        height: element.prop('offsetHeight'),\n                        top:    boundingClientRect.top + ($window.pageYOffset || $document[0].body.scrollTop || $document[0].documentElement.scrollTop),\n                        left:   boundingClientRect.left + ($window.pageXOffset || $document[0].body.scrollLeft || $document[0].documentElement.scrollLeft)\n                    };\n                },\n\n                /**\n                 * Get position started of element drag or drop\n                 *\n                 * @param {Event} e\n                 * @param {Element} target\n                 * @returns {ElementPosition}\n                 */\n                positionStarted: function (e, target) {\n                    var ElementPosition = /** @lends ElementPosition */ {\n                        offsetX:  e.pageX - this.offset(target).left,\n                        offsetY:  e.pageY - this.offset(target).top,\n                        startX:   e.pageX,\n                        lastX:    e.pageX,\n                        startY:   e.pageY,\n                        lastY:    e.pageY,\n                        nowX:     0,\n                        nowY:     0,\n                        distX:    0,\n                        distY:    0,\n                        dirAx:    0,\n                        dirX:     0,\n                        dirY:     0,\n                        lastDirX: 0,\n                        lastDirY: 0,\n                        distAxX:  0,\n                        distAxY:  0\n                    };\n\n                    return ElementPosition;\n                },\n\n                /**\n                 * Get position moved\n                 *\n                 * @param {Event} e\n                 * @param {ElementPosition} pos\n                 * @param {bool} firstMoving\n                 * @return {object}\n                 */\n                positionMoved: function (e, pos, firstMoving) {\n                    // mouse position last events\n                    pos.lastX = pos.nowX;\n                    pos.lastY = pos.nowY;\n\n                    // mouse position this events\n                    pos.nowX = e.pageX;\n                    pos.nowY = e.pageY;\n\n                    // distance mouse moved between events\n                    pos.distX = pos.nowX - pos.lastX;\n                    pos.distY = pos.nowY - pos.lastY;\n\n                    // direction mouse was moving\n                    pos.lastDirX = pos.dirX;\n                    pos.lastDirY = pos.dirY;\n\n                    // direction mouse is now moving (on both axis)\n                    pos.dirX = pos.distX === 0 ? 0 : pos.distX > 0 ? 1 : -1;\n                    pos.dirY = pos.distY === 0 ? 0 : pos.distY > 0 ? 1 : -1;\n\n                    // axis mouse is now moving on\n                    var newAx = Math.abs(pos.distX) > Math.abs(pos.distY) ? 1 : 0;\n\n                    // do nothing on first move\n                    if (firstMoving) {\n                        pos.dirAx  = newAx;\n                        pos.moving = true;\n\n                        return; // jmp out\n                    }\n\n                    // calc distance moved on this axis (and direction)\n                    if (pos.dirAx !== newAx) {\n                        pos.distAxX = 0;\n                        pos.distAxY = 0;\n                    } else {\n                        pos.distAxX += Math.abs(pos.distX);\n                        if (pos.dirX !== 0 && pos.dirX !== pos.lastDirX) {\n                            pos.distAxX = 0;\n                        }\n                        pos.distAxY += Math.abs(pos.distY);\n                        if (pos.dirY !== 0 && pos.dirY !== pos.lastDirY) {\n                            pos.distAxY = 0;\n                        }\n                    }\n\n                    pos.dirAx = newAx;\n\n                    return pos;\n                },\n\n                /**\n                 * Replace with indent\n                 *\n                 * @param {$scope} scope\n                 * @param {Element} element\n                 * @param {number} indent\n                 * @param {string} attr\n                 */\n                replaceIndent: function (scope, element, indent, attr) {\n                    attr = attr || 'left';\n                    angular.element(element.children()[0]).css(attr, scope.$callbacks.calsIndent(indent));\n                },\n\n                /**\n                 * Is type tree node\n                 *\n                 * @param {Element} element\n                 * @returns {boolean}\n                 */\n                isTreeDndNode: function (element) {\n                    if (element) {\n                        var $element = angular.element(element);\n                        return $element && $element.length && typeof $element.attr('tree-dnd-node') !== 'undefined';\n                    }\n\n                    return false;\n                },\n\n                /**\n                 * Is tree nodes (container)\n                 *\n                 * @param {Element} element\n                 * @returns {boolean}\n                 */\n                isTreeDndNodes: function (element) {\n                    if (element) {\n                        var $element = angular.element(element);\n\n                        return $element && $element.length && typeof $element.attr('tree-dnd-nodes') !== 'undefined';\n                    }\n\n                    return false;\n                },\n\n                /**\n                 * Is tree node handle (element to call event drag)\n                 *\n                 * @param {Element} element\n                 * @returns {boolean}\n                 */\n                isTreeDndNodeHandle: function (element) {\n                    if (element) {\n                        var $element = angular.element(element);\n\n                        return $element && $element.length && typeof $element.attr('tree-dnd-node-handle') !== 'undefined';\n                    }\n\n                    return false;\n                },\n\n                /**\n                 * Is tree droppable\n                 *\n                 * @param {Element} element\n                 * @returns {boolean}\n                 */\n                isTreeDndDroppable: function (element) {\n                    return _$helper.isTreeDndNode(element)\n                        || _$helper.isTreeDndNodes(element)\n                        || _$helper.isTreeDndNodeHandle(element);\n                },\n\n                /**\n                 * Find element closest by attribute\n                 *\n                 * @param {Element} element\n                 * @param {string|function} attr\n                 * @returns {Element}\n                 */\n                closestByAttr: function fnClosestByAttr(element, attr) {\n                    if (element && attr) {\n                        var $element = angular.element(element),\n                            $parent  = $element.parent();\n\n                        if ($parent) {\n                            var isPassed = false;\n\n                            switch (typeof attr) {\n                                case 'function':\n                                    isPassed = attr($parent);\n                                    break;\n                                default:\n                                    isPassed = typeof $parent.attr(attr) !== 'undefined';\n                                    break;\n                            }\n\n                            if (isPassed) {\n                                return $parent;\n                            } else {\n                                return fnClosestByAttr($parent, attr);\n                            }\n                        }\n                    }\n                }\n            };\n\n            return _$helper;\n        }]\n    );\n\nangular.module('ntt.TreeDnD')\n    .factory('$TreeDnDPlugin', [\n        '$injector',\n        function ($injector) {\n            return _fnget;\n\n            function _fnget(name) {\n                if (angular.isDefined($injector) && $injector.has(name)) {\n                    return $injector.get(name);\n                }\n            }\n        }]\n    );\n\n/**\n * Factory `$TreeDnDTemplate`\n * @namespace $TreeDnDTemplate\n * @name $TreeDnDTemplate\n * @type {object}\n */\nangular.module('ntt.TreeDnD')\n    .factory('$TreeDnDTemplate', [\n        '$templateCache',\n        function ($templateCache) {\n            var templatePath = 'template/TreeDnD/TreeDnD.html',\n                /**\n                 * @private\n                 * @type {string}\n                 */\n                copyPath     = 'template/TreeDnD/TreeDnDStatusCopy.html',\n                /**\n                 * @private\n                 * @type {string}\n                 */\n                movePath     = 'template/TreeDnD/TreeDnDStatusMove.html',\n                /**\n                 * @private\n                 * @type {object}\n                 */\n                scopes       = {},\n\n                _$init       = /** @lends $TreeDnDTemplate */{\n                    /**\n                     * Set path of template move\n                     *\n                     * @param {string} path\n                     * @param {$scope} scope\n                     */\n                    setMove: function (path, scope) {\n                        if (!scopes[scope.$id]) {\n                            scopes[scope.$id] = {};\n                        }\n                        scopes[scope.$id].movePath = path;\n                    },\n\n                    /**\n                     * Set path of template copy\n                     *\n                     * @param {string} path\n                     * @param {$scope} scope\n                     */\n                    setCopy: function (path, scope) {\n                        if (!scopes[scope.$id]) {\n                            scopes[scope.$id] = {};\n                        }\n                        scopes[scope.$id].copyPath = path;\n                    },\n\n                    /**\n                     * Get template's path\n                     *\n                     * @returns {string}\n                     */\n                    getPath: function () {\n                        return templatePath;\n                    },\n\n                    /**\n                     * Get template's copy\n                     *\n                     * @param {$scope} scope\n                     * @returns {string|html}\n                     */\n                    getCopy: function (scope) {\n                        if (scopes[scope.$id] && scopes[scope.$id].copyPath) {\n                            var temp = $templateCache.get(scopes[scope.$id].copyPath);\n                            if (temp) {\n                                return temp;\n                            }\n                        }\n\n                        return $templateCache.get(copyPath);\n                    },\n\n                    /**\n                     * Get template's move\n                     *\n                     * @param {$scope} scope\n                     * @returns {string|html}\n                     */\n                    getMove: function (scope) {\n                        if (scopes[scope.$id] && scopes[scope.$id].movePath) {\n                            var temp = $templateCache.get(scopes[scope.$id].movePath);\n                            if (temp) {\n                                return temp;\n                            }\n                        }\n\n                        return $templateCache.get(movePath);\n                    }\n                };\n\n            return _$init;\n        }]\n    );\n\nangular.module('ntt.TreeDnD')\n    .factory('$TreeDnDViewport', fnInitTreeDnDViewport);\n\nfnInitTreeDnDViewport.$inject = ['$window', '$document', '$timeout', '$q', '$compile'];\n\nfunction fnInitTreeDnDViewport($window, $document, $timeout, $q, $compile) {\n\n    var viewport,\n        isUpdating    = false,\n        isRender      = false,\n        updateAgain   = false,\n        viewportRect,\n        items         = [],\n        nodeTemplate,\n        updateTimeout,\n        renderTime,\n        $initViewport = {\n            setViewport:   setViewport,\n            getViewport:   getViewport,\n            add:           add,\n            setTemplate:   setTemplate,\n            getItems:      getItems,\n            updateDelayed: updateDelayed\n        },\n        eWindow       = angular.element($window);\n\n    eWindow.on('load resize scroll', updateDelayed);\n\n    return $initViewport;\n\n    function update() {\n\n        viewportRect = {\n            width:  eWindow.prop('offsetWidth') || document.documentElement.clientWidth,\n            height: eWindow.prop('offsetHeight') || document.documentElement.clientHeight,\n            top:    $document[0].body.scrollTop || $document[0].documentElement.scrollTop,\n            left:   $document[0].body.scrollLeft || $document[0].documentElement.scrollLeft\n        };\n\n        if (isUpdating || isRender) {\n            updateAgain = true;\n\n            return; // jmp out\n        }\n\n        isUpdating = true;\n\n        recursivePromise();\n    }\n\n    function recursivePromise() {\n        if (isRender) {\n            return;\n        }\n\n        var number = number > 0 ? number : items.length, item;\n\n        if (number > 0) {\n            item = items[0];\n\n            isRender   = true;\n            renderTime = $timeout(function () {\n                //item.element.html(nodeTemplate);\n                //$compile(item.element.contents())(item.scope);\n\n                items.splice(0, 1);\n                isRender = false;\n                number--;\n                $timeout.cancel(renderTime);\n                recursivePromise();\n            }, 0);\n\n        } else {\n            isUpdating = false;\n            if (updateAgain) {\n                updateAgain = false;\n                update();\n            }\n        }\n\n    }\n\n    /**\n     * Check if a point is inside specified bounds\n     * @param x\n     * @param y\n     * @param bounds\n     * @returns {boolean}\n     */\n    function pointIsInsideBounds(x, y, bounds) {\n        return x >= bounds.left &&\n            y >= bounds.top &&\n            x <= bounds.left + bounds.width &&\n            y <= bounds.top + bounds.height;\n    }\n\n    /**\n     * @name setViewport\n     * @desciption Set the viewport element\n     * @param element\n     */\n    function setViewport(element) {\n        viewport = element;\n    }\n\n    /**\n     * Return the current viewport\n     * @returns {*}\n     */\n    function getViewport() {\n        return viewport;\n    }\n\n    /**\n     * trigger an update\n     */\n    function updateDelayed() {\n        $timeout.cancel(updateTimeout);\n\n        updateTimeout = $timeout(\n            function () {\n                update();\n            },\n            0\n        );\n    }\n\n    /**\n     * Add listener for event\n     * @param element\n     * @param callback\n     */\n    function add(scope, element) {\n        updateDelayed();\n\n        items.push({\n            element: element,\n            scope:   scope\n        });\n    }\n\n    function setTemplate(scope, template) {\n        nodeTemplate = template;\n    }\n\n    /**\n     * Get list of items\n     * @returns {Node[]}\n     */\n    function getItems() {\n        return items;\n    }\n}\n\nangular.module('ntt.TreeDnD')\n    .factory('$TreeDnDFilter', [\n        '$filter', function ($filter) {\n            return fnInitFilter;\n\n            function for_all_descendants(options, node, fieldChild, fnBefore, fnAfter, parentPassed) {\n                if (!angular.isFunction(fnBefore)) {\n                    return; // jmp out\n                }\n\n                var _i, _len, _nodes,\n                    _nodePassed   = fnBefore(options, node),\n                    _childPassed  = false,\n                    _filter_index = options.filter_index;\n\n                if (angular.isDefined(node[fieldChild])) {\n                    _nodes = node[fieldChild];\n                    _len   = _nodes.length;\n\n                    options.filter_index = 0;\n                    for (_i = 0; _i < _len; _i++) {\n                        _childPassed = for_all_descendants(\n                            options,\n                            _nodes[_i],\n                            fieldChild,\n                            fnBefore,\n                            fnAfter,\n                            _nodePassed || parentPassed\n                        ) || _childPassed;\n                    }\n\n                    // restore filter_index of node\n                    options.filter_index = _filter_index;\n                }\n\n                if (angular.isFunction(fnAfter)) {\n                    fnAfter(options, node, _nodePassed === true, _childPassed === true, parentPassed === true);\n                }\n\n                return _nodePassed || _childPassed;\n            }\n\n            /**\n             * Check data with callback\n             * @param {string|object|function|regex} callback\n             * @param {*} data\n             * @returns {undefined|boolean}\n             * @private\n             */\n            function _fnCheck(callback, data) {\n                if (angular.isUndefinedOrNull(data) || angular.isArray(data)) {\n                    return; // jmp out\n                }\n\n                if (angular.isFunction(callback)) {\n                    return callback(data, $filter);\n                } else {\n                    if (typeof callback === 'boolean') {\n                        data = !!data;\n                        return data === callback;\n                    } else if (angular.isDefined(callback)) {\n                        try {\n                            var _regex = new RegExp(callback);\n                            return _regex.test(data);\n                        }\n                        catch (err) {\n                            if (typeof data === 'string') {\n                                return data.indexOf(callback) > -1;\n                            } else {\n                                return; // jmp out\n                            }\n                        }\n                    } else {\n                        return; // jmp out\n                    }\n                }\n            }\n\n            /**\n             * `fnProcess` to call `_fnCheck`. If `condition` is `array` then call `for_each_filter`\n             * else will call `_fnCheck`. Specical `condition.field` is `_$` then apply `condition.callback` for all field, if have `field` invaild then `return true`.\n             *\n             * @param node\n             * @param condition\n             * @param isAnd\n             * @returns {undefined|boolean}\n             * @private\n             */\n            function _fnProccess(node, condition, isAnd) {\n                if (angular.isArray(condition)) {\n                    return for_each_filter(node, condition, isAnd);\n                } else {\n                    var _key      = condition.field,\n                        _callback = condition.callback,\n                        _iO, _keysO, _lenO;\n\n                    if (_key === '_$') {\n                        _keysO = Object.keys(node);\n                        _lenO  = _keysO.length;\n                        for (_iO = 0; _iO < _lenO; _iO++) {\n                            if (_fnCheck(_callback, node[_keysO[_iO]])) {\n                                return true;\n                            }\n                        }\n                    } else if (angular.isDefined(node[_key])) {\n                        return _fnCheck(_callback, node[_key]);\n                    }\n                }\n            }\n\n            /**\n             *\n             * @param {object} node\n             * @param {array} conditions Array `conditions`\n             * @param {boolean} isAnd check with condition `And`, if `And` then `return false` when all `false`\n             * @returns {undefined|boolean}\n             */\n            function for_each_filter(node, conditions, isAnd) {\n                var i, len = conditions.length || 0, passed = false;\n                if (len === 0) {\n                    return; // jmp out\n                }\n\n                for (i = 0; i < len; i++) {\n                    if (_fnProccess(node, conditions[i], !isAnd)) {\n                        passed = true;\n                        // if condition `or` then return;\n                        if (!isAnd) {\n                            return true;\n                        }\n                    } else {\n\n                        // if condition `and` and result in fnProccess = false then return;\n                        if (isAnd) {\n                            return false;\n                        }\n                    }\n                }\n\n                return passed;\n            }\n\n            /**\n             * Will call _fnAfter to clear data no need\n             * @param {object} options\n             * @param {object} node\n             * @param {boolean} isNodePassed\n             * @param {boolean} isChildPassed\n             * @param {boolean} isParentPassed\n             * @private\n             */\n            function _fnAfter(options, node, isNodePassed, isChildPassed, isParentPassed) {\n                if (isNodePassed === true) {\n                    node.__filtered__         = true;\n                    node.__filtered_visible__ = true;\n                    node.__filtered_index__   = options.filter_index++;\n                    return; //jmp\n                } else if (isChildPassed === true && options.showParent === true\n                    || isParentPassed === true && options.showChild === true) {\n                    node.__filtered__         = false;\n                    node.__filtered_visible__ = true;\n                    node.__filtered_index__   = options.filter_index++;\n                    return; //jmp\n                }\n\n                // remove attr __filtered__\n                delete node.__filtered__;\n                delete node.__filtered_visible__;\n                delete node.__filtered_index__;\n            }\n\n            /**\n             * `fnBefore` will called when `for_all_descendants` of `node` checking.\n             * If `filter` empty then return `true` else result of function `_fnProccess` {@see _fnProccess}\n             *\n             * @param {object} options\n             * @param {object} node\n             * @returns {undefined|boolean}\n             * @private\n             */\n            function _fnBefore(options, node) {\n                if (options.filter.length === 0) {\n                    return true;\n                } else {\n                    return _fnProccess(node, options.filter, options.beginAnd || false);\n                }\n            }\n\n            /**\n             * `fnBeforeClear` will called when `for_all_descendants` of `node` checking.\n             * Alway false to Clear Filter empty\n             *\n             * @param {object} options\n             * @param {object} node\n             * @returns {undefined|boolean}\n             * @private\n             */\n            function _fnBeforeClear(options, node) {\n                return false;\n            }\n\n            /**\n             * `_fnConvert` to convert `filter` `object` to `array` invaild.\n             *\n             * @param {object|array} filters\n             * @returns {array} Instead of `filter` or new array invaild *(converted from filter)*\n             * @private\n             */\n            function _fnConvert(filters) {\n                var _iF, _lenF, _keysF,\n                    _filter,\n                    _state;\n\n                // convert filter object to array filter\n                if (typeof filters === 'object' && !angular.isArray(filters)) {\n                    _keysF  = Object.keys(filters);\n                    _lenF   = _keysF.length;\n                    _filter = [];\n\n                    if (_lenF > 0) {\n                        for (_iF = 0; _iF < _lenF; _iF++) {\n\n                            if (typeof filters[_keysF[_iF]] === 'string' && filters[_keysF[_iF]].length === 0) {\n                                continue;\n                            } else if (angular.isArray(filters[_keysF[_iF]])) {\n                                _state = filters[_keysF[_iF]];\n                            } else if (typeof filters[_keysF[_iF]] === 'object') {\n                                _state = _fnConvert(filters[_keysF[_iF]]);\n                            } else {\n                                _state = {\n                                    field:    _keysF[_iF],\n                                    callback: filters[_keysF[_iF]]\n                                };\n                            }\n                            _filter.push(_state);\n                        }\n                    }\n\n                    return _filter;\n                }\n                else {\n                    return filters;\n                }\n            }\n\n            /**\n             * `fnInitFilter` function is constructor of service `$TreeDnDFilter`.\n             * @constructor\n             * @param {object|array} treeData\n             * @param {object|array} filters\n             * @param {object} options\n             * @param {string} keyChild\n             * @returns {array} Return `treeData` or `treeData` with `filter`\n             * @private\n             */\n            function fnInitFilter(treeData, filters, options, keyChild) {\n                if (!angular.isArray(treeData)\n                    || treeData.length === 0) {\n                    return treeData;\n                }\n\n                var _i, _len,\n                    _filter;\n\n                _filter = _fnConvert(filters);\n                if (!(angular.isArray(_filter) || typeof _filter === 'object')\n                    || _filter.length === 0) {\n                    for (_i = 0, _len = treeData.length; _i < _len; _i++) {\n                        for_all_descendants(\n                            options,\n                            treeData[_i],\n                            keyChild || '__children__',\n                            _fnBeforeClear, _fnAfter\n                        );\n                    }\n\n                    return treeData;\n                }\n\n                options.filter       = _filter;\n                options.filter_index = 0;\n                for (_i = 0, _len = treeData.length; _i < _len; _i++) {\n                    for_all_descendants(\n                        options,\n                        treeData[_i],\n                        keyChild || '__children__',\n                        _fnBefore, _fnAfter\n                    );\n                }\n\n                return treeData;\n            }\n\n        }]\n    );\n\nangular.module('ntt.TreeDnD')\n    .factory('$TreeDnDOrderBy', [\n        '$filter',\n        function ($filter) {\n            var _fnOrderBy          = $filter('orderBy'),\n                for_all_descendants = function for_all_descendants(options, node, name, fnOrderBy) {\n                    var _i, _len, _nodes;\n\n                    if (angular.isDefined(node[name])) {\n                        _nodes = node[name];\n                        _len   = _nodes.length;\n                        // OrderBy children\n                        for (_i = 0; _i < _len; _i++) {\n                            _nodes[_i] = for_all_descendants(options, _nodes[_i], name, fnOrderBy);\n                        }\n\n                        node[name] = fnOrderBy(node[name], options);\n                    }\n\n                    return node;\n                },\n                _fnOrder            = function _fnOrder(list, orderBy) {\n                    return _fnOrderBy(list, orderBy);\n                },\n                _fnMain             = function _fnMain(treeData, orderBy) {\n                    if (!angular.isArray(treeData)\n                        || treeData.length === 0\n                        || !(angular.isArray(orderBy) || typeof orderBy === 'object' || angular.isString(orderBy) || angular.isFunction(orderBy))\n                        || orderBy.length === 0 && !angular.isFunction(orderBy)\n                    ) {\n                        return treeData;\n                    }\n\n                    var _i, _len;\n\n                    for (_i = 0, _len = treeData.length; _i < _len; _i++) {\n                        treeData[_i] = for_all_descendants(\n                            orderBy,\n                            treeData[_i],\n                            '__children__',\n                            _fnOrder\n                        );\n                    }\n\n                    return _fnOrder(treeData, orderBy);\n                };\n\n            return _fnMain;\n        }]\n    );\n\nangular.module('ntt.TreeDnD')\n    .factory('$TreeDnDDrag', [\n        '$timeout', '$TreeDnDHelper',\n        function ($timeout, $TreeDnDHelper) {\n\n            function _fnPlaceHolder(e, $params) {\n                if ($params.placeElm) {\n                    var _offset = $TreeDnDHelper.offset($params.placeElm);\n                    if (_offset.top <= e.pageY && e.pageY <= _offset.top + _offset.height &&\n                        _offset.left <= e.pageX && e.pageX <= _offset.left + _offset.width\n                    ) {\n                        return true;\n                    }\n                }\n\n                return false;\n            }\n\n            function _fnDragStart(e, $params) {\n                if (!$params.hasTouch && (e.button === 2 || e.which === 3)) {\n                    // disable right click\n                    return; // jmp out\n                }\n\n                if (e.uiTreeDragging || e.originalEvent && e.originalEvent.uiTreeDragging) { // event has already fired in other scope.\n                    return; // jmp out\n                }\n\n                // the element which is clicked.\n                var eventElm = angular.element(e.target),\n                    eventScope;\n\n                if ($TreeDnDHelper.isTreeDndNodeHandle(eventElm)) {\n                    eventScope = eventElm.controller('treeDndNodeHandle').scope;\n                } else {\n                    eventElm = $TreeDnDHelper.closestByAttr(eventElm, $TreeDnDHelper.isTreeDndNodeHandle);\n                    if (eventElm) {\n                        eventScope = eventElm.controller('treeDndNodeHandle').scope;\n                    }\n                }\n\n                if (!eventScope || !eventScope.$type) {\n                    return; // jmp out\n                }\n\n                // if (eventScope.$type !== 'TreeDnDNode') { // Check if it is a node or a handle\n                //     return; // jmp out\n                // }\n\n                if (eventScope.$type !== 'TreeDnDNodeHandle') { // If the node has a handle, then it should be clicked by the handle\n                    return; // jmp out\n                }\n\n                var eventElmTagName = eventElm.prop('tagName').toLowerCase(),\n                    dragScope,\n                    _$scope         = $params.$scope;\n\n                if (eventElmTagName === 'input'\n                    || eventElmTagName === 'textarea'\n                    || eventElmTagName === 'button'\n                    || eventElmTagName === 'select') { // if it's a input or button, ignore it\n                    return; // jmp out\n                }\n\n                // check if it or it's parents has a 'data-nodrag' attribute\n                while (eventElm && eventElm[0] && eventElm[0] !== $params.element) {\n                    if ($TreeDnDHelper.nodrag(eventElm)) { // if the node mark as `nodrag`, DONOT drag it.\n                        return; // jmp out\n                    }\n                    eventElm = eventElm.parent();\n                }\n\n                e.uiTreeDragging = true; // stop event bubbling\n\n                if (e.originalEvent) {\n                    e.originalEvent.uiTreeDragging = true;\n                }\n\n                e.preventDefault();\n\n                dragScope = eventScope.getScopeNode();\n\n                $params.dragInfo = $TreeDnDHelper.dragInfo(dragScope);\n\n                if (!_$scope.$callbacks.beforeDrag(dragScope, $params.dragInfo)) {\n                    return; // jmp out\n                }\n\n                $params.firstMoving = true;\n\n                _$scope.setDragging($params.dragInfo);\n\n                var eventObj = $TreeDnDHelper.eventObj(e);\n\n                $params.pos = $TreeDnDHelper.positionStarted(eventObj, dragScope.$element);\n\n                if (dragScope.isTable) {\n                    $params.dragElm = angular.element($params.$window.document.createElement('table'))\n                        .addClass(_$scope.$class.tree)\n                        .addClass(_$scope.$class.drag)\n                        .addClass(_$scope.$tree_class);\n                } else {\n                    $params.dragElm = angular.element($params.$window.document.createElement('ul'))\n                        .addClass(_$scope.$class.drag)\n                        .addClass('tree-dnd-nodes')\n                        .addClass(_$scope.$tree_class);\n                }\n\n                $params.dragElm.css(\n                    {\n                        'width':   $TreeDnDHelper.width(dragScope.$element) + 'px',\n                        'z-index': 9995\n                    }\n                );\n\n                $params.offsetEdge = 0;\n                var _width         = $TreeDnDHelper.width(dragScope.$element),\n                    _scope         = dragScope,\n                    _element       = _scope.$element,\n                    _clone,\n                    _needCollapse  = !!_$scope.enabledCollapse,\n                    _copied        = false,\n                    _tbody,\n                    _frag;\n\n                if (_scope.isTable) {\n                    $params.offsetEdge = $params.dragInfo.node.__level__ - 1;\n\n                    _tbody = angular.element(document.createElement('tbody'));\n                    _frag  = angular.element(document.createDocumentFragment());\n\n                    _$scope.for_all_descendants(\n                        $params.dragInfo.node, function (_node, _parent) {\n                            _scope   = _$scope.getScope(_node);\n                            _element = _scope && _scope.$element;\n                            if (_scope && _element) {\n                                if (!_copied) {\n                                    _clone = _element.clone();\n\n                                    $TreeDnDHelper.replaceIndent(\n                                        _$scope,\n                                        _clone,\n                                        _node.__level__ - $params.offsetEdge,\n                                        'padding-left'\n                                    );\n\n                                    _frag.append(_clone);\n\n                                    // skip all, just clone parent\n                                    if (_needCollapse) {\n                                        _copied = true;\n                                    }\n\n                                    // hide if have status Move;\n                                    if (_$scope.enabledMove && _$scope.$class.hidden &&\n                                        (!_parent || _node.__visible__ || _parent.__visible__ && _parent.__expanded__)) {\n                                        _element.addClass(_$scope.$class.hidden);\n                                    }\n                                }\n                            }\n                            // skip children of node not expand.\n                            return _copied || _node.__visible__ === false || _node.__expanded__ === false;\n\n                        },\n                        undefined,\n                        !_needCollapse\n                    );\n\n                    _tbody.append(_frag);\n\n                    $params.dragElm.append(_tbody);\n                } else {\n\n                    _clone = _element.clone();\n                    if (_needCollapse) {\n                        _clone[0].querySelector('[tree-dnd-nodes]').remove();\n                    }\n\n                    // hide if have status Move;\n                    $params.dragElm.append(_clone);\n                    if (_$scope.enabledMove && _$scope.$class.hidden) {\n                        _element.addClass(_$scope.$class.hidden);\n                    }\n                }\n\n                $params.dragElm.css(\n                    {\n                        'left': eventObj.pageX - $params.pos.offsetX + _$scope.$callbacks.calsIndent(\n                            $params.offsetEdge + 1,\n                            true,\n                            true\n                        ) + 'px',\n                        'top':  eventObj.pageY - $params.pos.offsetY + 'px'\n                    }\n                );\n                // moving item with descendant\n                $params.$document.find('body').append($params.dragElm);\n                if (_$scope.$callbacks.droppable()) {\n                    $params.placeElm = _$scope.initPlace(dragScope.$element, $params.dragElm);\n\n                    if (dragScope.isTable) {\n                        $TreeDnDHelper.replaceIndent(_$scope, $params.placeElm, $params.dragInfo.node.__level__);\n                    }\n\n                    $params.placeElm.css('width', _width);\n                }\n\n                _$scope.showPlace();\n                _$scope.targeting = true;\n\n                if (_$scope.enabledStatus) {\n                    _$scope.refreshStatus();\n                    _$scope.setPositionStatus(e);\n                }\n\n                angular.element($params.$document).bind('touchend', $params.dragEndEvent);\n                angular.element($params.$document).bind('touchcancel', $params.dragEndEvent);\n                angular.element($params.$document).bind('touchmove', $params.dragMoveEvent);\n                angular.element($params.$document).bind('mouseup', $params.dragEndEvent);\n                angular.element($params.$document).bind('mousemove', $params.dragMoveEvent);\n                angular.element($params.$document).bind('mouseleave', $params.dragCancelEvent);\n\n                $params.document_height = Math.max(\n                    $params.body.scrollHeight,\n                    $params.body.offsetHeight,\n                    $params.html.clientHeight,\n                    $params.html.scrollHeight,\n                    $params.html.offsetHeight\n                );\n\n                $params.document_width = Math.max(\n                    $params.body.scrollWidth,\n                    $params.body.offsetWidth,\n                    $params.html.clientWidth,\n                    $params.html.scrollWidth,\n                    $params.html.offsetWidth\n                );\n            }\n\n            function _fnDragMove(e, $params) {\n                var _$scope = $params.$scope;\n                if (!$params.dragStarted) {\n                    if (!$params.dragDelaying) {\n                        $params.dragStarted = true;\n                        _$scope.$safeApply(function () {\n                            _$scope.$callbacks.dragStart($params.dragInfo);\n                        });\n                    }\n\n                    return; // jmp out\n                }\n\n                if ($params.dragElm) {\n                    e.preventDefault();\n\n                    if ($params.$window.getSelection) {\n                        $params.$window.getSelection().removeAllRanges();\n                    } else if ($params.$window.document.selection) {\n                        $params.$window.document.selection.empty();\n                    }\n\n                    var eventObj   = $TreeDnDHelper.eventObj(e),\n                        leftElmPos = eventObj.pageX - $params.pos.offsetX,\n                        topElmPos  = eventObj.pageY - $params.pos.offsetY;\n\n                    //dragElm can't leave the screen on the left\n                    if (leftElmPos < 0) {\n                        leftElmPos = 0;\n                    }\n\n                    //dragElm can't leave the screen on the top\n                    if (topElmPos < 0) {\n                        topElmPos = 0;\n                    }\n\n                    //dragElm can't leave the screen on the bottom\n                    if (topElmPos + 10 > $params.document_height) {\n                        topElmPos = $params.document_height - 10;\n                    }\n\n                    //dragElm can't leave the screen on the right\n                    if (leftElmPos + 10 > $params.document_width) {\n                        leftElmPos = $params.document_width - 10;\n                    }\n\n                    $params.dragElm.css(\n                        {\n                            'left': leftElmPos + _$scope.$callbacks.calsIndent(\n                                $params.offsetEdge + 1,\n                                true,\n                                true\n                            ) + 'px',\n                            'top':  topElmPos + 'px'\n                        }\n                    );\n\n                    if (_$scope.enabledStatus) {\n                        _$scope.setPositionStatus(e);\n                    }\n\n                    var top_scroll    = window.pageYOffset || $params.$window.document.documentElement.scrollTop,\n                        bottom_scroll = top_scroll + (window.innerHeight || $params.$window.document.clientHeight || $params.$window.document.clientHeight);\n                    // to scroll down if cursor y-position is greater than the bottom position the vertical scroll\n                    if (bottom_scroll < eventObj.pageY && bottom_scroll <= $params.document_height) {\n                        window.scrollBy(0, 10);\n                    }\n                    // to scroll top if cursor y-position is less than the top position the vertical scroll\n                    if (top_scroll > eventObj.pageY) {\n                        window.scrollBy(0, -10);\n                    }\n\n                    $TreeDnDHelper.positionMoved(e, $params.pos, $params.firstMoving);\n\n                    if ($params.firstMoving) {\n                        $params.firstMoving = false;\n\n                        return; // jmp out\n                    }\n                    // check if add it as a child node first\n\n                    var targetX    = eventObj.pageX - $params.$window.document.body.scrollLeft,\n                        targetY    = eventObj.pageY - (window.pageYOffset || $params.$window.document.documentElement.scrollTop),\n\n                        targetElm,\n                        targetScope,\n                        targetBefore,\n                        targetOffset,\n\n                        isChanged  = true,\n                        isVeritcal = true,\n                        isEmpty,\n                        isSwapped,\n\n                        _scope,\n                        _target,\n                        _parent,\n                        _info      = $params.dragInfo,\n                        _move      = _info.move,\n                        _drag      = _info.node,\n                        _drop      = _info.drop,\n                        treeScope  = _info.target,\n                        fnSwapTree,\n                        isHolder   = _fnPlaceHolder(e, $params);\n\n                    if (!isHolder) {\n                        /* when using elementFromPoint() inside an iframe, you have to call\n                         elementFromPoint() twice to make sure IE8 returns the correct value*/\n                        $params.$window.document.elementFromPoint(targetX, targetY);\n\n                        targetElm = angular.element($params.$window.document.elementFromPoint(targetX, targetY));\n\n                        if (!$TreeDnDHelper.isTreeDndDroppable(targetElm)) {\n                            targetElm = $TreeDnDHelper.closestByAttr(targetElm, $TreeDnDHelper.isTreeDndDroppable);\n                        }\n\n                        if ($TreeDnDHelper.isTreeDndNode(targetElm)) {\n                            targetScope = targetElm.controller('treeDndNode').scope;\n                        } else if ($TreeDnDHelper.isTreeDndNodes(targetElm)) {\n                            targetScope = targetElm.controller('treeDndNodes').scope;\n                        } else if ($TreeDnDHelper.isTreeDndNodeHandle(targetElm)) {\n                            targetScope = targetElm.controller('treeDndNodeHandle').scope;\n                        }\n\n                        if (!targetScope || !targetScope.$callbacks || !targetScope.$callbacks.droppable()) {\n                            // Not allowed Drop Item\n                            return; // jmp out\n                        }\n\n                        fnSwapTree = function () {\n                            treeScope = targetScope.getScopeTree();\n                            _target   = _info.target;\n\n                            if (_info.target !== treeScope) {\n                                // Replace by place-holder new\n                                _target.hidePlace();\n                                _target.targeting   = false;\n                                treeScope.targeting = true;\n\n                                _info.target     = treeScope;\n                                $params.placeElm = treeScope.initPlace(targetScope.$element, $params.dragElm);\n\n                                _target   = undefined;\n                                isSwapped = true;\n                            }\n                            return true;\n                        };\n\n                        if (angular.isFunction(targetScope.getScopeNode)) {\n                            targetScope = targetScope.getScopeNode();\n                            if (!fnSwapTree()) {\n                                return; // jmp out\n                            }\n                        } else {\n                            if (targetScope.$type === 'TreeDnDNodes' || targetScope.$type === 'TreeDnD') {\n                                if (targetScope.tree_nodes) {\n                                    if (targetScope.tree_nodes.length === 0) {\n                                        if (!fnSwapTree()) {\n                                            return; // jmp out\n                                        }\n                                        // Empty\n                                        isEmpty = true;\n                                    }\n                                } else {\n                                    return; // jmp out\n                                }\n                            } else {\n                                return; // jmp out\n                            }\n                        }\n                    }\n\n                    if ($params.pos.dirAx && !isSwapped || isHolder) {\n                        isVeritcal  = false;\n                        targetScope = _info.scope;\n                    }\n\n                    if (!targetScope.$element && !targetScope) {\n                        return; // jmp out\n                    }\n\n                    if (isEmpty) {\n                        _move.parent = undefined;\n                        _move.pos    = 0;\n\n                        _drop = undefined;\n                    } else {\n                        // move vertical\n                        if (isVeritcal) {\n                            targetElm = targetScope.$element; // Get the element of tree-dnd-node\n                            if (angular.isUndefinedOrNull(targetElm)) {\n                                return; // jmp out\n                            }\n                            targetOffset = $TreeDnDHelper.offset(targetElm);\n\n                            if (targetScope.horizontal && !targetScope.isTable) {\n                                targetBefore = eventObj.pageX < targetOffset.left + $TreeDnDHelper.width(targetElm) / 2;\n                            } else {\n                                if (targetScope.isTable) {\n                                    targetBefore = eventObj.pageY < targetOffset.top + $TreeDnDHelper.height(targetElm) / 2;\n                                } else {\n                                    var _height = $TreeDnDHelper.height(targetElm);\n\n                                    if (targetScope.getElementChilds()) {\n                                        _height -= -$TreeDnDHelper.height(targetScope.getElementChilds());\n                                    }\n\n                                    if (eventObj.pageY > targetOffset.top + _height) {\n                                        return; // jmp out\n                                    }\n\n                                    targetBefore = eventObj.pageY < targetOffset.top + _height / 2;\n                                }\n                            }\n\n                            if (!angular.isFunction(targetScope.getData)) {\n                                return; // jmp out\n                            }\n\n                            _target = targetScope.getData();\n                            _parent = targetScope.getNode(_target.__parent_real__);\n\n                            if (targetBefore) {\n                                var _prev = targetScope.getPrevSibling(_target);\n\n                                _move.parent = _parent;\n                                _move.pos    = angular.isDefined(_prev) ? _prev.__index__ + 1 : 0;\n\n                                _drop = _prev;\n                            } else {\n                                if (_target.__expanded__ && !(_target.__children__.length === 1 && _target.__index_real__ === _drag.__parent_real__)) {\n                                    _move.parent = _target;\n                                    _move.pos    = 0;\n\n                                    _drop = undefined;\n                                } else {\n                                    _move.parent = _parent;\n                                    _move.pos    = _target.__index__ + 1;\n\n                                    _drop = _target;\n                                }\n                            }\n                        } else {\n                            // move horizontal\n                            if ($params.pos.dirAx && $params.pos.distAxX >= treeScope.dragBorder) {\n                                $params.pos.distAxX = 0;\n                                // increase horizontal level if previous sibling exists and is not collapsed\n                                if ($params.pos.distX > 0) {\n                                    _parent = _drop;\n                                    if (!_parent) {\n                                        if (_move.pos - 1 >= 0) {\n                                            _parent = _move.parent.__children__[_move.pos - 1];\n                                        } else {\n                                            return; // jmp out\n                                        }\n                                    }\n\n                                    if (_info.drag === _info.target && _parent === _drag && _$scope.enabledMove) {\n                                        _parent = treeScope.getPrevSibling(_parent);\n                                    }\n\n                                    if (_parent && _parent.__visible__) {\n                                        var _len = _parent.__children__.length;\n\n                                        _move.parent = _parent;\n                                        _move.pos    = _len;\n\n                                        if (_len > 0) {\n                                            _drop = _parent.__children__[_len - 1];\n                                        } else {\n                                            _drop = undefined;\n                                        }\n                                    } else {\n                                        // Not changed\n                                        return; // jmp out\n                                    }\n                                } else if ($params.pos.distX < 0) {\n                                    _target = _move.parent;\n                                    if (_target &&\n                                        (_target.__children__.length === 0 ||\n                                            _target.__children__.length - 1 < _move.pos ||\n                                            _info.drag === _info.target &&\n                                            _target.__index_real__ === _drag.__parent_real__ &&\n                                            _target.__children__.length - 1 === _drag.__index__ && _$scope.enabledMove)\n                                    ) {\n                                        _parent = treeScope.getNode(_target.__parent_real__);\n\n                                        _move.parent = _parent;\n                                        _move.pos    = _target.__index__ + 1;\n\n                                        _drop = _target;\n                                    } else {\n                                        // Not changed\n                                        return; // jmp out\n                                    }\n                                } else {\n                                    return; // jmp out\n                                }\n                            } else {\n                                // limited\n                                return;\n                            }\n                        }\n                    }\n\n                    if (_info.drag === _info.target &&\n                        _move.parent &&\n                        _drag.__parent_real__ === _move.parent.__index_real__ &&\n                        _drag.__index__ === _move.pos\n                    ) {\n                        isChanged = false;\n                    }\n\n                    if (treeScope.$callbacks.accept(_info, _move, isChanged)) {\n                        _info.move    = _move;\n                        _info.drop    = _drop;\n                        _info.changed = isChanged;\n                        _info.scope   = targetScope;\n\n                        if (targetScope.isTable) {\n                            $TreeDnDHelper.replaceIndent(\n                                treeScope,\n                                $params.placeElm,\n                                angular.isUndefinedOrNull(_move.parent) ? 1 : _move.parent.__level__ + 1\n                            );\n\n                            if (_drop) {\n                                _parent = (_move.parent ? _move.parent.__children__ : undefined) || _info.target.treeData;\n\n                                if (_drop.__index__ < _parent.length - 1) {\n                                    // Find fast\n                                    _drop  = _parent[_drop.__index__ + 1];\n                                    _scope = _info.target.getScope(_drop);\n                                    _scope.$element[0].parentNode.insertBefore(\n                                        $params.placeElm[0],\n                                        _scope.$element[0]\n                                    );\n                                } else {\n                                    _target = _info.target.getLastDescendant(_drop);\n                                    _scope  = _info.target.getScope(_target);\n                                    _scope.$element.after($params.placeElm);\n                                }\n                            } else {\n                                _scope = _info.target.getScope(_move.parent);\n                                if (_scope) {\n                                    if (_move.parent) {\n                                        _scope.$element.after($params.placeElm);\n\n                                    } else {\n                                        _scope.getElementChilds().prepend($params.placeElm);\n                                    }\n                                }\n                            }\n                        } else {\n                            _scope = _info.target.getScope(_drop || _move.parent);\n                            if (_drop) {\n                                _scope.$element.after($params.placeElm);\n                            } else {\n                                _scope.getElementChilds().prepend($params.placeElm);\n                            }\n                        }\n\n                        treeScope.showPlace();\n\n                        _$scope.$safeApply(function () {\n                            _$scope.$callbacks.dragMove(_info);\n                        });\n                    }\n\n                }\n            }\n\n            function _fnDragEnd(e, $params) {\n                e.preventDefault();\n                if ($params.dragElm) {\n                    var _passed  = false,\n                        _$scope  = $params.$scope,\n                        _scope   = _$scope.getScope($params.dragInfo.node),\n                        _element = _scope.$element;\n\n                    _$scope.$safeApply(function () {\n                        _passed = _$scope.$callbacks.beforeDrop($params.dragInfo);\n                    });\n\n                    // rollback all\n                    if (_scope.isTable) {\n                        _$scope.for_all_descendants(\n                            $params.dragInfo.node, function (_node, _parent) {\n                                _scope   = _$scope.getScope(_node);\n                                _element = _scope && _scope.$element;\n                                if (_scope && _element && (!_parent && _node.__visible__ || _parent.__expanded__)) {\n                                    if (_$scope.$class.hidden) {\n                                        _element.removeClass(_$scope.$class.hidden);\n                                    }\n                                }\n                                return _node.__visible__ === false || _node.__expanded__ === false;\n                            },\n                            undefined,\n                            true\n                        );\n                    } else {\n                        if (_$scope.$class.hidden) {\n                            _element.removeClass(_$scope.$class.hidden);\n                        }\n                    }\n\n                    $params.dragElm.remove();\n                    $params.dragElm = undefined;\n\n                    if (_$scope.enabledStatus) {\n                        _$scope.hideStatus();\n                    }\n\n                    if (_$scope.$$apply) {\n                        _$scope.$safeApply(function () {\n                            var _status = _$scope.$callbacks.dropped(\n                                $params.dragInfo,\n                                _passed\n                            );\n\n                            _$scope.$callbacks.dragStop($params.dragInfo, _status);\n                            clearData();\n                        });\n                    } else {\n                        _fnBindDrag($params);\n\n                        _$scope.$safeApply(function () {\n                            _$scope.$callbacks.dragStop($params.dragInfo, false);\n                            clearData();\n                        });\n                    }\n\n                }\n\n                function clearData() {\n                    $params.dragInfo.target.hidePlace();\n                    $params.dragInfo.target.targeting = false;\n\n                    $params.dragInfo = undefined;\n                    _$scope.$$apply  = false;\n                    _$scope.setDragging(undefined);\n                }\n\n                angular.element($params.$document).unbind('touchend', $params.dragEndEvent); // Mobile\n                angular.element($params.$document).unbind('touchcancel', $params.dragEndEvent); // Mobile\n                angular.element($params.$document).unbind('touchmove', $params.dragMoveEvent); // Mobile\n                angular.element($params.$document).unbind('mouseup', $params.dragEndEvent);\n                angular.element($params.$document).unbind('mousemove', $params.dragMoveEvent);\n                angular.element($params.$window.document.body).unbind('mouseleave', $params.dragCancelEvent);\n            }\n\n            function _fnDragStartEvent(e, $params) {\n                if ($params.$scope.$callbacks.draggable()) {\n                    _fnDragStart(e, $params);\n                }\n            }\n\n            function _fnBindDrag($params) {\n                $params.element.bind('touchstart mousedown', function (e) {\n                    $params.dragDelaying = true;\n                    $params.dragStarted  = false;\n\n                    _fnDragStartEvent(e, $params);\n\n                    $params.dragTimer = $timeout(\n                        function () {\n                            $params.dragDelaying = false;\n                        },\n                        $params.$scope.dragDelay\n                    );\n                });\n\n                $params.element.bind('touchend touchcancel mouseup', function () {\n                    $timeout.cancel($params.dragTimer);\n                });\n            }\n\n            function _fnKeydownHandler(e, $params) {\n                var _$scope = $params.$scope;\n                if (e.keyCode === 27) {\n                    if (_$scope.enabledStatus) {\n                        _$scope.hideStatus();\n                    }\n\n                    _$scope.$$apply = false;\n                    _fnDragEnd(e, $params);\n                } else {\n                    if (_$scope.enabledHotkey && e.shiftKey) {\n                        _$scope.enableMove(true);\n                        if (_$scope.enabledStatus) {\n                            _$scope.refreshStatus();\n                        }\n\n                        if (!$params.dragInfo) {\n                            return; // jmp out\n                        }\n\n                        var _scope   = _$scope.getScope($params.dragInfo.node),\n                            _element = _scope.$element;\n\n                        if (_scope.isTable) {\n                            _$scope.for_all_descendants(\n                                $params.dragInfo.node,\n                                function (_node, _parent) {\n                                    _scope   = _$scope.getScope(_node);\n                                    _element = _scope && _scope.$element;\n                                    if (_scope && _element && (!_parent && _node.__visible__ || _parent.__expanded__)) {\n                                        if (_$scope.$class.hidden) {\n                                            _element.addClass(_$scope.$class.hidden);\n                                        }\n                                    }\n\n                                    return _node.__visible__ === false || _node.__expanded__ === false;\n\n                                },\n                                undefined,\n                                true\n                            );\n                        } else {\n                            if (_$scope.$class.hidden) {\n                                _element.addClass(_$scope.$class.hidden);\n                            }\n                        }\n                    }\n                }\n            }\n\n            function _fnKeyupHandler(e, $params) {\n                var _$scope = $params.$scope;\n\n                if (_$scope.enabledHotkey && !e.shiftKey) {\n                    _$scope.enableMove(false);\n\n                    if (_$scope.enabledStatus) {\n                        _$scope.refreshStatus();\n                    }\n\n                    if (!$params.dragInfo) {\n                        return; // jmp out\n                    }\n\n                    var _scope   = _$scope.getScope($params.dragInfo.node),\n                        _element = _scope.$element;\n\n                    if (_scope.isTable) {\n                        _$scope.for_all_descendants(\n                            $params.dragInfo.node,\n                            function (_node, _parent) {\n                                _scope   = _$scope.getScope(_node);\n                                _element = _scope && _scope.$element;\n                                if (_scope && _element && (!_parent && _node.__visible__ || _parent.__expanded__)) {\n                                    if (_$scope.$class.hidden) {\n                                        _element.removeClass(_$scope.$class.hidden);\n                                    }\n                                }\n                                return _node.__visible__ === false || _node.__expanded__ === false;\n                            },\n                            undefined,\n                            true\n                        );\n                    } else {\n                        if (_$scope.$class.hidden) {\n                            _element.removeClass(_$scope.$class.hidden);\n                        }\n                    }\n                }\n            }\n\n            function _$init(scope, element, $window, $document) {\n\n                var $params        = {\n                        hasTouch:        'ontouchstart' in window,\n                        firstMoving:     undefined,\n                        dragInfo:        undefined,\n                        pos:             undefined,\n                        placeElm:        undefined,\n                        dragElm:         undefined,\n                        dragDelaying:    true,\n                        dragStarted:     false,\n                        dragTimer:       undefined,\n                        body:            document.body,\n                        html:            document.documentElement,\n                        document_height: undefined,\n                        document_width:  undefined,\n                        offsetEdge:      undefined,\n                        $scope:          scope,\n                        $window:         $window,\n                        $document:       $document,\n                        element:         element,\n                        bindDrag:        function () {\n                            _fnBindDrag($params);\n                        },\n                        dragEnd:         function (e) {\n                            _fnDragEnd(e, $params);\n                        },\n                        dragMoveEvent:   function (e) {\n                            _fnDragMove(e, $params);\n                        },\n                        dragEndEvent:    function (e) {\n                            scope.$$apply = true;\n                            _fnDragEnd(e, $params);\n                        },\n                        dragCancelEvent: function (e) {\n                            _fnDragEnd(e, $params);\n                        }\n                    },\n                    keydownHandler = function (e) {\n                        return _fnKeydownHandler(e, $params);\n                    },\n                    keyupHandler   = function (e) {\n                        return _fnKeyupHandler(e, $params);\n                    };\n\n                scope.dragEnd = function (e) {\n                    $params.dragEnd(e);\n                };\n\n                $params.bindDrag();\n\n                angular.element($window.document.body).bind('keydown', keydownHandler);\n                angular.element($window.document.body).bind('keyup', keyupHandler);\n\n                //unbind handler that retains scope\n                scope.$on('$destroy', function () {\n                    angular.element($window.document.body).unbind('keydown', keydownHandler);\n                    angular.element($window.document.body).unbind('keyup', keyupHandler);\n\n                    if (scope.statusElm) {\n                        scope.statusElm.remove();\n                    }\n\n                    if (scope.placeElm) {\n                        scope.placeElm.remove();\n                    }\n                });\n            }\n\n            return _$init;\n        }\n    ]);\n\nangular.module('ntt.TreeDnD')\n    .factory('$TreeDnDControl', function () {\n\n        function fnSetCollapse(node) {\n            node.__expanded__ = false;\n        }\n\n        /**\n         * Function set expand\n         * @callback fnSetExpand\n         * @param {Node} node\n         */\n        function fnSetExpand(node) {\n            node.__expanded__ = true;\n        }\n\n        function _$init(scope) {\n            /**\n             * Object Tree with field function custom\n             *\n             * @namespace\n             * @alias $scope.tree\n             */\n            var _tree = {\n                selected_node:       undefined,\n                on_select:           undefined,\n                /**\n                 * @type {$scope.for_all_descendants}\n                 */\n                for_all_descendants: scope.for_all_descendants,\n\n                /**\n                 * Select node in tree\n                 *\n                 * @param {Node|undefined} node\n                 *\n                 * @returns {Node|undefined}\n                 */\n                select_node: function (node) {\n                    var tree = scope.tree;\n\n                    var _selected = tree.deselect_node();\n\n                    if (typeof node === 'object' && node !== _selected) {\n                        node.__selected__ = true;\n\n                        tree.selected_node = node;\n\n                        tree.expand_all_parents(node);\n\n                        if (typeof tree.on_select === 'function') {\n                            tree.on_select(node);\n                        }\n                    }\n\n                    return node;\n                },\n\n                /**\n                 * Deselect node\n                 *\n                 * @returns {Node|undefined}\n                 */\n                deselect_node: function () {\n                    var tree = scope.tree;\n\n                    var _target;\n\n                    if (typeof tree.selected_node === 'object') {\n                        tree.selected_node.__selected__ = undefined;\n\n                        delete tree.selected_node.__selected__;\n\n                        _target = tree.selected_node;\n\n                        tree.selected_node = undefined;\n                    }\n\n                    return _target;\n                },\n\n                /**\n                 * Get parent of node selecting\n                 *\n                 * @param {Node|undefined} node\n                 *\n                 * @returns {Node|undefined}\n                 */\n                get_parent: function (node) {\n                    var tree = scope.tree;\n\n                    node = node || tree.selected_node;\n\n                    if (node && node.__parent_real__ !== undefined) {\n                        return scope.tree_nodes[node.__parent_real__];\n                    }\n                },\n\n\n                /**\n                 * Foreach ancestors in node\n                 *\n                 * @param {Node|undefined} node\n                 * @param {fnSetExpand} fn - Function callback\n                 *\n                 * @returns {boolean}\n                 */\n                for_all_ancestors: function (node, fn) {\n                    var tree = scope.tree;\n\n                    var _parent = tree.get_parent(node);\n                    if (_parent) {\n                        if (fn(_parent)) {\n                            return false;\n                        }\n\n                        return tree.for_all_ancestors(_parent, fn);\n                    }\n\n                    return true;\n                },\n\n                /**\n                 * Expand all parents of node selecting\n                 *\n                 * @param {Node|undefined} node\n                 */\n                expand_all_parents: function (node) {\n                    var tree = scope.tree;\n\n                    node = node || tree.selected_node;\n\n                    if (typeof node === 'object') {\n                        tree.for_all_ancestors(node, fnSetExpand);\n                    }\n                },\n\n\n                /**\n                 * Collapse all parents of node selecting\n                 *\n                 * @param {Node|undefined} node\n                 */\n                collapse_all_parents: function (node) {\n                    var tree = scope.tree;\n\n                    node = node || tree.selected_node;\n                    if (typeof node === 'object') {\n                        tree.for_all_ancestors(node, fnSetCollapse);\n                    }\n                },\n\n                /**\n                 * Reload data in scope\n                 *\n                 * @returns {Node|Node[]|undefined}\n                 */\n                reload_data: function () {\n                    return scope.reload_data();\n                },\n\n                /**\n                 * Add node into parent\n                 *\n                 * @param {Node|Node[]|undefined} parent\n                 * @param {Node} new_node\n                 * @param {undefined|int} [index]\n                 * @param {boolean} [parent_auto_expand=false]\n                 *\n                 * @returns {Object}\n                 */\n                add_node: function (parent, new_node, index, parent_auto_expand) {\n                    if (typeof parent === 'object') {\n                        if (typeof parent.__children__ !== 'object') {\n                            parent.__children__ = [];\n                        }\n\n                        if (index >= 0) {\n                            parent.__children__.splice(index, 0, new_node);\n                        } else {\n                            parent.__children__.push(new_node);\n                        }\n\n                        if (parent_auto_expand) {\n                            parent.__expanded__ = true;\n                        }\n                    } else {\n                        if (index >= 0) {\n                            scope.treeData.splice(index, 0, new_node);\n                        } else {\n                            scope.treeData.push(new_node);\n                        }\n                    }\n\n                    return new_node;\n                },\n\n                /**\n                 * Add node into root\n                 *\n                 * @param {Node|undefined} new_node\n                 *\n                 * @returns {Node|undefined}\n                 */\n                add_node_root: function (new_node) {\n                    if (typeof new_node === 'object') {\n                        var tree = scope.tree;\n\n                        tree.add_node(undefined, new_node);\n                    }\n\n                    return new_node;\n                },\n\n                /**\n                 * Expand all node\n                 */\n                expand_all: function () {\n                    var tree = scope.tree;\n\n                    var len = scope.treeData.length;\n                    for (var i = 0; i < len; i++) {\n                        tree.for_all_descendants(scope.treeData[i], fnSetExpand);\n                    }\n                },\n\n                /**\n                 * Collapse all node\n                 */\n                collapse_all: function () {\n                    var tree = scope.tree;\n\n                    var len = scope.treeData.length;\n                    for (var i = 0; i < len; i++) {\n                        tree.for_all_descendants(scope.treeData[i], fnSetCollapse);\n                    }\n                },\n\n                /**\n                 * Remove node (or node selecting)\n                 *\n                 * @param {Node|undefined} node - If `node` is Object then delete `node` else delete `node` selecting\n                 */\n                remove_node: function (node) {\n                    var tree = scope.tree;\n\n                    node = node || tree.selected_node;\n\n                    if (typeof node === 'object') {\n                        var _parent;\n\n                        if (node.__parent_real__ !== undefined) {\n                            _parent = tree.get_parent(node).__children__;\n                        } else {\n                            _parent = scope.treeData;\n                        }\n\n                        _parent.splice(node.__index__, 1);\n\n                        tree.reload_data();\n\n                        if (tree.selected_node === node) {\n                            tree.selected_node = undefined;\n                        }\n                    }\n                },\n\n                /**\n                 * Expand node (or node selecting)\n                 *\n                 * @param {Node|undefined} node\n                 *\n                 * @returns {Node|undefined}\n                 */\n                expand_node: function (node) {\n                    var tree = scope.tree;\n\n                    node = node || tree.selected_node;\n\n                    if (typeof node === 'object') {\n                        node.__expanded__ = true;\n\n                        return node;\n                    }\n                },\n\n                /**\n                 * Collapse node (or node selecting)\n                 *\n                 * @param {Node|undefined} node\n                 *\n                 * @returns {Node|undefined}\n                 */\n                collapse_node: function (node) {\n                    var tree = scope.tree;\n\n                    node = node || tree.selected_node;\n\n                    if (typeof node === 'object') {\n                        node.__expanded__ = false;\n\n                        return node;\n                    }\n                },\n\n                /**\n                 * Get node selected\n                 *\n                 * @returns {Node|undefined}\n                 */\n                get_selected_node: function () {\n                    var tree = scope.tree;\n\n                    return tree.selected_node;\n                },\n\n                /**\n                 * Get node first in root (or selecting)\n                 *\n                 * @returns {Node|undefined}\n                 */\n                get_first_node: function () {\n                    var tree = scope.tree;\n\n                    var wrapper = tree.selected_node;\n\n                    if (wrapper === undefined) {\n                        wrapper = scope.treeData;\n                    }\n\n                    if (typeof wrapper === 'object') {\n                        var len = wrapper.length;\n\n                        if (len > 0) {\n                            return wrapper[0];\n                        }\n                    }\n                },\n\n                /**\n                 * Get children of node (or selecting)\n                 *\n                 * @param {Node|undefined} node\n                 *\n                 * @returns {undefined|Node[]}\n                 */\n                get_children: function (node) {\n                    var tree = scope.tree;\n\n                    if (node === undefined && tree.selected_node === undefined) {\n                        return tree.treeData;\n                    }\n\n                    node = node || tree.selected_node;\n\n                    if (typeof node === 'object' && node.__children__ !== undefined) {\n                        return node.__children__;\n                    }\n                },\n\n                /**\n                 * Get siblings\n                 *\n                 * @param {Node|undefined} node\n                 *\n                 * @returns {undefined|Node[]}\n                 */\n                get_siblings: function (node) {\n                    var tree = scope.tree;\n\n                    node = node || tree.selected_node;\n                    if (typeof node === 'object') {\n                        var _parent = tree.get_parent(node),\n                            _target;\n\n                        if (_parent) {\n                            _target = _parent.__children__;\n                        } else {\n                            _target = scope.treeData;\n                        }\n\n                        return _target;\n                    }\n                },\n\n                /**\n                 * Get next sibling\n                 *\n                 * @param {Node|undefined} node\n                 *\n                 * @returns {Node|undefined}\n                 */\n                get_next_sibling: function (node) {\n                    var tree = scope.tree;\n\n                    node = node || tree.selected_node;\n                    if (typeof node === 'object') {\n                        var _target = tree.get_siblings(node);\n\n                        var n = _target.length;\n\n                        if (node.__index__ < n) {\n                            return _target[node.__index__ + 1];\n                        }\n                    }\n                },\n\n                /**\n                 * Get previous sibling\n                 *\n                 * @param {Node|undefined} node\n                 *\n                 * @returns {Node|undefined}\n                 */\n                get_prev_sibling: function (node) {\n                    var tree = scope.tree;\n\n                    node = node || tree.selected_node;\n\n                    var _target = tree.get_siblings(node);\n\n                    if (node.__index__ > 0) {\n                        return _target[node.__index__ - 1];\n                    }\n                },\n\n                /**\n                 * Get first child\n                 *\n                 * @param {Node|undefined} node\n                 *\n                 * @returns {Node|undefined}\n                 */\n                get_first_child: function (node) {\n                    var tree = scope.tree;\n\n                    node = node || tree.selected_node;\n                    if (typeof node === 'object') {\n                        var _target = node.__children__;\n\n                        if (_target && _target.length > 0) {\n                            return node.__children__[0];\n                        }\n                    }\n                },\n\n                /**\n                 * Get closest ancestor next sibling\n                 *\n                 * @param {Node|undefined} node\n                 *\n                 * @returns {Node|undefined}\n                 */\n                get_closest_ancestor_next_sibling: function (node) {\n                    var tree = scope.tree;\n\n                    node = node || tree.selected_node;\n\n                    var _target = tree.get_next_sibling(node);\n                    if (_target) {\n                        return _target;\n                    }\n\n                    var _parent = tree.get_parent(node);\n                    if (_parent) {\n                        return tree.get_closest_ancestor_next_sibling(_parent);\n                    }\n                },\n\n                /**\n                 * Get next node\n                 *\n                 * @param {Node|undefined} node\n                 *\n                 * @returns {Node|undefined}\n                 */\n                get_next_node: function (node) {\n                    var tree = scope.tree;\n\n                    node = node || tree.selected_node;\n\n                    if (typeof node === 'object') {\n                        var _target = tree.get_first_child(node);\n\n                        if (_target) {\n                            return _target;\n                        } else {\n                            return tree.get_closest_ancestor_next_sibling(node);\n                        }\n                    }\n                },\n\n                /**\n                 * Get previous node\n                 *\n                 * @param {Node|undefined} node\n                 *\n                 * @returns {Node|undefined}\n                 */\n                get_prev_node:       function (node) {\n                    var tree = scope.tree;\n\n                    node = node || tree.selected_node;\n\n                    if (typeof node === 'object') {\n                        var _target = tree.get_prev_sibling(node);\n\n                        if (_target) {\n                            return tree.get_last_descendant(_target);\n                        }\n\n                        return tree.get_parent(node);\n                    }\n                },\n                get_last_descendant: scope.getLastDescendant,\n\n                /**\n                 * Select parent node\n                 *\n                 * @param {Node|undefined} node\n                 *\n                 * @returns {Node|undefined}\n                 */\n                select_parent_node: function (node) {\n                    var tree = scope.tree;\n\n                    node = node || tree.selected_node;\n\n                    if (typeof node === 'object') {\n                        var _parent = tree.get_parent(node);\n\n                        if (_parent) {\n                            return tree.select_node(_parent);\n                        }\n                    }\n                },\n\n                /**\n                 * Select first node\n                 *\n                 * @returns {Node|undefined}\n                 */\n                select_first_node: function () {\n                    var tree = scope.tree;\n\n                    var firstNode = tree.get_first_node();\n\n                    return tree.select_node(firstNode);\n                },\n\n                /**\n                 * Select next sibling\n                 *\n                 * @param {Node|undefined} node\n                 *\n                 * @returns {Node|undefined}\n                 */\n                select_next_sibling: function (node) {\n                    var tree = scope.tree;\n\n                    node = node || tree.selected_node;\n\n                    if (typeof node === 'object') {\n                        var _target = tree.get_next_sibling(node);\n\n                        if (_target) {\n                            return tree.select_node(_target);\n                        }\n                    }\n                },\n\n                /**\n                 * Select previous sibling\n                 *\n                 * @param {Node|undefined} node\n                 *\n                 * @returns {*|Object}\n                 */\n                select_prev_sibling: function (node) {\n                    var tree = scope.tree;\n\n                    node = node || tree.selected_node;\n\n                    if (typeof node === 'object') {\n                        var _target = tree.get_prev_sibling(node);\n\n                        if (_target) {\n                            return tree.select_node(_target);\n                        }\n                    }\n                },\n\n                /**\n                 * Select next node\n                 *\n                 * @param {Node|undefined} node\n                 *\n                 * @returns {Node|undefined}\n                 */\n                select_next_node: function (node) {\n                    var tree = scope.tree;\n\n                    node = node || tree.selected_node;\n\n                    if (typeof node === 'object') {\n                        var _target = tree.get_next_node(node);\n\n                        if (_target) {\n                            return tree.select_node(_target);\n                        }\n                    }\n                },\n\n                /**\n                 * Select previous node\n                 *\n                 * @param {Node|undefined} node\n                 *\n                 * @returns {Node|undefined}\n                 */\n                select_prev_node: function (node) {\n                    var tree = scope.tree;\n\n                    node = node || tree.selected_node;\n\n                    if (typeof node === 'object') {\n                        var _target = tree.get_prev_node(node);\n\n                        if (_target) {\n                            return tree.select_node(_target);\n                        }\n                    }\n                }\n            };\n\n            return _tree;\n        }\n\n        return _$init;\n    });\n\nangular.module('template/TreeDnD/TreeDnD.html', []).run(\n    ['$templateCache', function ($templateCache) {\n        $templateCache.put(\n            'template/TreeDnD/TreeDnD.html',\n            '<table ng-class=\"$tree_class\">' +\n            '   <thead>' +\n            '       <tr>' +\n            '           <th ng-class=\"expandingProperty.titleClass\" ng-style=\"expandingProperty.titleStyle\">' +\n            '               {{expandingProperty.displayName || expandingProperty.field || expandingProperty}}' +\n            '           <\\/th>' +\n            '           <th ng-repeat=\"col in colDefinitions\" ng-class=\"col.titleClass\" ng-style=\"col.titleStyle\">' +\n            '               {{col.displayName || col.field}}' +\n            '           </th>' +\n            '       </tr>' +\n            '   </thead>' +\n            '   <tbody tree-dnd-nodes>' +\n            '       <tr tree-dnd-node=\"node\" ng-repeat=\"node in tree_nodes track by node.__hashKey__\" ' +\n            '           ng-if=\"(node.__inited__ || node.__visible__)\"' +\n            '           ng-click=\"onSelect(node)\" ' +\n            '           ng-class=\"(node.__selected__ ? \\' active\\':\\'\\')\">' +\n            '           <td tree-dnd-node-handle' +\n            '               ng-style=\"expandingProperty.cellStyle ? expandingProperty.cellStyle : {\\'padding-left\\': $callbacks.calsIndent(node.__level__)}\"' +\n            '               ng-class=\"expandingProperty.cellClass\"' +\n            '               compile=\"expandingProperty.cellTemplate\">' +\n            '               <a data-nodrag>' +\n            '                  <i ng-class=\"node.__icon_class__\" ng-click=\"toggleExpand(node)\" class=\"tree-icon\"></i>' +\n            '               </a>' +\n            '               {{node[expandingProperty.field] || node[expandingProperty]}}' +\n            '           </td>' +\n            '           <td ng-repeat=\"col in colDefinitions\" ng-class=\"col.cellClass\" ng-style=\"col.cellStyle\" compile=\"col.cellTemplate\">' +\n            '               {{node[col.field]}}' +\n            '           </td>' +\n            '       </tr>' +\n            '   </tbody>' +\n            '</table>'\n        );\n\n        $templateCache.put(\n            'template/TreeDnD/TreeDnDStatusCopy.html',\n            '<label><i class=\"fa fa-copy\"></i>&nbsp;<b>Copying</b></label>'\n        );\n\n        $templateCache.put(\n            'template/TreeDnD/TreeDnDStatusMove.html',\n            '<label><i class=\"fa fa-file-text\"></i>&nbsp;<b>Moving</b></label>'\n        );\n    }]\n);\n\n    function isUndefinedOrNull(val) {\n        return angular.isUndefined(val) || val === null;\n    }\n\n    function isDefined(val) {\n        return !(angular.isUndefined(val) || val === null);\n    }\n})();"]}