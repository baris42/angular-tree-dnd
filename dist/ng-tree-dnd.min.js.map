{"version":3,"sources":["ng-tree-dnd.js"],"names":["fnInitTreeDnDViewport","$window","$document","$timeout","$q","$compile","viewport","updateTimeout","renderTime","isUpdating","isRender","updateAgain","items","$initViewport","setViewport","element","getViewport","add","scope","updateDelayed","push","setTemplate","template","getItems","eWindow","angular","on","update","width","prop","document","documentElement","clientWidth","height","clientHeight","top","body","scrollTop","left","scrollLeft","recursivePromise","number","length","splice","cancel","fnInitTreeDnD","$http","$parse","$templateCache","$TreeDnDTemplate","$TreeDnDClass","$TreeDnDHelper","$TreeDnDPlugin","$TreeDnDViewport","restrict","replace","controller","$scope","$element","$attrs","indent","indent_plus","indent_unit","$tree_class","primary_key","$type","colDefinitions","$globals","$class","copy","extend","icon","1","iconExpand","0","iconCollapse","-1","iconLeaf","treeData","tree_nodes","for_all_descendants","node","fn","parent","checkSibling","isFunction","_i","_len","_nodes","__children__","getLastDescendant","last_child","n","tree","selected_node","isArray","getElementChilds","querySelector","onClick","isDefined","on_click","setTimeout","onSelect","select_node","on_select","toggleExpand","fnCallback","passedExpand","$callbacks","expand","__expanded__","_fnGetHash","__parent__","getHash","setHash","_hashKey","isUndefinedOrNull","__hashKey__","accept","dropEnabled","calsIndent","level","skipUnit","skipEdge","unit","edge","droppable","draggable","dragEnabled","beforeDrop","changeKey","_key","__uid__","Math","random","__selected__","clone","_clone","this","remove","_this","delayReload","temp","__index__","reload_data","clearInfo","__inited__","__visible__","pos","deleteScope","_hash","setScope","getScope","enableDrag","enableDrop","placeElm","undefined","horizontal","dragDelay","enabledMove","statusMove","enabledHotkey","enabledCollapse","statusElm","dragging","beforeDrag","dragStop","info","passed","changed","drag","target","dropped","_nodeAdd","_parent","_node","_move","move","_parentRemove","_parentAdd","isMove","dragStart","event","dragMove","setDragging","dragInfo","enableMove","val","enableStatus","enabledStatus","hideStatus","addClass","hidden","refreshStatus","statusElmOld","getMove","getCopy","attr","find","append","removeClass","setPositionStatus","e","css","pageX","pageY","z-index","status","targeting","getPrevSibling","_index","__parent_real__","getNode","index","initPlace","dragElm","isTable","createElement","_len_down","empty","place","parentNode","insertBefore","hidePlace","showPlace","getScopeTree","$safeApply","phase","$root","$$phase","$apply","hiddenChild","nodeScope","_fnInitFilter","_fnInitOrderBy","_fnGetControl","w","i","len","_curW","_typeW","_nameW","_defaultW","_scopeW","_NotW","_AfterW","_BeforeW","timeReloadData","tmpTreeData","_defaultFilterOption","showParent","showChild","beginAnd","_watches","isHotkey","templateCopy","_url","get","setCopy","templateMove","setMove","treeClass","test","trim","getExpandOn","expandOn","expandingProperty","treeControl","getColDefs","colDefs","orderBy","filters","_passed","_iF","_keysF","Object","keys","_lenF","enabledFilter","option","filterOptions","primaryKey","indentUnit","optCallbacks","forEach","value","key","lenW","check_exist_attr","generateWatch","$watch","equals","timeLoadData","attrs","existAttr","isAnd","isUndefined","exist","for_each_attrs","type","nameAttr","valDefault","nameScope","fnNotExist","fnAfter","fnBefore","indexOf","_firstNode","_keys","_regex","RegExp","_col_defs","field","do_f","root","parent_real","visible","_icon","_index_real","_dept","expandLevel","__index_real__","__level__","__icon__","__icon_class__","__dept__","init_data","data","_data","_tree_nodes","columnDefs","filter","updateLimit","$TreeLimit","compile","tElement","$_Template","_element","html","_fnInitDrag","ready","checkTreeTable","attrInclude","elemNode","treeInclude","cache","then","response","tempDiv","innerHTML","templateNode","promiseCheck","templateUrl","getPath","module","constant","nodes","handle","factory","line2tree","parentKey","callback","parentId","rootIds","item","_primary","treeObjs","console","error","log","tree2tree","access_child","containKey","_copy","_child","_tree","_$helper","nodrag","targetElm","eventObj","obj","targetTouches","originalEvent","getData","drop","offset","boundingClientRect","getBoundingClientRect","pageYOffset","pageXOffset","positionStarted","offsetX","offsetY","startX","lastX","startY","lastY","nowX","nowY","distX","distY","dirAx","dirX","dirY","lastDirX","lastDirY","distAxX","distAxY","positionMoved","firstMoving","newAx","abs","moving","replaceIndent","children","isTreeDndNode","isTreeDndNodes","isTreeDndNodeHandle","isTreeDndDroppable","closestByAttr","fnClosestByAttr","$parent","isPassed","$injector","name","has","scopes","path","$id","movePath","copyPath","$inject","directive","link","new_val","compileReplace","replaceWith","$node_class","childsElem","enabledDnD","keyNode","treeDndNode","getScopeNode","objexpr","objprops","keyO","lenO","hashKey","skipAttr","keepAttr","lenKeep","join","newVal","oldVal","nodeOf","_childs","$on","$nodes_class","$filter","options","keyChild","_filter","_fnConvert","_state","_fnBeforeClear","_fnAfter","filter_index","_fnBefore","fieldChild","parentPassed","_nodePassed","_childPassed","_filter_index","_fnCheck","err","_fnProcess","condition","conditions","for_each_filter","_iO","_keysO","_lenO","_callback","isNodePassed","isChildPassed","isParentPassed","__filtered__","__filtered_visible__","__filtered_index__","_fnOrderBy","fnOrderBy","_fnOrder","list","isString","_fnDragMove","$params","_$scope","dragStarted","preventDefault","getSelection","removeAllRanges","selection","leftElmPos","topElmPos","document_height","document_width","offsetEdge","top_scroll","window","bottom_scroll","innerHeight","scrollBy","targetScope","targetBefore","targetOffset","isEmpty","isSwapped","_scope","_target","fnSwapTree","targetX","targetY","isChanged","isVeritcal","_info","_drag","_drop","treeScope","isHolder","_offset","_fnPlaceHolder","elementFromPoint","_height","_prev","dragBorder","after","prepend","dragDelaying","_fnDragEnd","$$apply","_status","clearData","_fnBindDrag","unbind","dragEndEvent","dragMoveEvent","dragCancelEvent","_fnDragStartEvent","hasTouch","button","which","uiTreeDragging","eventScope","eventElm","dragScope","eventElmTagName","toLowerCase","_tbody","_frag","_width","_needCollapse","_copied","createDocumentFragment","bind","max","scrollHeight","offsetHeight","scrollWidth","offsetWidth","_fnDragStart","dragTimer","bindDrag","dragEnd","keydownHandler","keyCode","shiftKey","_fnKeydownHandler","keyupHandler","_fnKeyupHandler","fnSetCollapse","fnSetExpand","_selected","deselect_node","expand_all_parents","get_parent","for_all_ancestors","collapse_all_parents","add_node","new_node","parent_auto_expand","add_node_root","expand_all","collapse_all","remove_node","expand_node","collapse_node","get_selected_node","get_first_node","wrapper","get_children","get_siblings","get_next_sibling","get_prev_sibling","get_first_child","get_closest_ancestor_next_sibling","get_next_node","get_prev_node","get_last_descendant","select_parent_node","select_first_node","firstNode","select_next_sibling","select_prev_sibling","select_next_node","select_prev_node","run","put"],"mappings":"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","file":"ng-tree-dnd.min.js","sourcesContent":["/**\n * The MIT License (MIT)\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to\n * deal in the Software without restriction, including without limitation the\n * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n * sell copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS\n * IN THE SOFTWARE.\n * @preserve\n */\n\n/**\n * Implementing TreeDnD & Event DrapnDrop (allow drag multi tree-table include all type: table, ol, ul)\n * Demo: http://thienhung1989.github.io/angular-tree-dnd\n * Github: https://github.com/thienhung1989/angular-tree-dnd\n * @version 3.0.9\n * @preserve\n * (c) 2015 Nguyuễn Thiện Hùng - <nguyenthienhung1989@gmail.com>\n * @license\n * The MIT License (MIT)\n * \n * Copyright (c) 2015 Nguyễn Thiện Hùng\n * \n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n * \n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n * \n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n * \n */\n(function () {\n    'use strict';\n    /**\n     * @namespace angular\n     */\n\n    /**\n     * Is undefined or null\n     * @param {*} val - Value\n     * @returns {boolean}\n     */\n    angular.isUndefinedOrNull = function isUndefinedOrNull(val) {\n        return angular.isUndefined(val) || val === null;\n    };\n\n    /**\n     * Is defined\n     *\n     * @param {*} val - Value\n     * @returns {boolean}\n     */\n    angular.isDefined = function isDefined(val) {\n        return !(angular.isUndefined(val) || val === null);\n    };\n\n    /**\n     * @namespace Factory\n     * @type object\n     */\n\n    /**\n     * @constant $TreeDnDClass\n     * @type object\n     * @default\n     * @property {string} [tree=tree-dnd]           - Class tree\n     * @property {string} [empty=tree-dnd-empty]    - Class tree empty\n     * @property {string} [hidden=tree-dnd-hidden]  - Class tree hidden\n     * @property {string} [node=tree-dnd-node]      - Class tree node\n     * @property {string} [nodes=tree-dnd-nodes]    - Class tree nodes\n     * @property {string} [handle=tree-dnd-handle]  - Class tree handle\n     * @property {string} [place=tree-dnd-place]    - Class tree place\n     * @property {string} [drag=tree-dnd-drag]      - Class tree drag\n     * @property {string} [status=tree-dnd-status]  - Class tree status (coping, moving)\n     * @property {object} icon\n     */\n    angular.module('ntt.TreeDnD', ['template/TreeDnD/TreeDnD.html'])\n        .constant('$TreeDnDClass', {\n            tree:   'tree-dnd',\n            empty:  'tree-dnd-empty',\n            hidden: 'tree-dnd-hidden',\n            node:   'tree-dnd-node',\n            nodes:  'tree-dnd-nodes',\n            handle: 'tree-dnd-handle',\n            place:  'tree-dnd-placeholder',\n            drag:   'tree-dnd-drag',\n            status: 'tree-dnd-status',\n            icon:   {\n                '1':  'glyphicon glyphicon-minus',\n                '0':  'glyphicon glyphicon-plus',\n                '-1': 'glyphicon glyphicon-file'\n            }\n        });angular.module('ntt.TreeDnD')\n    .controller('treeDndNodeHandleController', [\n        '$scope',\n        function ($scope) {\n            this.scope = $scope;\n        }\n    ]);\n\nangular.module('ntt.TreeDnD')\n    .controller('treeDndNodeController', [\n        '$scope',\n        function ($scope) {\n            this.scope = $scope;\n        }\n    ]);\n\nangular.module('ntt.TreeDnD')\n    .controller('treeDndNodesController', [\n        '$scope',\n        function ($scope) {\n            this.scope = $scope;\n        }\n    ]);\n\n/**\n * Factory $TreeDnDConvert\n *\n * @name Factory.$TreeDnDConvert\n * @type {$TreeDnDConvert}\n */\nangular.module('ntt.TreeDnD')\n    .factory('$TreeDnDConvert', function () {\n        /**\n         * NodeBase\n         * @name NodeBase\n         * @type object\n         * @property {NodeBase[]|undefined} [__children__]\n         */\n\n        /**\n         * @name $TreeDnDConvert\n         * @type object\n         * @default\n         */\n        var $TreeDnDConvert = {\n            /**\n             * Line to tree\n             *\n             * @param {Array|Object} data\n             * @param {string} primaryKey\n             * @param {string} parentKey\n             * @param {function} callback\n             * @returns {NodeBase[]}\n             */\n            line2tree: function (data, primaryKey, parentKey, callback) {\n                callback = typeof callback === 'function' ? callback : function () {\n                };\n\n                if (!data || data.length === 0 || !primaryKey || !parentKey) {\n                    return [];\n                }\n\n                var tree     = [],\n                    rootIds  = [],\n                    item     = data[0],\n                    _primary = item[primaryKey],\n                    treeObjs = {},\n                    parentId, parent,\n                    len      = data.length,\n                    i        = 0;\n\n                while (i < len) {\n                    item = data[i++];\n                    callback(item);\n                    _primary           = item[primaryKey];\n                    treeObjs[_primary] = item;\n                }\n\n\n                i = 0;\n                while (i < len) {\n                    item = data[i++];\n\n                    callback(item);\n\n                    _primary           = item[primaryKey];\n                    treeObjs[_primary] = item;\n                    parentId           = item[parentKey];\n\n                    if (parentId) {\n                        parent = treeObjs[parentId];\n                        if (parent) {\n                            if (parent.__children__) {\n                                if (angular.isArray(parent.__children__)) {\n                                    parent.__children__.push(item);\n                                } else {\n                                    console.error('Type of `parent.__children__` isn\\'t array');\n                                    console.log(parent.__children__);\n                                }\n                            } else {\n                                parent.__children__ = [item];\n                            }\n                        }\n                    } else {\n                        rootIds.push(_primary);\n                    }\n                }\n\n                len = rootIds.length;\n                for (i = 0; i < len; i++) {\n                    tree.push(treeObjs[rootIds[i]]);\n                }\n\n                return tree;\n            },\n            /**\n             * Convert tree to tree\n             *\n             * @param {array|object} data\n             * @param {string} containKey\n             * @param {function} callback\n             * @returns {NodeBase[]}\n             */\n            tree2tree: function access_child(data, containKey, callback) {\n                callback = typeof callback === 'function' ? callback : function () {\n                };\n\n                var _tree = [],\n                    _i,\n                    _len  = data ? data.length : 0,\n                    _copy, _child;\n\n                for (_i = 0; _i < _len; _i++) {\n                    _copy = angular.copy(data[_i]);\n\n                    callback(_copy);\n\n                    if (angular.isArray(_copy[containKey]) && _copy[containKey].length > 0) {\n                        _child = access_child(_copy[containKey], containKey, callback);\n                        delete _copy[containKey];\n                        _copy.__children__ = _child;\n                    }\n\n                    _tree.push(_copy);\n                }\n\n                return _tree;\n            }\n        };\n\n        return $TreeDnDConvert;\n    });\n\n/**\n * Factory $TreeDnDHelper\n * @namespace $TreeDnDHelper\n * @name $TreeDnDHelper\n */\nangular.module('ntt.TreeDnD')\n    .factory('$TreeDnDHelper', [\n        '$document', '$window',\n        function ($document, $window) {\n            var _$helper = /** @lends $TreeDnDHelper */ {\n                /**\n                 * Status is no draggable\n                 *\n                 * @param {DOMElement} targetElm\n                 * @returns {boolean}\n                 */\n                nodrag:   function (targetElm) {\n                    return typeof targetElm.attr('data-nodrag') !== 'undefined';\n                },\n                /**\n                 *\n                 * Get event's object\n                 * @param {object} e\n                 * @returns {object|null}\n                 */\n                eventObj: function (e) {\n                    var obj = e;\n\n                    if (e.targetTouches !== undefined) {\n                        obj = e.targetTouches.item(0);\n                    } else if (e.originalEvent !== undefined && e.originalEvent.targetTouches !== undefined) {\n                        obj = e.originalEvent.targetTouches.item(0);\n                    }\n\n                    return obj;\n                },\n\n                /**\n                 * Get drag info\n                 *\n                 * @param {$scope} scope\n                 * @returns {object}\n                 */\n                dragInfo: function (scope) {\n                    var _node   = scope.getData(),\n                        _tree   = scope.getScopeTree(),\n                        _parent = scope.getNode(_node.__parent_real__);\n\n                    return {\n                        node:    _node,\n                        parent:  _parent,\n                        move:    {\n                            parent: _parent,\n                            pos:    _node.__index__\n                        },\n                        scope:   scope,\n                        target:  _tree,\n                        drag:    _tree,\n                        drop:    scope.getPrevSibling(_node),\n                        changed: false\n                    };\n                },\n\n                /**\n                 * Get element's height\n                 *\n                 * @param {DOMElement} element\n                 * @returns {number}\n                 */\n                height: function (element) {\n                    return element.prop('scrollHeight');\n                },\n\n                /**\n                 * Get element's width\n                 *\n                 * @param {DOMElement} element\n                 * @returns {number}\n                 */\n                width: function (element) {\n                    return element.prop('scrollWidth');\n                },\n\n                /**\n                 * Get element's offset\n                 *\n                 * @param {DOMElement} element\n                 * @returns {{width: *, height: *, top: *, left: *}}\n                 */\n                offset: function (element) {\n                    var boundingClientRect = element[0].getBoundingClientRect();\n\n                    return {\n                        width:  element.prop('offsetWidth'),\n                        height: element.prop('offsetHeight'),\n                        top:    boundingClientRect.top + ($window.pageYOffset || $document[0].body.scrollTop || $document[0].documentElement.scrollTop),\n                        left:   boundingClientRect.left + ($window.pageXOffset || $document[0].body.scrollLeft || $document[0].documentElement.scrollLeft)\n                    };\n                },\n\n                /**\n                 * Get position started of element drag or drop\n                 *\n                 * @param {Event} e\n                 * @param {DOMElement} target\n                 * @returns {ElementPosition}\n                 */\n                positionStarted: function (e, target) {\n                    /**\n                     * Element position information (when drag & drop)\n                     *\n                     * @name ElementPosition\n                     * @type {object}\n                     * @property {number} offsetX\n                     * @property {number} offsetY\n                     * @property {number} startX\n                     * @property {number} lastX\n                     * @property {number} startY\n                     * @property {number} lastY\n                     * @property {number} nowX\n                     * @property {number} nowY\n                     * @property {number} distX - Distance of X\n                     * @property {number} distY - Distance of Y\n                     * @property {number} dirAX - Direct of Ax\n                     * @property {number} dirX - Direct of X\n                     * @property {number} dirY - Direct of Y\n                     * @property {number} LastDirX - Last direct of X\n                     * @property {number} distAxX - Distance of AxX\n                     * @property {number} distAxY - Distance of AxY\n                     */\n                    var ElementPosition = {\n                        offsetX:  e.pageX - this.offset(target).left,\n                        offsetY:  e.pageY - this.offset(target).top,\n                        startX:   e.pageX,\n                        lastX:    e.pageX,\n                        startY:   e.pageY,\n                        lastY:    e.pageY,\n                        nowX:     0,\n                        nowY:     0,\n                        distX:    0,\n                        distY:    0,\n                        dirAx:    0,\n                        dirX:     0,\n                        dirY:     0,\n                        lastDirX: 0,\n                        lastDirY: 0,\n                        distAxX:  0,\n                        distAxY:  0\n                    };\n\n                    return ElementPosition;\n                },\n\n                /**\n                 * Get position moved\n                 *\n                 * @param {Event} e\n                 * @param {ElementPosition} pos\n                 * @param {bool} firstMoving\n                 * @return {object}\n                 */\n                positionMoved: function (e, pos, firstMoving) {\n                    // mouse position last events\n                    pos.lastX = pos.nowX;\n                    pos.lastY = pos.nowY;\n\n                    // mouse position this events\n                    pos.nowX = e.pageX;\n                    pos.nowY = e.pageY;\n\n                    // distance mouse moved between events\n                    pos.distX = pos.nowX - pos.lastX;\n                    pos.distY = pos.nowY - pos.lastY;\n\n                    // direction mouse was moving\n                    pos.lastDirX = pos.dirX;\n                    pos.lastDirY = pos.dirY;\n\n                    // direction mouse is now moving (on both axis)\n                    pos.dirX = pos.distX === 0 ? 0 : pos.distX > 0 ? 1 : -1;\n                    pos.dirY = pos.distY === 0 ? 0 : pos.distY > 0 ? 1 : -1;\n\n                    // axis mouse is now moving on\n                    var newAx = Math.abs(pos.distX) > Math.abs(pos.distY) ? 1 : 0;\n\n                    // do nothing on first move\n                    if (firstMoving) {\n                        pos.dirAx  = newAx;\n                        pos.moving = true;\n\n                        return; // jmp out\n                    }\n\n                    // calc distance moved on this axis (and direction)\n                    if (pos.dirAx !== newAx) {\n                        pos.distAxX = 0;\n                        pos.distAxY = 0;\n                    } else {\n                        pos.distAxX += Math.abs(pos.distX);\n                        if (pos.dirX !== 0 && pos.dirX !== pos.lastDirX) {\n                            pos.distAxX = 0;\n                        }\n                        pos.distAxY += Math.abs(pos.distY);\n                        if (pos.dirY !== 0 && pos.dirY !== pos.lastDirY) {\n                            pos.distAxY = 0;\n                        }\n                    }\n\n                    pos.dirAx = newAx;\n\n                    return pos;\n                },\n\n                /**\n                 * Replace with indent\n                 *\n                 * @param {$scope} scope\n                 * @param {DOMElement} element\n                 * @param {number} indent\n                 * @param {string} attr\n                 */\n                replaceIndent: function (scope, element, indent, attr) {\n                    attr = attr || 'left';\n                    angular.element(element.children()[0]).css(attr, scope.$callbacks.calsIndent(indent));\n                },\n\n                /**\n                 * Is type tree node\n                 *\n                 * @param {DOMElement} element\n                 * @returns {boolean}\n                 */\n                isTreeDndNode: function (element) {\n                    if (element) {\n                        var $element = angular.element(element);\n                        return $element && $element.length && typeof $element.attr('tree-dnd-node') !== 'undefined';\n                    }\n\n                    return false;\n                },\n\n                /**\n                 * Is tree nodes (container)\n                 *\n                 * @param {DOMElement} element\n                 * @returns {boolean}\n                 */\n                isTreeDndNodes: function (element) {\n                    if (element) {\n                        var $element = angular.element(element);\n\n                        return $element && $element.length && typeof $element.attr('tree-dnd-nodes') !== 'undefined';\n                    }\n\n                    return false;\n                },\n\n                /**\n                 * Is tree node handle (element to call event drag)\n                 *\n                 * @param {DOMElement} element\n                 * @returns {boolean}\n                 */\n                isTreeDndNodeHandle: function (element) {\n                    if (element) {\n                        var $element = angular.element(element);\n\n                        return $element && $element.length && typeof $element.attr('tree-dnd-node-handle') !== 'undefined';\n                    }\n\n                    return false;\n                },\n\n                /**\n                 * Is tree droppable\n                 *\n                 * @param {DOMElement} element\n                 * @returns {boolean}\n                 */\n                isTreeDndDroppable: function (element) {\n                    return _$helper.isTreeDndNode(element)\n                        || _$helper.isTreeDndNodes(element)\n                        || _$helper.isTreeDndNodeHandle(element);\n                },\n\n                /**\n                 * Find element closest by attribute\n                 *\n                 * @param {DOMElement} element\n                 * @param {string|function} attr\n                 * @returns {DOMElement}\n                 */\n                closestByAttr: function fnClosestByAttr(element, attr) {\n                    if (element && attr) {\n                        var $element = angular.element(element),\n                            $parent  = $element.parent();\n\n                        if ($parent) {\n                            var isPassed = false;\n\n                            switch (typeof attr) {\n                                case 'function':\n                                    isPassed = attr($parent);\n                                    break;\n                                default:\n                                    isPassed = typeof $parent.attr(attr) !== 'undefined';\n                                    break;\n                            }\n\n                            if (isPassed) {\n                                return $parent;\n                            } else {\n                                return fnClosestByAttr($parent, attr);\n                            }\n                        }\n                    }\n                }\n            };\n\n            return _$helper;\n        }]\n    );\n\nangular.module('ntt.TreeDnD')\n    .factory('$TreeDnDPlugin', [\n        '$injector',\n        function ($injector) {\n            return _fnget;\n\n            function _fnget(name) {\n                if (angular.isDefined($injector) && $injector.has(name)) {\n                    return $injector.get(name);\n                }\n            }\n        }]\n    );\n\n/**\n * Factory `$TreeDnDTemplate`\n * @name Factory.$TreeDnDTemplate\n * @type {TreeDnDTemplate}\n */\nangular.module('ntt.TreeDnD')\n    .factory('$TreeDnDTemplate', [\n        '$templateCache',\n        function ($templateCache) {\n            var templatePath = 'template/TreeDnD/TreeDnD.html',\n\n                /**\n                 * @private\n                 * @type {string}\n                 */\n                copyPath     = 'template/TreeDnD/TreeDnDStatusCopy.html',\n\n                /**\n                 * @private\n                 * @type {string}\n                 */\n                movePath     = 'template/TreeDnD/TreeDnDStatusMove.html',\n\n                /**\n                 * @private\n                 * @type {object}\n                 */\n                scopes       = {};\n\n            /**\n             * TreeDnDTemplate\n             *\n             * @constructor TreeDnDTemplate\n             * @hideConstructor\n             */\n            var InitTreeDnDTemplate = /** @lends TreeDnDTemplate */ {\n                /**\n                 * Set path of template move\n                 *\n                 * @param {string} path - Path of template\n                 * @param {$scope} scope - Scope of tree\n                 */\n                setMove: function (path, scope) {\n                    if (!scopes[scope.$id]) {\n                        scopes[scope.$id] = {};\n                    }\n                    scopes[scope.$id].movePath = path;\n                },\n\n                /**\n                 * Set path of template copy\n                 *\n                 * @param {string} path - Path of template\n                 * @param {$scope} scope - Scope of tree\n                 */\n                setCopy: function (path, scope) {\n                    if (!scopes[scope.$id]) {\n                        scopes[scope.$id] = {};\n                    }\n                    scopes[scope.$id].copyPath = path;\n                },\n\n                /**\n                 * Get template's path\n                 *\n                 * @returns {string}\n                 */\n                getPath: function () {\n                    return templatePath;\n                },\n\n                /**\n                 * Get template's copy\n                 *\n                 * @param {$scope} scope - Scope of tree\n                 * @returns {string|html}\n                 */\n                getCopy: function (scope) {\n                    if (scopes[scope.$id] && scopes[scope.$id].copyPath) {\n                        var temp = $templateCache.get(scopes[scope.$id].copyPath);\n                        if (temp) {\n                            return temp;\n                        }\n                    }\n\n                    return $templateCache.get(copyPath);\n                },\n\n                /**\n                 * Get template's move\n                 *\n                 * @param {$scope} scope - Scope of tree\n                 * @returns {string|html}\n                 */\n                getMove: function (scope) {\n                    if (scopes[scope.$id] && scopes[scope.$id].movePath) {\n                        var temp = $templateCache.get(scopes[scope.$id].movePath);\n                        if (temp) {\n                            return temp;\n                        }\n                    }\n\n                    return $templateCache.get(movePath);\n                }\n            };\n\n            return InitTreeDnDTemplate;\n        }]\n    );\n\nangular.module('ntt.TreeDnD')\n    .factory('$TreeDnDViewport', fnInitTreeDnDViewport);\n\nfnInitTreeDnDViewport.$inject = ['$window', '$document', '$timeout', '$q', '$compile'];\n\nfunction fnInitTreeDnDViewport($window, $document, $timeout, $q, $compile) {\n\n    var viewport,\n        isUpdating    = false,\n        isRender      = false,\n        updateAgain   = false,\n        viewportRect,\n        items         = [],\n        nodeTemplate,\n        updateTimeout,\n        renderTime,\n        $initViewport = {\n            setViewport:   setViewport,\n            getViewport:   getViewport,\n            add:           add,\n            setTemplate:   setTemplate,\n            getItems:      getItems,\n            updateDelayed: updateDelayed\n        },\n        eWindow       = angular.element($window);\n\n    eWindow.on('load resize scroll', updateDelayed);\n\n    return $initViewport;\n\n    function update() {\n\n        viewportRect = {\n            width:  eWindow.prop('offsetWidth') || document.documentElement.clientWidth,\n            height: eWindow.prop('offsetHeight') || document.documentElement.clientHeight,\n            top:    $document[0].body.scrollTop || $document[0].documentElement.scrollTop,\n            left:   $document[0].body.scrollLeft || $document[0].documentElement.scrollLeft\n        };\n\n        if (isUpdating || isRender) {\n            updateAgain = true;\n\n            return; // jmp out\n        }\n\n        isUpdating = true;\n\n        recursivePromise();\n    }\n\n    function recursivePromise() {\n        if (isRender) {\n            return;\n        }\n\n        var number = number > 0 ? number : items.length, item;\n\n        if (number > 0) {\n            item = items[0];\n\n            isRender   = true;\n            renderTime = $timeout(function () {\n                //item.element.html(nodeTemplate);\n                //$compile(item.element.contents())(item.scope);\n\n                items.splice(0, 1);\n                isRender = false;\n                number--;\n                $timeout.cancel(renderTime);\n                recursivePromise();\n            }, 0);\n\n        } else {\n            isUpdating = false;\n            if (updateAgain) {\n                updateAgain = false;\n                update();\n            }\n        }\n\n    }\n\n    /**\n     * Check if a point is inside specified bounds\n     * @param x\n     * @param y\n     * @param bounds\n     * @returns {boolean}\n     */\n    function pointIsInsideBounds(x, y, bounds) {\n        return x >= bounds.left &&\n            y >= bounds.top &&\n            x <= bounds.left + bounds.width &&\n            y <= bounds.top + bounds.height;\n    }\n\n    /**\n     * Set the viewport element\n     *\n     * @name setViewport\n     * @param element\n     * @callback setViewport\n     * @private\n     */\n    function setViewport(element) {\n        viewport = element;\n    }\n\n    /**\n     * Return the current viewport\n     *\n     * @returns {*}\n     * @callback getViewport\n     * @private\n     */\n    function getViewport() {\n        return viewport;\n    }\n\n    /**\n     * trigger an update\n     */\n    function updateDelayed() {\n        $timeout.cancel(updateTimeout);\n\n        updateTimeout = $timeout(\n            function () {\n                update();\n            },\n            0\n        );\n    }\n\n    /**\n     * Add listener for event\n     * @param {$scope} scope\n     * @param {DOMElement} element\n     */\n    function add(scope, element) {\n        updateDelayed();\n\n        items.push({\n            element: element,\n            scope:   scope\n        });\n    }\n\n    /**\n     *\n     *\n     * @param {$scope} scope\n     * @param {string} template\n     * @callback setTemplate\n     * @private\n     */\n    function setTemplate(scope, template) {\n        nodeTemplate = template;\n    }\n\n    /**\n     * Get list of items\n     * @returns {Node[]}\n     */\n    function getItems() {\n        return items;\n    }\n}\n\nangular.module('ntt.TreeDnD')\n    .directive('compile', [\n        '$compile',\n        function ($compile) {\n            return {\n                restrict: 'A',\n                link:     function (scope, element, attrs) {\n                    scope.$watch(\n                        attrs.compile,\n                        function (new_val) {\n                            if (new_val) {\n                                if (angular.isFunction(element.empty)) {\n                                    element.empty();\n                                } else {\n                                    element.html('');\n                                }\n\n                                element.append($compile(new_val)(scope));\n                            }\n                        }\n                    );\n                }\n            };\n        }]\n    )\n    .directive('compileReplace', [\n        '$compile',\n        function ($compile) {\n            return {\n                restrict: 'A',\n                link:     function (scope, element, attrs) {\n                    scope.$watch(\n                        attrs.compileReplace,\n                        function (new_val) {\n                            if (new_val) {\n                                element.replaceWith($compile(new_val)(scope));\n                            }\n                        }\n                    );\n                }\n            };\n        }]\n    );\n\nangular.module('ntt.TreeDnD')\r    .directive('treeDndNodeHandle', function () {\r        return {\r            restrict:   'A',\r            scope:      true,\r            controller: 'treeDndNodeHandleController',\r            link:       fnLink\r        };\r\r        function fnLink(scope, element/*, attrs, controller*/) {\r            scope.$type = 'TreeDnDNodeHandle';\r            if (scope.$class.handle) {\r                element.addClass(scope.$class.handle);\r            }\r        }\r    });\n\nangular.module('ntt.TreeDnD')\n    .directive('treeDndNode', [\n        '$TreeDnDViewport',\n        function ($TreeDnDViewport) {\n            return {\n                restrict:   'A',\n                replace:    true,\n                controller: 'treeDndNodeController',\n                link:       fnLink\n            };\n\n            /**\n             * Link\n             *\n             * @param {Object} scope\n             * @param {Object} element\n             * @param {Object} attrs\n             *\n             * @private\n             */\n            function fnLink(scope, element, attrs) {\n\n                scope.$node_class = '';\n\n                if (scope.$class.node) {\n                    element.addClass(scope.$class.node);\n                    scope.$node_class = scope.$class.node;\n                }\n                var enabledDnD = typeof scope.dragEnabled === 'boolean' || typeof scope.dropEnabled === 'boolean',\n                    keyNode    = attrs.treeDndNode,\n                    childsElem;\n\n                $TreeDnDViewport.add(scope, element);\n\n                if (enabledDnD) {\n                    scope.$type = 'TreeDnDNode';\n\n                    scope.getData = function () {\n                        return scope[keyNode];\n                    };\n                }\n\n                scope.$element            = element;\n                scope[keyNode].__inited__ = true;\n\n                scope.getElementChilds = function () {\n                    return angular.element(element[0].querySelector('[tree-dnd-nodes]'));\n                };\n\n                scope.setScope(scope, scope[keyNode]);\n\n                scope.getScopeNode = function () {\n                    return scope;\n                };\n\n                var objprops = [],\n                    objexpr,\n                    i, keyO  = Object.keys(scope[keyNode]),\n                    lenO     = keyO.length,\n                    hashKey  = scope[keyNode].__hashKey__,\n                    skipAttr = [\n                        '__visible__',\n                        '__children__',\n                        '__level__',\n                        '__index__',\n                        '__index_real__',\n\n                        '__parent__',\n                        '__parent_real__',\n                        '__dept__',\n                        '__icon__',\n                        '__icon_class__'\n                    ],\n                    keepAttr = [\n                        '__expanded__'\n                    ],\n                    lenKeep  = keepAttr.length;\n\n                // skip __visible__\n                for (i = 0; i < lenO + lenKeep; i++) {\n                    if (i < lenO) {\n                        if (skipAttr.indexOf(keyO[i]) === -1) {\n                            objprops.push(keyNode + '.' + keyO[i]);\n                        }\n                    } else {\n                        if (keyO.indexOf(keepAttr[i - lenO]) === -1) {\n                            objprops.push(keyNode + '.' + keepAttr[i - lenO]);\n                        }\n                    }\n                }\n\n                objexpr = '[' + objprops.join(',') + ']';\n\n                scope.$watch(objexpr, fnWatchNode, true);\n\n                scope.$on('$destroy', function () {\n                    scope.deleteScope(scope, scope[keyNode]);\n                });\n\n                function fnWatchNode(newVal, oldVal, scope) {\n                    var nodeOf = scope[keyNode];\n\n                    if (typeof nodeOf !== 'object') {\n                        return; // jmp out\n                    }\n\n                    if (!nodeOf.__inited__) {\n                        nodeOf.__inited__ = true;\n                    }\n\n                    if (nodeOf.__hashKey__ !== hashKey) {\n                        // clear scope in $globals\n                        scope.deleteScope(scope, nodeOf);\n\n                        // add new scope into $globals\n                        scope.setScope(scope, nodeOf);\n                        hashKey = nodeOf.__hashKey__;\n                    }\n\n                    var _childs = nodeOf.__children__,\n                        _len    = _childs.length,\n                        _i;\n\n                    var _icon;\n                    if (_len === 0) {\n                        _icon = -1;\n                    } else {\n                        if (nodeOf.__expanded__) {\n                            _icon = 1;\n                        } else {\n                            _icon = 0;\n                        }\n                    }\n\n                    nodeOf.__icon__       = _icon;\n                    nodeOf.__icon_class__ = scope.$class.icon[_icon];\n\n                    if (!scope.isTable) {\n                        if (!childsElem) {\n                            childsElem = scope.getElementChilds();\n                        }\n\n                        if (nodeOf.__expanded__) {\n                            childsElem.removeClass(scope.$class.hidden);\n                        } else {\n                            childsElem.addClass(scope.$class.hidden);\n                        }\n                    }\n\n                    for (_i = 0; _i < _len; _i++) {\n                        scope.for_all_descendants(_childs[_i], scope.hiddenChild, nodeOf, true);\n                    }\n\n                }\n            }\n        }]\n    );\n\nangular.module('ntt.TreeDnD')\n    .directive('treeDndNodes', function () {\n        return {\n            restrict:   'A',\n            replace:    true,\n            controller: 'treeDndNodesController',\n            link:       fnLink\n        };\n\n        function fnLink(scope, element/*, attrs*/) {\n            scope.$type = 'TreeDnDNodes';\n\n            if (scope.$class.nodes) {\n                element.addClass(scope.$class.nodes);\n                scope.$nodes_class = scope.$class.nodes;\n            } else {\n                scope.$nodes_class = '';\n            }\n        }\n    });\n\nangular.module('ntt.TreeDnD')\n    .directive('treeDnd', fnInitTreeDnD);\n\nfnInitTreeDnD.$inject = [\n    '$timeout', '$http', '$compile', '$parse', '$window', '$document', '$templateCache',\n    '$TreeDnDTemplate', '$TreeDnDClass', '$TreeDnDHelper', '$TreeDnDPlugin', '$TreeDnDViewport'\n];\n\nfunction fnInitTreeDnD($timeout, $http, $compile, $parse, $window, $document, $templateCache,\n                       $TreeDnDTemplate, $TreeDnDClass, $TreeDnDHelper, $TreeDnDPlugin, $TreeDnDViewport) {\n    return {\n        restrict:   'E',\n        scope:      true,\n        replace:    true,\n        controller: ['$scope', '$element', '$attrs', fnController],\n        compile:    fnCompile\n    };\n\n    function fnController($scope, $element, $attrs) {\n        /**\n         * Scope of tree\n         * @namespace $scope\n         */\n\n        /**\n         * Indent basic\n         *\n         * @type {number}\n         * @default 20\n         */\n        $scope.indent = 20;\n\n        /**\n         * Indent plus each level\n         *\n         * @type {number}\n         * @default 15\n         */\n        $scope.indent_plus = 15;\n\n        /**\n         * Indent unit\n         *\n         * @type {string}\n         * @default 'px'\n         */\n        $scope.indent_unit = 'px';\n\n        /**\n         * Tree's class\n         *\n         * @type {string}\n         * @default 'table'\n         */\n        $scope.$tree_class = 'table';\n\n\n        /**\n         * Primary key\n         *\n         * @type {string}\n         * @default '__uid__'\n         */\n        $scope.primary_key = '__uid__';\n\n        /**\n         * Type of Tree\n         *\n         * @type {string}\n         * @default 'TreeDnD'\n         */\n        $scope.$type = 'TreeDnD';\n        // $scope.enabledFilter = undefined;\n        $scope.colDefinitions = [];\n        $scope.$globals       = {};\n        /**\n         * Classes status\n         * @type {Object}\n         */\n        $scope.$class = angular.copy($TreeDnDClass);\n\n        angular.extend(\n            $scope.$class.icon, {\n                '1':  $attrs.iconExpand || 'glyphicon glyphicon-minus',\n                '0':  $attrs.iconCollapse || 'glyphicon glyphicon-plus',\n                '-1': $attrs.iconLeaf || 'glyphicon glyphicon-file'\n            }\n        );\n\n        /**\n         * Tree data\n         * @type {Node[]}\n         * @default []\n         */\n        $scope.treeData = [];\n\n        /**\n         * Tree nodes\n         * @type {Node[]}\n         * @default []\n         */\n        $scope.tree_nodes = [];\n\n\n        /**\n         * Function foreach all descendants\n         * @callback $scope.for_all_descendants\n         * @param {Node} node\n         * @param {Function|$scope.for_all_descendants} fn\n         * @param {Node} [parent]\n         * @param {boolean} [checkSibling=false] Check sibling of node\n         * @returns {boolean}\n         */\n        $scope.for_all_descendants = function (node, fn, parent, checkSibling) {\n            if (angular.isFunction(fn)) {\n                var _i, _len, _nodes;\n\n                if (fn(node, parent)) {\n                    // have error or need ignore children\n                    return false;\n                }\n\n                if (typeof node !== 'object') {\n                    return false;\n                }\n\n                _nodes = node.__children__;\n                _len   = _nodes ? _nodes.length : 0;\n                for (_i = 0; _i < _len; _i++) {\n                    if (!$scope.for_all_descendants(_nodes[_i], fn, node) && !checkSibling) {\n                        // skip sibling of node checking\n                        return false;\n                    }\n                }\n            }\n\n            // succeed then continue\n            return true;\n        };\n\n        /**\n         * Get last descendant\n         *\n         * @param {Node|undefined} [node]\n         *\n         * @returns {Node|undefined}\n         */\n        $scope.getLastDescendant = function (node) {\n            var last_child, n;\n\n            if (!node && typeof $scope.tree === 'object') {\n                node = $scope.tree.selected_node;\n            }\n\n            if (typeof node === 'object') {\n                if (angular.isArray(node.__children__)) {\n\n                    n = node.__children__.length;\n\n                    if (n === 0) {\n                        return node;\n                    } else {\n                        last_child = node.__children__[n - 1];\n\n                        return $scope.getLastDescendant(last_child);\n                    }\n                }\n            }\n        };\n\n        /**\n         * Get element children\n         *\n         * @returns {Object}\n         */\n        $scope.getElementChilds = function () {\n            return angular.element($element[0].querySelector('[tree-dnd-nodes]'));\n        };\n\n        /**\n         * Event onClick, will call function [on_click]{@link $scope.tree.on_click}\n         *\n         * @param {Node|undefined} node - For node\n         */\n        $scope.onClick = function (node) {\n            if (angular.isDefined($scope.tree) && angular.isFunction($scope.tree.on_click)) {\n                // We want to detach from Angular's digest cycle so we can\n                // independently measure the time for one cycle.\n                setTimeout(\n                    function () {\n                        $scope.tree.on_click(node);\n                    },\n                    0\n                );\n            }\n        };\n\n        /**\n         * Event onSelect for node\n         *\n         * @param {Node|undefined} [node] - For node\n         */\n        $scope.onSelect = function (node) {\n            if (angular.isDefined($scope.tree)) {\n                if (node !== $scope.tree.selected_node) {\n                    $scope.tree.select_node(node);\n                }\n\n                if (angular.isFunction($scope.tree.on_select)) {\n                    setTimeout(\n                        function () {\n                            $scope.tree.on_select(node);\n                        },\n                        0\n                    );\n                }\n            }\n        };\n\n        /**\n         * Toggle Expand\n         *\n         * @param {Node|undefined} node - For node\n         * @param {Function} fnCallback\n         */\n        $scope.toggleExpand = function (node, fnCallback) {\n            if (typeof node !== 'object') {\n                return; // jmp out\n            }\n            var passedExpand;\n\n            if (angular.isFunction(fnCallback)) {\n                passedExpand = !!fnCallback(node);\n            } else if (typeof $scope.$callbacks === 'object' && angular.isFunction($scope.$callbacks.expand)) {\n                passedExpand = !!$scope.$callbacks.expand(node);\n            }\n\n            // just for node has children\n            if (node.__children__.length > 0) {\n                if (typeof passedExpand !== 'undefined') {\n                    node.__expanded__ = passedExpand;\n                } else {\n                    node.__expanded__ = !node.__expanded__;\n                }\n            }\n        };\n\n\n        /**\n         * Get hash\n         * @callback _fnGetHash\n         *\n         * @param {Node} node\n         *\n         * @returns {string}\n         *\n         * @private\n         */\n        var _fnGetHash = function (node) {\n            return '#' + node.__parent__ + '#' + node[$scope.primary_key];\n        },\n            /**\n             * Set hash\n             * @param {Node} node\n             * @returns {Node}\n             * @private\n             */\n            _fnSetHash = function (node) {\n                var _hashKey = _fnGetHash(node);\n\n                if (angular.isUndefinedOrNull(node.__hashKey__) || node.__hashKey__ !== _hashKey) {\n                    node.__hashKey__ = _hashKey;\n                }\n\n                return node;\n            };\n\n        /**\n         * Get hash of node\n         *\n         * @type {_fnGetHash}\n         */\n        $scope.getHash = _fnGetHash;\n\n        /**\n         * Override callbacks\n         * @namespace $scope.$callbacks\n         * @type object\n         */\n        $scope.$callbacks = {\n            getHash:             _fnGetHash,\n            setHash:             _fnSetHash,\n            for_all_descendants: $scope.for_all_descendants,\n            /*expand:              function (node) {\n             return true;\n             },*/\n            accept:              function (/*dragInfo, moveTo, isChanged*/) {\n                return $scope.dropEnabled === true;\n            },\n\n            /**\n             * Calc indent\n             *\n             * @param {int} level\n             * @param {boolean} skipUnit\n             * @param {boolean} skipEdge\n             * @returns {number|string}\n             */\n            calsIndent: function (level, skipUnit, skipEdge) {\n                var unit = 0,\n                    edge = skipEdge ? 0 : $scope.indent_plus;\n                if (!skipUnit) {\n                    unit = $scope.indent_unit ? $scope.indent_unit : 'px';\n                }\n\n                if (level - 1 < 1) {\n                    return edge + unit;\n                } else {\n                    return $scope.indent * (level - 1) + edge + unit;\n                }\n            },\n\n            /**\n             * Is droppable\n             *\n             * @returns {boolean}\n             */\n            droppable:  function () {\n                return $scope.dropEnabled === true;\n            },\n            /**\n             * Is draggable\n             *\n             * @returns {boolean}\n             */\n            draggable:  function () {\n                return $scope.dragEnabled === true;\n            },\n            /**\n             * Before drop\n             *\n             * @returns {boolean}\n             */\n            beforeDrop: function (/*event*/) {\n                return true;\n            },\n\n            /**\n             * Change key for node\n             *\n             * @param node\n             */\n            changeKey: function (node) {\n                var _key     = node.__uid__;\n                node.__uid__ = Math.random();\n                if (node.__selected__) {\n                    delete node.__selected__;\n                }\n\n                if ($scope.primary_key !== '__uid__') {\n                    _key = '' + node[$scope.primary_key];\n                    _key = _key.replace(/_#.+$/g, '') + '_#' + node.__uid__;\n\n                    node[$scope.primary_key] = _key;\n                }\n                // delete(node.__hashKey__);\n            },\n\n            /**\n             * Clone node\n             *\n             * @param node\n             * @returns {*}\n             */\n            clone: function (node/*, _this*/) {\n                var _clone = angular.copy(node);\n\n                this.for_all_descendants(_clone, this.changeKey);\n\n                return _clone;\n            },\n\n            /**\n             * Remove node\n             *\n             * @param {Node} node\n             * @param {Node[]} parent\n             * @param {this} _this\n             * @param {boolean} delayReload\n             * @returns {Node[]}\n             */\n            remove: function (node, parent, _this, delayReload) {\n                var temp = parent.splice(node.__index__, 1)[0];\n                if (!delayReload) {\n                    $scope.reload_data();\n                }\n                return temp;\n            },\n\n            /**\n             * Clear info\n             *\n             * @param {Node} node\n             */\n            clearInfo: function (node) {\n                delete node.__inited__;\n                delete node.__visible__;\n\n                // always changed after call reload_data\n                //delete node.__hashKey__;\n            },\n\n            /**\n             * Add node to\n             *\n             * @param {Node} node\n             * @param {int} pos\n             * @param {Node[]} parent\n             * @param {this} _this\n             */\n            add: function (node, pos, parent/*, _this*/) {\n                // clearInfo\n                this.for_all_descendants(node, this.clearInfo);\n                if (parent) {\n                    if (parent.length > -1) {\n                        if (pos > -1) {\n                            parent.splice(pos, 0, node);\n                        } else {\n                            // todo If children need load crazy\n                            parent.push(node);\n                        }\n                    } else {\n                        parent.push(node);\n                    }\n                }\n            }\n        };\n\n        /**\n         * Delete scope by node\n         *\n         * @param {$scope} scope\n         * @param {Node} node\n         */\n        $scope.deleteScope = function (scope, node) {\n            var _hash = node.__hashKey__;\n            if ($scope.$globals[_hash] && $scope.$globals[_hash] === scope) {\n                delete $scope.$globals[_hash];\n            }\n        };\n\n        /**\n         * Set scope for node\n         *\n         * @param {$scope} scope\n         * @param {Node} node\n         */\n        $scope.setScope = function (scope, node) {\n            var _hash = node.__hashKey__;\n            if ($scope.$globals[_hash] !== scope) {\n                $scope.$globals[_hash] = scope;\n            }\n        };\n\n        /**\n         * Get scope of node\n         *\n         * @param {Node} node\n         * @returns {$scope}\n         */\n        $scope.getScope = function (node) {\n            if (node) {\n                var _hash = node.__hashKey__;\n                //var _hash = typeof node === 'string' ? node : node.__hashKey__;\n                return $scope.$globals[_hash];\n            }\n\n            return $scope;\n        };\n\n        if ($attrs.enableDrag || $attrs.enableDrop) {\n            $scope.placeElm    = undefined;\n            //                            $scope.dragBorder = 30;\n            $scope.dragEnabled = undefined;\n            $scope.dropEnabled = undefined;\n            $scope.horizontal  = undefined;\n\n            if ($attrs.enableDrag) {\n\n                $scope.dragDelay       = 0;\n                $scope.enabledMove     = true;\n                $scope.statusMove      = true;\n                $scope.enabledHotkey   = false;\n                $scope.enabledCollapse = undefined;\n                $scope.statusElm       = undefined;\n                $scope.dragging        = undefined;\n\n                angular.extend(\n                    $scope.$callbacks, /** @lends $scope.$callbacks */ {\n                        beforeDrag: function (/*scopeDrag*/) {\n                            return true;\n                        },\n                        /**\n                         * Callback when drag stop\n                         *\n                         * @param info\n                         * @param {boolean} passed\n                         */\n                        dragStop:   function (info, passed) {\n                            if (!info || !info.changed && info.drag.enabledMove || !passed) {\n                                return; // jmp out\n                            }\n\n                            info.target.reload_data();\n\n                            if (info.target !== info.drag && info.drag.enabledMove) {\n                                info.drag.reload_data();\n                            }\n                        },\n\n                        /**\n                         * Callback when node dropped\n                         *\n                         * @param info\n                         * @returns {boolean}\n                         */\n                        dropped: function (info/*, pass*/) {\n                            if (!info) {\n                                return; // jmp out\n                            }\n\n                            var _node         = info.node,\n                                _nodeAdd,\n                                _move         = info.move,\n                                _parent,\n                                _parentRemove = info.parent || info.drag.treeData,\n                                _parentAdd    = _move.parent || info.target.treeData,\n                                isMove        = info.drag.enabledMove;\n\n                            if (!info.changed && isMove) {\n                                return false;\n                            }\n\n                            if (info.target.$callbacks.accept(info, info.move, info.changed)) {\n                                if (isMove) {\n                                    _parent = _parentRemove;\n                                    if (angular.isDefined(_parent.__children__)) {\n                                        _parent = _parent.__children__;\n                                    }\n\n                                    _nodeAdd = info.drag.$callbacks.remove(\n                                        _node,\n                                        _parent,\n                                        info.drag.$callbacks,\n                                        true // delay reload\n                                    );\n                                } else {\n                                    _nodeAdd = info.drag.$callbacks.clone(_node, info.drag.$callbacks);\n                                }\n\n                                // if node dragging change index in sample node parent\n                                // and index node decrement\n                                if (isMove &&\n                                    info.drag === info.target &&\n                                    _parentRemove === _parentAdd &&\n                                    _move.pos >= info.node.__index__) {\n                                    _move.pos--;\n                                }\n\n                                _parent = _parentAdd;\n                                if (_parent.__children__) {\n                                    _parent = _parent.__children__;\n                                }\n\n                                info.target.$callbacks.add(\n                                    _nodeAdd,\n                                    _move.pos,\n                                    _parent,\n                                    info.drag.$callbacks\n                                );\n\n                                return true;\n                            }\n\n                            return false;\n                        },\n\n                        /**\n                         * Callback when before drag start\n                         *\n                         * @param event\n                         */\n                        dragStart: function (event) {\n                        },\n\n                        /**\n                         * Callback when before drag move\n                         *\n                         * @param event\n                         */\n                        dragMove: function (event) {\n                        }\n                    }\n                );\n\n                /**\n                 * Set status dragging\n                 *\n                 * @param dragInfo\n                 */\n                $scope.setDragging = function (dragInfo) {\n                    $scope.dragging = dragInfo;\n                };\n\n                /**\n                 * Get status node is enable move\n                 *\n                 * @param val\n                 */\n                $scope.enableMove = function (val) {\n                    if (typeof val === 'boolean') {\n                        $scope.enabledMove = val;\n                    } else {\n                        $scope.enabledMove = true;\n                    }\n                };\n\n                if ($attrs.enableStatus) {\n                    /**\n                     * Enable status (moving, coping)\n                     *\n                     * @type {boolean}\n                     */\n                    $scope.enabledStatus = false;\n\n                    /**\n                     * Hide status\n                     */\n                    $scope.hideStatus = function () {\n                        if ($scope.statusElm) {\n                            $scope.statusElm.addClass($scope.$class.hidden);\n                        }\n                    };\n\n                    /**\n                     * Refresh Status\n                     */\n                    $scope.refreshStatus = function () {\n                        if (!$scope.dragging) {\n                            return;\n                        }\n\n                        if ($scope.enabledStatus) {\n                            var statusElmOld = $scope.statusElm;\n                            if ($scope.enabledMove) {\n                                $scope.statusElm = angular.element($TreeDnDTemplate.getMove($scope));\n                            } else {\n                                $scope.statusElm = angular.element($TreeDnDTemplate.getCopy($scope));\n                            }\n\n                            if (statusElmOld !== $scope.statusElm) {\n                                if (statusElmOld) {\n                                    $scope.statusElm.attr('class', statusElmOld.attr('class'));\n                                    $scope.statusElm.attr('style', statusElmOld.attr('style'));\n                                    statusElmOld.remove();\n                                }\n                                $document.find('body').append($scope.statusElm);\n\n                            }\n\n                            $scope.statusElm.removeClass($scope.$class.hidden);\n                        }\n                    };\n\n                    /**\n                     * Set position status\n                     *\n                     * @param {Event} e\n                     */\n                    $scope.setPositionStatus = function (e) {\n                        if ($scope.statusElm) {\n                            $scope.statusElm.css(\n                                {\n                                    'left':    e.pageX + 10 + 'px',\n                                    'top':     e.pageY + 15 + 'px',\n                                    'z-index': 9999\n                                }\n                            );\n\n                            $scope.statusElm.addClass($scope.$class.status);\n                        }\n                    };\n                }\n            }\n\n            /**\n             * Status targeting when drag & drop\n             *\n             * @type {boolean}\n             */\n            $scope.targeting = false;\n\n            /**\n             * Get node previous sibling\n             *\n             * @param node\n             * @returns {Node|undefined}\n             */\n            $scope.getPrevSibling = function (node) {\n                if (node && node.__index__ > 0) {\n                    var _parent, _index = node.__index__ - 1;\n\n                    if (angular.isDefined(node.__parent_real__)) {\n                        _parent = $scope.tree_nodes[node.__parent_real__];\n\n                        return _parent.__children__[_index];\n                    }\n\n                    return $scope.treeData[_index];\n\n                }\n            };\n\n            /**\n             * Get node by index\n             *\n             * @param {int} index\n             * @returns {Node|undefined}\n             */\n            $scope.getNode = function (index) {\n                if (angular.isUndefinedOrNull(index)) {\n                    return; // jmp out\n                }\n\n                return $scope.tree_nodes[index];\n            };\n\n            /**\n             * Init element place\n             *\n             * @param {DOMElement} element\n             * @param {DOMElement} dragElm\n             * @returns {*}\n             */\n            $scope.initPlace = function (element, dragElm) {\n\n                if (!$scope.placeElm) {\n                    if ($scope.isTable) {\n                        $scope.placeElm = angular.element($window.document.createElement('tr'));\n\n                        var _len_down = $scope.colDefinitions.length;\n\n                        $scope.placeElm.append(\n                            angular.element($window.document.createElement('td'))\n                                .addClass($scope.$class.empty)\n                                .addClass('indented')\n                                .addClass($scope.$class.place)\n                        );\n\n                        while (_len_down-- > 0) {\n                            $scope.placeElm.append(\n                                angular.element($window.document.createElement('td'))\n                                    .addClass($scope.$class.empty)\n                                    .addClass($scope.$class.place)\n                            );\n                        }\n                    } else {\n                        $scope.placeElm = angular.element($window.document.createElement('li'))\n                            .addClass($scope.$class.empty)\n                            .addClass($scope.$class.place);\n                    }\n\n                }\n\n                if (dragElm) {\n                    $scope.placeElm.css('height', $TreeDnDHelper.height(dragElm) + 'px');\n                }\n\n                if (element) {\n                    element[0].parentNode.insertBefore($scope.placeElm[0], element[0]);\n                } else {\n                    $scope.getElementChilds().append($scope.placeElm);\n                }\n\n                return $scope.placeElm;\n            };\n\n            /**\n             * Hide element place\n             */\n            $scope.hidePlace = function () {\n                if ($scope.placeElm) {\n                    $scope.placeElm.addClass($scope.$class.hidden);\n                }\n            };\n\n            /**\n             * Show element place\n             */\n            $scope.showPlace = function () {\n                if ($scope.placeElm) {\n                    $scope.placeElm.removeClass($scope.$class.hidden);\n                }\n            };\n\n            /**\n             * Get scope tree\n             * @returns {$scope}\n             */\n            $scope.getScopeTree = function () {\n                return $scope;\n            };\n\n        }\n\n        /**\n         * Function safe apply to avoid loop-depth\n         *\n         * @type {$safeApply}\n         */\n        $scope.$safeApply = $safeApply;\n\n        /**\n         * Hide children\n         *\n         * @param {Node} node\n         * @param {Node} parent\n         * @returns {boolean}\n         */\n        $scope.hiddenChild = function fnHiddenChild(node, parent) {\n            var nodeScope = $scope.getScope(node);\n            if (nodeScope) {\n                if (parent && parent.__expanded__ && parent.__visible__) {\n                    nodeScope.$element.removeClass($scope.$class.hidden);\n                    node.__visible__ = true;\n                } else {\n                    nodeScope.$element.addClass($scope.$class.hidden);\n                    node.__visible__ = false;\n                }\n            } else {\n                // show node & init scope\n                node.__visible__ = !!(parent && parent.__expanded__ && parent.__visible__);\n            }\n\n            // skip all child hiding... if not expaned\n            return node.__expanded__ === false;\n        };\n\n        var _fnInitFilter,\n            _fnInitOrderBy,\n            _fnGetControl,\n            _defaultFilterOption = {\n                showParent: true,\n                showChild:  false,\n                beginAnd:   true\n            },\n            _watches             = [\n                [\n                    'enableDrag',\n                    [\n                        ['boolean', 'enableStatus', undefined, 'enabledStatus'],\n                        ['boolean', 'enableMove', undefined, 'enabledMove'],\n                        ['number', 'dragDelay', 0, undefined, 0],\n                        ['boolean', 'enableCollapse', undefined, 'enabledCollapse'],\n                        ['boolean', 'enableHotkey', undefined, 'enabledHotkey', undefined, function (isHotkey) {\n                            if (isHotkey) {\n                                $scope.enabledMove = false;\n                            } else {\n                                $scope.enabledMove = $scope.statusMove;\n                            }\n                        }]\n                    ]\n                ],\n                [\n                    ['enableDrag', 'enableStatus'],\n                    [\n                        ['string', 'templateCopy', $attrs.templateCopy, 'templateCopy', undefined, function (_url) {\n                            if (_url && $templateCache.get(_url)) {\n                                $TreeDnDTemplate.setCopy(_url, $scope);\n                            }\n                        }],\n                        ['string', 'templateMove', $attrs.templateMove, 'templateMove', undefined, function (_url) {\n                            if (_url && $templateCache.get(_url)) {\n                                $TreeDnDTemplate.setMove(_url, $scope);\n                            }\n                        }]\n                    ]\n                ],\n                [\n                    [['enableDrag', 'enableDrop']],\n                    [\n                        ['number', 'dragBorder', 30, 'dragBorder', 30]\n                    ]\n                ],\n                [\n                    '*',\n                    [\n                        ['boolean', 'treeTable', true, 'treeTable', undefined],\n                        ['boolean', 'horizontal'],\n                        [\n                            'callback',\n                            'treeClass',\n                            function (val) {\n                                switch (typeof val) {\n                                    case 'string':\n                                        $scope.$tree_class = val;\n                                        break;\n                                    case 'object':\n                                        angular.extend($scope.$class, val);\n                                        $scope.$tree_class = $scope.$class.tree;\n                                        break;\n                                    default:\n                                        $scope.$tree_class = $attrs.treeClass;\n                                        break;\n                                }\n                            },\n                            'treeClass',\n                            function () {\n                                $scope.$tree_class = $scope.$class.tree + ' table';\n                            },\n                            undefined,\n                            function () {\n                                if (/^(\\s+[\\w\\-]+){2,}$/g.test(' ' + $attrs.treeClass)) {\n                                    $scope.$tree_class = $attrs.treeClass.trim();\n                                    return true;\n                                }\n                            }\n                        ],\n                        [['object', 'string'], 'expandOn', getExpandOn, 'expandingProperty', getExpandOn, function (expandOn) {\n                            if (angular.isUndefinedOrNull(expandOn)) {\n                                $scope.expandingProperty = $attrs.expandOn;\n                            }\n                        }],\n                        ['object', 'treeControl', angular.isDefined($scope.tree) ? $scope.tree : {}, 'tree', undefined, function (treeControl) {\n                            if (!angular.isFunction(_fnGetControl)) {\n                                _fnGetControl = $TreeDnDPlugin('$TreeDnDControl');\n                            }\n\n                            if (angular.isFunction(_fnGetControl)) {\n                                angular.extend(\n                                    $scope.tree,\n                                    _fnGetControl($scope),\n                                    treeControl\n                                );\n                            }\n                        }],\n                        [['array', 'object'], 'columnDefs', getColDefs, 'colDefinitions', getColDefs, function (colDefs) {\n                            if (angular.isUndefinedOrNull(colDefs) || !angular.isArray(colDefs)) {\n                                $scope.colDefinitions = getColDefs();\n                            }\n                        }],\n                        [['object', 'string', 'array', 'function'], 'orderBy', $attrs.orderBy],\n                        [['object', 'array'], 'filter', undefined, 'filter', undefined, function (filters) {\n                            var _passed = false;\n                            if (angular.isDefined(filters) && !angular.isArray(filters)) {\n                                var _keysF = Object.keys(filters),\n                                    _lenF  = _keysF.length, _iF;\n\n                                if (_lenF > 0) {\n                                    for (_iF = 0; _iF < _lenF; _iF++) {\n\n                                        if (typeof filters[_keysF[_iF]] === 'string' &&\n                                            filters[_keysF[_iF]].length === 0) {\n                                            continue;\n                                        }\n                                        _passed = true;\n                                        break;\n                                    }\n                                }\n                            }\n\n                            $scope.enabledFilter = _passed;\n                            reload_data();\n                        }],\n                        ['object', 'filterOptions', _defaultFilterOption, 'filterOptions', _defaultFilterOption, function (option) {\n                            if (typeof option === 'object') {\n                                $scope.filterOptions = angular.extend(_defaultFilterOption, option);\n                            }\n                        }],\n                        ['string', 'primaryKey', $attrs.primaryKey, 'primary_key', '__uid__'],\n                        ['string', 'indentUnit', $attrs.indentUnit, 'indent_unit'],\n                        ['number', 'indent', 30, undefined, 30],\n                        ['number', 'indentPlus', 20, undefined, 20],\n                        [\n                            'object',\n                            'callbacks',\n                            function (optCallbacks) {\n                                angular.forEach(\n                                    optCallbacks, function (value, key) {\n                                        if (typeof value === 'function') {\n                                            if ($scope.$callbacks[key]) {\n                                                $scope.$callbacks[key] = value;\n                                            }\n                                        }\n                                    }\n                                );\n\n                                return $scope.$callbacks;\n                            },\n                            '$callbacks'\n                        ],\n                        ['number', 'expandLevel', 3, 'expandLevel', 3, function () {\n                            reload_data();\n                        }],\n                        ['number', 'treeLimit', 100, '$TreeLimit', 100],\n                        ['boolean', 'enableDrag', undefined, 'dragEnabled'],\n                        ['boolean', 'enableDrop', undefined, 'dropEnabled']\n                    ]\n                ]\n            ],\n\n            w, lenW              = _watches.length,\n            i, len,\n            _curW,\n            _typeW, _nameW, _defaultW, _scopeW, _NotW, _AfterW, _BeforeW,\n\n            // debounce reload_Data;\n            timeReloadData, tmpTreeData;\n\n        for (w = 0; w < lenW; w++) {\n            // skip if not exist\n            if (!check_exist_attr($attrs, _watches[w][0], true)) {\n                continue;\n            }\n\n            _curW = _watches[w][1];\n            for (i = 0, len = _curW.length; i < len; i++) {\n\n                _typeW    = _curW[i][0];\n                _nameW    = _curW[i][1];\n                _defaultW = _curW[i][2];\n                _scopeW   = _curW[i][3];\n                _NotW     = _curW[i][4];\n                _AfterW   = _curW[i][5];\n                _BeforeW  = _curW[i][6];\n\n                generateWatch(_typeW, _nameW, _defaultW, _scopeW, _NotW, _AfterW, _BeforeW);\n            }\n        }\n\n        if ($attrs.treeData) {\n            $scope.$watch(\n                $attrs.treeData, function (val) {\n                    if (angular.equals(val, $scope.treeData)) {\n                        return; // jmp out\n                    }\n\n                    tmpTreeData = val;\n                    if (angular.isUndefinedOrNull(timeReloadData)) {\n                        timeReloadData = $timeout(timeLoadData, 350);\n                    }\n                }, true\n            );\n        }\n\n        /**\n         * Reload data with timeout\n         * @callback timeLoadData\n         */\n        function timeLoadData() {\n            $scope.treeData = tmpTreeData;\n            reload_data();\n            timeReloadData = undefined;\n        }\n\n        /**\n         * Update limit\n         */\n        $scope.updateLimit = function updateLimit() {\n            $scope.$TreeLimit += 50;\n        };\n\n        /**\n         * Reload data\n         * @type {reload_data}\n         */\n        $scope.reload_data = reload_data;\n\n        /**\n         * Check attribute exist\n         * @callback check_exist_attr\n         *\n         * @param {object|array} attrs - Array attributes\n         * @param {Array|string} existAttr - Criteria condition\n         * @param {boolean} isAnd - Is condition AND\n         * @returns {*}\n         */\n        function check_exist_attr(attrs, existAttr, isAnd) {\n            if (angular.isUndefinedOrNull(existAttr)) {\n                return false;\n            }\n\n            if (existAttr === '*' || !angular.isUndefined(attrs[existAttr])) {\n                return true;\n            }\n\n            if (angular.isArray(existAttr)) {\n                return for_each_attrs(attrs, existAttr, isAnd);\n            }\n        }\n\n        /**\n         * Foreach attributes with criteria\n         * @callback for_each_attrs\n         * @param {Object|Array} attrs - Array attributes\n         * @param {Array|string} exist - Criteria condition\n         * @param {boolean} isAnd  - Is condition AND\n         * @returns {boolean}\n         */\n        function for_each_attrs(attrs, exist, isAnd) {\n            var i, len = exist.length, passed = false;\n\n            if (len === 0) {\n                return; // jmp out\n            }\n\n            for (i = 0; i < len; i++) {\n                if (check_exist_attr(attrs, exist[i], !isAnd)) {\n                    passed = true;\n                    if (!isAnd) {\n                        return true;\n                    }\n                } else {\n                    if (isAnd) {\n                        return false;\n                    }\n                }\n            }\n\n            return passed;\n        }\n\n        /**\n         * Function generate watch attribute by automatic\n         *\n         * @callback generateWatch\n         * @param {*} type\n         * @param {string} nameAttr - Name attribute\n         * @param {*} valDefault - Value default\n         * @param {string|undefined} nameScope - Name of attribute in $scope\n         * @param {function} fnNotExist - Callback when attribute not exist\n         * @param {function} fnAfter - Callback when attribute found\n         * @param {function} fnBefore - Callback before attribute found (to prepare data)\n         */\n        function generateWatch(type, nameAttr, valDefault, nameScope, fnNotExist, fnAfter, fnBefore) {\n            nameScope = nameScope || nameAttr;\n            if (typeof type === 'string' || angular.isArray(type)) {\n                if (angular.isFunction(fnBefore) && fnBefore()) {\n                    return;//jmp\n                }\n\n                if (typeof $attrs[nameAttr] === 'string') {\n                    $scope.$watch(\n                        $attrs[nameAttr], function (val) {\n                            if (typeof type === 'string' && typeof val === type ||\n                                angular.isArray(type) && type.indexOf(typeof val) > -1\n                            ) {\n                                $scope[nameScope] = val;\n                            } else {\n                                if (angular.isFunction(valDefault)) {\n                                    $scope[nameScope] = valDefault(val);\n                                } else {\n                                    $scope[nameScope] = valDefault;\n                                }\n                            }\n\n                            if (angular.isFunction(fnAfter)) {\n                                fnAfter($scope[nameScope], $scope);\n                            }\n                        }, true\n                    );\n                } else {\n\n                    if (angular.isFunction(fnNotExist)) {\n                        $scope[nameScope] = fnNotExist();\n                    } else if (!angular.isUndefined(fnNotExist)) {\n                        $scope[nameScope] = fnNotExist;\n                    }\n                }\n            }\n        }\n\n        /**\n         * Call safeApply\n         *\n         * @param fn\n         * @callback $safeApply\n         */\n        function $safeApply(fn) {\n            var phase = this.$root.$$phase;\n            if (phase === '$apply' || phase === '$digest') {\n                if (fn && typeof fn === 'function') {\n                    fn();\n                }\n            } else {\n                this.$apply(fn);\n            }\n        }\n\n        /**\n         * Get Expand on\n         * @callback getExpandOn\n         */\n        function getExpandOn() {\n            if ($scope.treeData && $scope.treeData.length) {\n                var _firstNode = $scope.treeData[0], _keys = Object.keys(_firstNode),\n                    _regex                                 = new RegExp('^__([a-zA-Z0-9_\\-]*)__$'),\n                    _len,\n                    i;\n                // Auto get first field with type is string;\n                for (i = 0, _len = _keys.length; i < _len; i++) {\n                    if (typeof _firstNode[_keys[i]] === 'string' && !_regex.test(_keys[i])) {\n                        $scope.expandingProperty = _keys[i];\n\n                        return; // jmp out\n                    }\n                }\n\n                // Auto get first\n                if (angular.isUndefinedOrNull($scope.expandingProperty)) {\n                    $scope.expandingProperty = _keys[0];\n                }\n\n            }\n        }\n\n        /**\n         * Get col defs\n         *\n         * @callback getColDefs\n         */\n        function getColDefs() {\n            // Auto get Defs except attribute __level__ ....\n            if ($scope.treeData.length) {\n                var _col_defs = [], _firstNode = $scope.treeData[0],\n                    _regex                     = new RegExp('(^__([a-zA-Z0-9_\\-]*)__$|^' + $scope.expandingProperty + '$)'),\n                    _keys                      = Object.keys(_firstNode),\n                    i, _len;\n\n                // Auto get first field with type is string;\n                for (i = 0, _len = _keys.length; i < _len; i++) {\n                    if (typeof _firstNode[_keys[i]] === 'string' && !_regex.test(_keys[i])) {\n                        _col_defs.push(\n                            {\n                                field: _keys[i]\n                            }\n                        );\n                    }\n                }\n\n                $scope.colDefinitions = _col_defs;\n            }\n        }\n\n        /**\n         * do_f\n         *\n         * @callback do_f\n         *\n         * @param {Node[]} root\n         * @param {Node} node\n         * @param {Node} parent\n         * @param {int} parent_real\n         * @param {int} level\n         * @param {boolean|*} visible\n         * @param {int} index\n         * @returns {number}\n         */\n        function do_f(root, node, parent, parent_real, level, visible, index) {\n            /**\n             * Node of tree\n             * @name Node\n             * @type {NodeBase}\n             * @property {int} __parent_real__\n             * @property {Node} __parent__\n             * @property {boolean} __expanded__\n             * @property {int} __index__\n             * @property {int} __index_real__\n             * @property {int} __level__\n             * @property {int} __icon__\n             * @property {string} __icon_class__\n             * @property {boolean} __visible__\n             * @property {string} __uid__\n             * @property {string} __hashKey__\n             * @property {int} __dept__\n             */\n            if (typeof node !== 'object') {\n                return 0;\n            }\n\n            var _i, _len, _icon, _index_real, _dept, _hashKey;\n\n            if (!angular.isArray(node.__children__)) {\n                node.__children__ = [];\n            }\n\n            node.__parent_real__ = parent_real;\n            node.__parent__      = parent;\n            _len                 = node.__children__.length;\n\n            if (angular.isUndefinedOrNull(node.__expanded__) && _len > 0) {\n                node.__expanded__ = level < $scope.expandLevel;\n            }\n\n            if (_len === 0) {\n                _icon = -1;\n            } else {\n                if (node.__expanded__) {\n                    _icon = 1;\n                } else {\n                    _icon = 0;\n                }\n            }\n\n            // Insert item vertically\n            _index_real         = root.length;\n            node.__index__      = index;\n            node.__index_real__ = _index_real;\n            node.__level__      = level;\n            node.__icon__       = _icon;\n            node.__icon_class__ = $scope.$class.icon[_icon];\n            node.__visible__    = !!visible;\n\n            if (angular.isUndefinedOrNull(node.__uid__)) {\n                node.__uid__ = '' + Math.random();\n            }\n\n            _hashKey = $scope.getHash(node);\n\n            if (angular.isUndefinedOrNull(node.__hashKey__) || node.__hashKey__ !== _hashKey) {\n                node.__hashKey__ = _hashKey;\n            }\n\n            root.push(node);\n\n            // Check node children\n            _dept = 1;\n            if (_len > 0) {\n                for (_i = 0; _i < _len; _i++) {\n                    _dept += do_f(\n                        root,\n                        node.__children__[_i],\n                        node[$scope.primary_key],\n                        _index_real,\n                        level + 1,\n                        visible && node.__expanded__,\n                        _i\n                    );\n                }\n            }\n\n            node.__dept__ = _dept;\n\n            return _dept;\n        }\n\n        /**\n         * Init data for tree\n         *\n         * @param {Node[]|undefined} data - Data for tree\n         * @returns {Node[]|undefined}\n         */\n        function init_data(data) {\n\n            // clear memory\n            if (angular.isDefined($scope.tree_nodes)) {\n                delete $scope.tree_nodes;\n            }\n\n            $scope.tree_nodes = data;\n\n            return data;\n        }\n\n        /**\n         * Reload data of tree\n         *\n         * @callback reload_data\n         *\n         * @param {Node[]|undefined} [data=undefined]\n         * @returns {Node[]}\n         */\n        function reload_data(data) {\n            var _data,\n                _len,\n                _tree_nodes = [];\n\n            if (angular.isDefined(data)) {\n                if (!angular.isArray(data) || data.length === 0) {\n                    return init_data([]);\n                } else {\n                    _data = data;\n                }\n            } else if (!angular.isArray($scope.treeData) || $scope.treeData.length === 0) {\n                return init_data([]);\n            } else {\n                _data = $scope.treeData;\n            }\n\n            if (!$attrs.expandOn) {\n                getExpandOn();\n            }\n\n            if (!$attrs.columnDefs) {\n                getColDefs();\n            }\n\n            if (angular.isDefined($scope.orderBy)) {\n                if (!angular.isFunction(_fnInitOrderBy)) {\n                    _fnInitOrderBy = $TreeDnDPlugin('$TreeDnDOrderBy');\n                }\n\n                if (angular.isFunction(_fnInitOrderBy)) {\n                    _data = _fnInitOrderBy(_data, $scope.orderBy);\n                }\n            }\n\n            if (angular.isDefined($scope.filter)) {\n                if (!angular.isFunction(_fnInitFilter)) {\n                    _fnInitFilter = $TreeDnDPlugin('$TreeDnDFilter');\n                }\n\n                if (angular.isFunction(_fnInitFilter)) {\n                    _data = _fnInitFilter(_data, $scope.filter, $scope.filterOptions);\n                }\n            }\n\n            _len = _data.length;\n            if (_len > 0) {\n                var _i,\n                    _deptTotal = 0;\n\n                for (_i = 0; _i < _len; _i++) {\n                    _deptTotal += do_f(_tree_nodes, _data[_i], undefined, undefined, 1, true, _i);\n                }\n\n            }\n\n            init_data(_tree_nodes);\n\n            return _tree_nodes;\n        }\n    }\n\n    function fnCompile(tElement) {\n\n        var $_Template = '',\n            _element   = tElement.html().trim();\n\n        if (_element.length > 0) {\n            $_Template = _element;\n            tElement.html('');\n        }\n\n        return function fnPost(scope, element, attrs) {\n\n            if (typeof attrs === 'object' && attrs.enableDrag) {\n                var _fnInitDrag = $TreeDnDPlugin('$TreeDnDDrag');\n                if (angular.isFunction(_fnInitDrag)) {\n                    _fnInitDrag(scope, element, $window, $document);\n                }\n            }\n\n            // kick out $digest\n            element.ready(function () {\n                // apply Template\n                function checkTreeTable(template, scope) {\n                    var elemNode = template[0].querySelector('[tree-dnd-node]'),\n                        attrInclude;\n\n                    scope.isTable = undefined;\n                    if (elemNode) {\n                        elemNode    = angular.element(elemNode);\n                        attrInclude = elemNode.attr('ng-include');\n                    } else {\n                        return;\n                    }\n\n                    if (attrInclude) {\n                        var treeInclude = $parse(attrInclude)(scope) || attrInclude;\n                        if (typeof treeInclude === 'string') {\n                            return $http.get(\n                                treeInclude,\n                                {cache: $templateCache}\n                            ).then(function (response) {\n                                    var data          = response.data || '';\n                                    data              = data.trim();\n                                    //scope.templateNode = data;\n                                    var tempDiv       = document.createElement('div');\n                                    tempDiv.innerHTML = data;\n                                    tempDiv           = angular.element(tempDiv);\n                                    scope.isTable     = !tempDiv[0].querySelector('[tree-dnd-nodes]');\n                                }\n                            );\n                        }\n                    } else {\n                        scope.isTable = !elemNode[0].querySelector('[tree-dnd-nodes]');\n                        //scope.templateNode = elemNode.html();\n                    }\n                    $TreeDnDViewport.setTemplate(scope, scope.templateNode);\n                    //elemNode.html('');\n                }\n\n                var promiseCheck;\n                if ($_Template.length > 0) {\n                    promiseCheck = checkTreeTable(angular.element($_Template.trim()), scope);\n                    if (typeof promiseCheck === 'object') {\n                        promiseCheck.then(function () {\n                            element.append($compile($_Template)(scope));\n                        });\n                    } else {\n                        element.append($compile($_Template)(scope));\n                    }\n                } else {\n                    $http.get(\n                        attrs.templateUrl || $TreeDnDTemplate.getPath(),\n                        {cache: $templateCache}\n                    ).then(function (response) {\n                            var data     = response.data || '';\n                            data         = angular.element(data.trim());\n                            promiseCheck = checkTreeTable(data, scope);\n                            if (typeof promiseCheck === 'object') {\n                                promiseCheck.then(function () {\n                                    element.append($compile(data)(scope));\n                                });\n                            } else {\n                                element.append($compile(data)(scope));\n                            }\n                        }\n                    );\n                }\n            });\n        };\n    }\n}\n\n\n/**\n * Factory $TreeDnDFilter\n * @namespace $TreeDnDFilter\n * @type function\n * @function\n */\nangular.module('ntt.TreeDnD')\n    .factory('$TreeDnDFilter', [\n        '$filter',\n        function ($filter) {\n            return fnInitFilter;\n\n            /**\n             * Foreach all descendants\n             *\n             * @param {array|object} options\n             * @param {Node} node\n             * @param {string} fieldChild\n             * @param {Function} [fnBefore] - Callback before foreach descendants of node\n             * @param {Function} [fnAfter]  - Callback after foreach descendants of node\n             * @param {boolean} [parentPassed=false] - Parent is passed\n             * @returns {boolean|undefined}\n             * @callback for_all_descendants\n             * @private\n             */\n            function for_all_descendants(options, node, fieldChild, fnBefore, fnAfter, parentPassed) {\n                if (!angular.isFunction(fnBefore)) {\n                    return; // jmp out\n                }\n\n                var _i, _len, _nodes,\n                    _nodePassed   = fnBefore(options, node),\n                    _childPassed  = false,\n                    _filter_index = options.filter_index;\n\n                if (angular.isDefined(node[fieldChild])) {\n                    _nodes = node[fieldChild];\n                    _len   = _nodes.length;\n\n                    options.filter_index = 0;\n                    for (_i = 0; _i < _len; _i++) {\n                        _childPassed = for_all_descendants(\n                            options,\n                            _nodes[_i],\n                            fieldChild,\n                            fnBefore,\n                            fnAfter,\n                            _nodePassed || parentPassed\n                        ) || _childPassed;\n                    }\n\n                    // restore filter_index of node\n                    options.filter_index = _filter_index;\n                }\n\n                if (angular.isFunction(fnAfter)) {\n                    fnAfter(options, node, _nodePassed === true, _childPassed === true, parentPassed === true);\n                }\n\n                return _nodePassed || _childPassed;\n            }\n\n            /**\n             * Check data with callback\n             * @param {string|object|function|regex} callback\n             * @param {Node[]|Node|boolean|string|regex} data\n             * @returns {undefined|boolean}\n             * @callback _fnCheck\n             * @private\n             */\n            function _fnCheck(callback, data) {\n                if (angular.isUndefinedOrNull(data) || angular.isArray(data)) {\n                    return; // jmp out\n                }\n\n                if (angular.isFunction(callback)) {\n                    return callback(data, $filter);\n                } else {\n                    if (typeof callback === 'boolean') {\n                        data = !!data;\n                        return data === callback;\n                    } else if (angular.isDefined(callback)) {\n                        try {\n                            var _regex = new RegExp(callback);\n                            return _regex.test(data);\n                        }\n                        catch (err) {\n                            if (typeof data === 'string') {\n                                return data.indexOf(callback) > -1;\n                            }\n                        }\n                    }\n                }\n            }\n\n            /**\n             * `fnProcess` to call `_fnCheck`. If `condition` is `array` then call `for_each_filter`\n             * else will call `_fnCheck`. Specical `condition.field` is `_$` then apply `condition.callback` for all field, if have `field` invaild then `return true`.\n             *\n             * @param node\n             * @param condition\n             * @param {boolean} isAnd\n             * @returns {undefined|boolean}\n             * @private\n             */\n            function _fnProcess(node, condition, isAnd) {\n                if (angular.isArray(condition)) {\n                    return for_each_filter(node, condition, isAnd);\n                } else {\n                    var _key      = condition.field,\n                        _callback = condition.callback,\n                        _iO, _keysO, _lenO;\n\n                    if (_key === '_$') {\n                        _keysO = Object.keys(node);\n                        _lenO  = _keysO.length;\n                        for (_iO = 0; _iO < _lenO; _iO++) {\n                            if (_fnCheck(_callback, node[_keysO[_iO]])) {\n                                return true;\n                            }\n                        }\n                    } else if (angular.isDefined(node[_key])) {\n                        return _fnCheck(_callback, node[_key]);\n                    }\n                }\n            }\n\n            /**\n             *\n             * @param {Node} node\n             * @param {array} conditions - Array `conditions`\n             * @param {boolean} isAnd - Check with condition `And`, if `And` then `return false` when all `false`\n             * @returns {undefined|boolean}\n             */\n            function for_each_filter(node, conditions, isAnd) {\n                var i, len = conditions.length || 0, passed = false;\n                if (len === 0) {\n                    return; // jmp out\n                }\n\n                for (i = 0; i < len; i++) {\n                    if (_fnProcess(node, conditions[i], !isAnd)) {\n                        passed = true;\n                        // if condition `or` then return;\n                        if (!isAnd) {\n                            return true;\n                        }\n                    } else {\n\n                        // if condition `and` and result in fnProccess = false then return;\n                        if (isAnd) {\n                            return false;\n                        }\n                    }\n                }\n\n                return passed;\n            }\n\n            /**\n             * Will call _fnAfter to clear data no need\n             * @param {object} options\n             * @param {NodeFilter} node\n             * @param {boolean} isNodePassed\n             * @param {boolean} isChildPassed\n             * @param {boolean} isParentPassed\n             * @private\n             */\n            function _fnAfter(options, node, isNodePassed, isChildPassed, isParentPassed) {\n                /**\n                 * @name NodeFilter\n                 * @extends Node\n                 * @property {boolean} __filtered__\n                 * @property {boolean} __filtered_visible__\n                 * @property {int} __filtered_index__\n                 */\n                if (isNodePassed === true) {\n                    node.__filtered__         = true;\n                    node.__filtered_visible__ = true;\n                    node.__filtered_index__   = options.filter_index++;\n                    return; //jmp\n                } else if (isChildPassed === true && options.showParent === true\n                    || isParentPassed === true && options.showChild === true) {\n                    node.__filtered__         = false;\n                    node.__filtered_visible__ = true;\n                    node.__filtered_index__   = options.filter_index++;\n                    return; //jmp\n                }\n\n                // remove attr __filtered__\n                delete node.__filtered__;\n                delete node.__filtered_visible__;\n                delete node.__filtered_index__;\n            }\n\n            /**\n             * `fnBefore` will called when `for_all_descendants` of `node` checking.\n             * If `filter` empty then return `true` else result of function `_fnProcess` {@see _fnProcess}\n             *\n             * @param {object} options\n             * @param {NodeFilter} node\n             * @returns {undefined|boolean}\n             * @callback _fnBefore\n             * @private\n             */\n            function _fnBefore(options, node) {\n                if (options.filter.length === 0) {\n                    return true;\n                } else {\n                    return _fnProcess(node, options.filter, options.beginAnd || false);\n                }\n            }\n\n            /**\n             * `fnBeforeClear` will called when `for_all_descendants` of `node` checking.\n             * Alway false to Clear Filter empty\n             *\n             * @param {object} options\n             * @param {NodeFilter} node\n             * @returns {undefined|boolean}\n             * @callback _fnBeforeClear\n             * @private\n             */\n            function _fnBeforeClear(options, node) {\n                return false;\n            }\n\n            /**\n             * `_fnConvert` to convert `filter` `object` to `array` invaild.\n             *\n             * @param {object|array} filters\n             * @returns {array} Instead of `filter` or new array invaild *(converted from filter)*\n             * @callback _fnConvert\n             * @private\n             */\n            function _fnConvert(filters) {\n                var _iF, _lenF, _keysF,\n                    _filter,\n                    _state;\n\n                // convert filter object to array filter\n                if (typeof filters === 'object' && !angular.isArray(filters)) {\n                    _keysF  = Object.keys(filters);\n                    _lenF   = _keysF.length;\n                    _filter = [];\n\n                    if (_lenF > 0) {\n                        for (_iF = 0; _iF < _lenF; _iF++) {\n\n                            if (typeof filters[_keysF[_iF]] === 'string' && filters[_keysF[_iF]].length === 0) {\n                                continue;\n                            } else if (angular.isArray(filters[_keysF[_iF]])) {\n                                _state = filters[_keysF[_iF]];\n                            } else if (typeof filters[_keysF[_iF]] === 'object') {\n                                _state = _fnConvert(filters[_keysF[_iF]]);\n                            } else {\n                                _state = {\n                                    field:    _keysF[_iF],\n                                    callback: filters[_keysF[_iF]]\n                                };\n                            }\n                            _filter.push(_state);\n                        }\n                    }\n\n                    return _filter;\n                }\n                else {\n                    return filters;\n                }\n            }\n\n            /**\n             * `fnInitFilter` function is constructor of service `$TreeDnDFilter`.\n             * @param {NodeFilter|NodeFilter[]} treeData\n             * @param {object|array} filters\n             * @param {object} options\n             * @param {string} keyChild\n             * @returns {array} Return `treeData` or `treeData` with `filter`\n             */\n            function fnInitFilter(treeData, filters, options, keyChild) {\n                if (!angular.isArray(treeData)\n                    || treeData.length === 0) {\n                    return treeData;\n                }\n\n                var _i, _len,\n                    _filter;\n\n                _filter = _fnConvert(filters);\n                if (!(angular.isArray(_filter) || typeof _filter === 'object')\n                    || _filter.length === 0) {\n                    for (_i = 0, _len = treeData.length; _i < _len; _i++) {\n                        for_all_descendants(\n                            options,\n                            treeData[_i],\n                            keyChild || '__children__',\n                            _fnBeforeClear, _fnAfter\n                        );\n                    }\n\n                    return treeData;\n                }\n\n                options.filter       = _filter;\n                options.filter_index = 0;\n                for (_i = 0, _len = treeData.length; _i < _len; _i++) {\n                    for_all_descendants(\n                        options,\n                        treeData[_i],\n                        keyChild || '__children__',\n                        _fnBefore, _fnAfter\n                    );\n                }\n\n                return treeData;\n            }\n\n        }]\n    );\n\n/**\n * Factory $TreeDnDOrderBy\n *\n * @name Factory.$TreeDnDOrderBy\n * @type {fnInitTreeOrderBy}\n */\nangular.module('ntt.TreeDnD')\n    .factory('$TreeDnDOrderBy', [\n        '$filter',\n        function ($filter) {\n            var _fnOrderBy          = $filter('orderBy'),\n                /**\n                 * Foreach all descendants\n                 *\n                 * @param options\n                 * @param {Node} node          - Node\n                 * @param {string} name        - Name attribute\n                 * @param {function} fnOrderBy - Callback orderBy\n                 * @returns {Node}\n                 * @callback for_all_descendants\n                 * @private\n                 */\n                for_all_descendants = function for_all_descendants(options, node, name, fnOrderBy) {\n                    var _i, _len, _nodes;\n\n                    if (angular.isDefined(node[name])) {\n                        _nodes = node[name];\n                        _len   = _nodes.length;\n                        // OrderBy children\n                        for (_i = 0; _i < _len; _i++) {\n                            _nodes[_i] = for_all_descendants(options, _nodes[_i], name, fnOrderBy);\n                        }\n\n                        node[name] = fnOrderBy(node[name], options);\n                    }\n\n                    return node;\n                },\n\n                /**\n                 * Function order\n                 * @param {Node[]} list\n                 * @param {string} orderBy\n                 * @returns {Node[]}\n                 * @private\n                 */\n                _fnOrder            = function _fnOrder(list, orderBy) {\n                    return _fnOrderBy(list, orderBy);\n                },\n\n                /**\n                 * Function tree orderBy\n                 *\n                 * @type {function}\n                 * @param {Node[]} treeData\n                 * @param {string} orderBy\n                 * @returns {Node[]}\n                 * @callback fnInitTreeOrderBy\n                 */\n                fnInitTreeOrderBy   = function fnInitTreeOrderBy(treeData, orderBy) {\n                    if (!angular.isArray(treeData)\n                        || treeData.length === 0\n                        || !(angular.isArray(orderBy) || typeof orderBy === 'object' || angular.isString(orderBy) || angular.isFunction(orderBy))\n                        || orderBy.length === 0 && !angular.isFunction(orderBy)\n                    ) {\n                        return treeData;\n                    }\n\n                    var _i, _len;\n\n                    for (_i = 0, _len = treeData.length; _i < _len; _i++) {\n                        treeData[_i] = for_all_descendants(\n                            orderBy,\n                            treeData[_i],\n                            '__children__',\n                            _fnOrder\n                        );\n                    }\n\n                    return _fnOrder(treeData, orderBy);\n                };\n\n            return fnInitTreeOrderBy;\n        }]\n    );\n\nangular.module('ntt.TreeDnD')\n    .factory('$TreeDnDDrag', [\n        '$timeout', '$TreeDnDHelper',\n        function ($timeout, $TreeDnDHelper) {\n\n            function _fnPlaceHolder(e, $params) {\n                if ($params.placeElm) {\n                    var _offset = $TreeDnDHelper.offset($params.placeElm);\n                    if (_offset.top <= e.pageY && e.pageY <= _offset.top + _offset.height &&\n                        _offset.left <= e.pageX && e.pageX <= _offset.left + _offset.width\n                    ) {\n                        return true;\n                    }\n                }\n\n                return false;\n            }\n\n            function _fnDragStart(e, $params) {\n                if (!$params.hasTouch && (e.button === 2 || e.which === 3)) {\n                    // disable right click\n                    return; // jmp out\n                }\n\n                if (e.uiTreeDragging || e.originalEvent && e.originalEvent.uiTreeDragging) { // event has already fired in other scope.\n                    return; // jmp out\n                }\n\n                // the element which is clicked.\n                var eventElm = angular.element(e.target),\n                    eventScope;\n\n                if ($TreeDnDHelper.isTreeDndNodeHandle(eventElm)) {\n                    eventScope = eventElm.controller('treeDndNodeHandle').scope;\n                } else {\n                    eventElm = $TreeDnDHelper.closestByAttr(eventElm, $TreeDnDHelper.isTreeDndNodeHandle);\n                    if (eventElm) {\n                        eventScope = eventElm.controller('treeDndNodeHandle').scope;\n                    }\n                }\n\n                if (!eventScope || !eventScope.$type) {\n                    return; // jmp out\n                }\n\n                // if (eventScope.$type !== 'TreeDnDNode') { // Check if it is a node or a handle\n                //     return; // jmp out\n                // }\n\n                if (eventScope.$type !== 'TreeDnDNodeHandle') { // If the node has a handle, then it should be clicked by the handle\n                    return; // jmp out\n                }\n\n                var eventElmTagName = eventElm.prop('tagName').toLowerCase(),\n                    dragScope,\n                    _$scope         = $params.$scope;\n\n                if (eventElmTagName === 'input'\n                    || eventElmTagName === 'textarea'\n                    || eventElmTagName === 'button'\n                    || eventElmTagName === 'select') { // if it's a input or button, ignore it\n                    return; // jmp out\n                }\n\n                // check if it or it's parents has a 'data-nodrag' attribute\n                while (eventElm && eventElm[0] && eventElm[0] !== $params.element) {\n                    if ($TreeDnDHelper.nodrag(eventElm)) { // if the node mark as `nodrag`, DONOT drag it.\n                        return; // jmp out\n                    }\n                    eventElm = eventElm.parent();\n                }\n\n                e.uiTreeDragging = true; // stop event bubbling\n\n                if (e.originalEvent) {\n                    e.originalEvent.uiTreeDragging = true;\n                }\n\n                e.preventDefault();\n\n                dragScope = eventScope.getScopeNode();\n\n                $params.dragInfo = $TreeDnDHelper.dragInfo(dragScope);\n\n                if (!_$scope.$callbacks.beforeDrag(dragScope, $params.dragInfo)) {\n                    return; // jmp out\n                }\n\n                $params.firstMoving = true;\n\n                _$scope.setDragging($params.dragInfo);\n\n                var eventObj = $TreeDnDHelper.eventObj(e);\n\n                $params.pos = $TreeDnDHelper.positionStarted(eventObj, dragScope.$element);\n\n                if (dragScope.isTable) {\n                    $params.dragElm = angular.element($params.$window.document.createElement('table'))\n                        .addClass(_$scope.$class.tree)\n                        .addClass(_$scope.$class.drag)\n                        .addClass(_$scope.$tree_class);\n                } else {\n                    $params.dragElm = angular.element($params.$window.document.createElement('ul'))\n                        .addClass(_$scope.$class.drag)\n                        .addClass('tree-dnd-nodes')\n                        .addClass(_$scope.$tree_class);\n                }\n\n                $params.dragElm.css(\n                    {\n                        'width':   $TreeDnDHelper.width(dragScope.$element) + 'px',\n                        'z-index': 9995\n                    }\n                );\n\n                $params.offsetEdge = 0;\n                var _width         = $TreeDnDHelper.width(dragScope.$element),\n                    _scope         = dragScope,\n                    _element       = _scope.$element,\n                    _clone,\n                    _needCollapse  = !!_$scope.enabledCollapse,\n                    _copied        = false,\n                    _tbody,\n                    _frag;\n\n                if (_scope.isTable) {\n                    $params.offsetEdge = $params.dragInfo.node.__level__ - 1;\n\n                    _tbody = angular.element(document.createElement('tbody'));\n                    _frag  = angular.element(document.createDocumentFragment());\n\n                    _$scope.for_all_descendants(\n                        $params.dragInfo.node, function (_node, _parent) {\n                            _scope   = _$scope.getScope(_node);\n                            _element = _scope && _scope.$element;\n                            if (_scope && _element) {\n                                if (!_copied) {\n                                    _clone = _element.clone();\n\n                                    $TreeDnDHelper.replaceIndent(\n                                        _$scope,\n                                        _clone,\n                                        _node.__level__ - $params.offsetEdge,\n                                        'padding-left'\n                                    );\n\n                                    _frag.append(_clone);\n\n                                    // skip all, just clone parent\n                                    if (_needCollapse) {\n                                        _copied = true;\n                                    }\n\n                                    // hide if have status Move;\n                                    if (_$scope.enabledMove && _$scope.$class.hidden &&\n                                        (!_parent || _node.__visible__ || _parent.__visible__ && _parent.__expanded__)) {\n                                        _element.addClass(_$scope.$class.hidden);\n                                    }\n                                }\n                            }\n                            // skip children of node not expand.\n                            return _copied || _node.__visible__ === false || _node.__expanded__ === false;\n\n                        },\n                        undefined,\n                        !_needCollapse\n                    );\n\n                    _tbody.append(_frag);\n\n                    $params.dragElm.append(_tbody);\n                } else {\n\n                    _clone = _element.clone();\n                    if (_needCollapse) {\n                        _clone[0].querySelector('[tree-dnd-nodes]').remove();\n                    }\n\n                    // hide if have status Move;\n                    $params.dragElm.append(_clone);\n                    if (_$scope.enabledMove && _$scope.$class.hidden) {\n                        _element.addClass(_$scope.$class.hidden);\n                    }\n                }\n\n                $params.dragElm.css(\n                    {\n                        'left': eventObj.pageX - $params.pos.offsetX + _$scope.$callbacks.calsIndent(\n                            $params.offsetEdge + 1,\n                            true,\n                            true\n                        ) + 'px',\n                        'top':  eventObj.pageY - $params.pos.offsetY + 'px'\n                    }\n                );\n                // moving item with descendant\n                $params.$document.find('body').append($params.dragElm);\n                if (_$scope.$callbacks.droppable()) {\n                    $params.placeElm = _$scope.initPlace(dragScope.$element, $params.dragElm);\n\n                    if (dragScope.isTable) {\n                        $TreeDnDHelper.replaceIndent(_$scope, $params.placeElm, $params.dragInfo.node.__level__);\n                    }\n\n                    $params.placeElm.css('width', _width);\n                }\n\n                _$scope.showPlace();\n                _$scope.targeting = true;\n\n                if (_$scope.enabledStatus) {\n                    _$scope.refreshStatus();\n                    _$scope.setPositionStatus(e);\n                }\n\n                angular.element($params.$document).bind('touchend', $params.dragEndEvent);\n                angular.element($params.$document).bind('touchcancel', $params.dragEndEvent);\n                angular.element($params.$document).bind('touchmove', $params.dragMoveEvent);\n                angular.element($params.$document).bind('mouseup', $params.dragEndEvent);\n                angular.element($params.$document).bind('mousemove', $params.dragMoveEvent);\n                angular.element($params.$document).bind('mouseleave', $params.dragCancelEvent);\n\n                $params.document_height = Math.max(\n                    $params.body.scrollHeight,\n                    $params.body.offsetHeight,\n                    $params.html.clientHeight,\n                    $params.html.scrollHeight,\n                    $params.html.offsetHeight\n                );\n\n                $params.document_width = Math.max(\n                    $params.body.scrollWidth,\n                    $params.body.offsetWidth,\n                    $params.html.clientWidth,\n                    $params.html.scrollWidth,\n                    $params.html.offsetWidth\n                );\n            }\n\n            function _fnDragMove(e, $params) {\n                var _$scope = $params.$scope;\n                if (!$params.dragStarted) {\n                    if (!$params.dragDelaying) {\n                        $params.dragStarted = true;\n                        _$scope.$safeApply(function () {\n                            _$scope.$callbacks.dragStart($params.dragInfo);\n                        });\n                    }\n\n                    return; // jmp out\n                }\n\n                if ($params.dragElm) {\n                    e.preventDefault();\n\n                    if ($params.$window.getSelection) {\n                        $params.$window.getSelection().removeAllRanges();\n                    } else if ($params.$window.document.selection) {\n                        $params.$window.document.selection.empty();\n                    }\n\n                    var eventObj   = $TreeDnDHelper.eventObj(e),\n                        leftElmPos = eventObj.pageX - $params.pos.offsetX,\n                        topElmPos  = eventObj.pageY - $params.pos.offsetY;\n\n                    //dragElm can't leave the screen on the left\n                    if (leftElmPos < 0) {\n                        leftElmPos = 0;\n                    }\n\n                    //dragElm can't leave the screen on the top\n                    if (topElmPos < 0) {\n                        topElmPos = 0;\n                    }\n\n                    //dragElm can't leave the screen on the bottom\n                    if (topElmPos + 10 > $params.document_height) {\n                        topElmPos = $params.document_height - 10;\n                    }\n\n                    //dragElm can't leave the screen on the right\n                    if (leftElmPos + 10 > $params.document_width) {\n                        leftElmPos = $params.document_width - 10;\n                    }\n\n                    $params.dragElm.css(\n                        {\n                            'left': leftElmPos + _$scope.$callbacks.calsIndent(\n                                $params.offsetEdge + 1,\n                                true,\n                                true\n                            ) + 'px',\n                            'top':  topElmPos + 'px'\n                        }\n                    );\n\n                    if (_$scope.enabledStatus) {\n                        _$scope.setPositionStatus(e);\n                    }\n\n                    var top_scroll    = window.pageYOffset || $params.$window.document.documentElement.scrollTop,\n                        bottom_scroll = top_scroll + (window.innerHeight || $params.$window.document.clientHeight || $params.$window.document.clientHeight);\n                    // to scroll down if cursor y-position is greater than the bottom position the vertical scroll\n                    if (bottom_scroll < eventObj.pageY && bottom_scroll <= $params.document_height) {\n                        window.scrollBy(0, 10);\n                    }\n                    // to scroll top if cursor y-position is less than the top position the vertical scroll\n                    if (top_scroll > eventObj.pageY) {\n                        window.scrollBy(0, -10);\n                    }\n\n                    $TreeDnDHelper.positionMoved(e, $params.pos, $params.firstMoving);\n\n                    if ($params.firstMoving) {\n                        $params.firstMoving = false;\n\n                        return; // jmp out\n                    }\n                    // check if add it as a child node first\n\n                    var targetX    = eventObj.pageX - $params.$window.document.body.scrollLeft,\n                        targetY    = eventObj.pageY - (window.pageYOffset || $params.$window.document.documentElement.scrollTop),\n\n                        targetElm,\n                        targetScope,\n                        targetBefore,\n                        targetOffset,\n\n                        isChanged  = true,\n                        isVeritcal = true,\n                        isEmpty,\n                        isSwapped,\n\n                        _scope,\n                        _target,\n                        _parent,\n                        _info      = $params.dragInfo,\n                        _move      = _info.move,\n                        _drag      = _info.node,\n                        _drop      = _info.drop,\n                        treeScope  = _info.target,\n                        fnSwapTree,\n                        isHolder   = _fnPlaceHolder(e, $params);\n\n                    if (!isHolder) {\n                        /* when using elementFromPoint() inside an iframe, you have to call\n                         elementFromPoint() twice to make sure IE8 returns the correct value*/\n                        $params.$window.document.elementFromPoint(targetX, targetY);\n\n                        targetElm = angular.element($params.$window.document.elementFromPoint(targetX, targetY));\n\n                        if (!$TreeDnDHelper.isTreeDndDroppable(targetElm)) {\n                            targetElm = $TreeDnDHelper.closestByAttr(targetElm, $TreeDnDHelper.isTreeDndDroppable);\n                        }\n\n                        if ($TreeDnDHelper.isTreeDndNode(targetElm)) {\n                            targetScope = targetElm.controller('treeDndNode').scope;\n                        } else if ($TreeDnDHelper.isTreeDndNodes(targetElm)) {\n                            targetScope = targetElm.controller('treeDndNodes').scope;\n                        } else if ($TreeDnDHelper.isTreeDndNodeHandle(targetElm)) {\n                            targetScope = targetElm.controller('treeDndNodeHandle').scope;\n                        }\n\n                        if (!targetScope || !targetScope.$callbacks || !targetScope.$callbacks.droppable()) {\n                            // Not allowed Drop Item\n                            return; // jmp out\n                        }\n\n                        fnSwapTree = function () {\n                            treeScope = targetScope.getScopeTree();\n                            _target   = _info.target;\n\n                            if (_info.target !== treeScope) {\n                                // Replace by place-holder new\n                                _target.hidePlace();\n                                _target.targeting   = false;\n                                treeScope.targeting = true;\n\n                                _info.target     = treeScope;\n                                $params.placeElm = treeScope.initPlace(targetScope.$element, $params.dragElm);\n\n                                _target   = undefined;\n                                isSwapped = true;\n                            }\n                            return true;\n                        };\n\n                        if (angular.isFunction(targetScope.getScopeNode)) {\n                            targetScope = targetScope.getScopeNode();\n                            if (!fnSwapTree()) {\n                                return; // jmp out\n                            }\n                        } else {\n                            if (targetScope.$type === 'TreeDnDNodes' || targetScope.$type === 'TreeDnD') {\n                                if (targetScope.tree_nodes) {\n                                    if (targetScope.tree_nodes.length === 0) {\n                                        if (!fnSwapTree()) {\n                                            return; // jmp out\n                                        }\n                                        // Empty\n                                        isEmpty = true;\n                                    }\n                                } else {\n                                    return; // jmp out\n                                }\n                            } else {\n                                return; // jmp out\n                            }\n                        }\n                    }\n\n                    if ($params.pos.dirAx && !isSwapped || isHolder) {\n                        isVeritcal  = false;\n                        targetScope = _info.scope;\n                    }\n\n                    if (!targetScope.$element && !targetScope) {\n                        return; // jmp out\n                    }\n\n                    if (isEmpty) {\n                        _move.parent = undefined;\n                        _move.pos    = 0;\n\n                        _drop = undefined;\n                    } else {\n                        // move vertical\n                        if (isVeritcal) {\n                            targetElm = targetScope.$element; // Get the element of tree-dnd-node\n                            if (angular.isUndefinedOrNull(targetElm)) {\n                                return; // jmp out\n                            }\n                            targetOffset = $TreeDnDHelper.offset(targetElm);\n\n                            if (targetScope.horizontal && !targetScope.isTable) {\n                                targetBefore = eventObj.pageX < targetOffset.left + $TreeDnDHelper.width(targetElm) / 2;\n                            } else {\n                                if (targetScope.isTable) {\n                                    targetBefore = eventObj.pageY < targetOffset.top + $TreeDnDHelper.height(targetElm) / 2;\n                                } else {\n                                    var _height = $TreeDnDHelper.height(targetElm);\n\n                                    if (targetScope.getElementChilds()) {\n                                        _height -= -$TreeDnDHelper.height(targetScope.getElementChilds());\n                                    }\n\n                                    if (eventObj.pageY > targetOffset.top + _height) {\n                                        return; // jmp out\n                                    }\n\n                                    targetBefore = eventObj.pageY < targetOffset.top + _height / 2;\n                                }\n                            }\n\n                            if (!angular.isFunction(targetScope.getData)) {\n                                return; // jmp out\n                            }\n\n                            _target = targetScope.getData();\n                            _parent = targetScope.getNode(_target.__parent_real__);\n\n                            if (targetBefore) {\n                                var _prev = targetScope.getPrevSibling(_target);\n\n                                _move.parent = _parent;\n                                _move.pos    = angular.isDefined(_prev) ? _prev.__index__ + 1 : 0;\n\n                                _drop = _prev;\n                            } else {\n                                if (_target.__expanded__ && !(_target.__children__.length === 1 && _target.__index_real__ === _drag.__parent_real__)) {\n                                    _move.parent = _target;\n                                    _move.pos    = 0;\n\n                                    _drop = undefined;\n                                } else {\n                                    _move.parent = _parent;\n                                    _move.pos    = _target.__index__ + 1;\n\n                                    _drop = _target;\n                                }\n                            }\n                        } else {\n                            // move horizontal\n                            if ($params.pos.dirAx && $params.pos.distAxX >= treeScope.dragBorder) {\n                                $params.pos.distAxX = 0;\n                                // increase horizontal level if previous sibling exists and is not collapsed\n                                if ($params.pos.distX > 0) {\n                                    _parent = _drop;\n                                    if (!_parent) {\n                                        if (_move.pos - 1 >= 0) {\n                                            _parent = _move.parent.__children__[_move.pos - 1];\n                                        } else {\n                                            return; // jmp out\n                                        }\n                                    }\n\n                                    if (_info.drag === _info.target && _parent === _drag && _$scope.enabledMove) {\n                                        _parent = treeScope.getPrevSibling(_parent);\n                                    }\n\n                                    if (_parent && _parent.__visible__) {\n                                        var _len = _parent.__children__.length;\n\n                                        _move.parent = _parent;\n                                        _move.pos    = _len;\n\n                                        if (_len > 0) {\n                                            _drop = _parent.__children__[_len - 1];\n                                        } else {\n                                            _drop = undefined;\n                                        }\n                                    } else {\n                                        // Not changed\n                                        return; // jmp out\n                                    }\n                                } else if ($params.pos.distX < 0) {\n                                    _target = _move.parent;\n                                    if (_target &&\n                                        (_target.__children__.length === 0 ||\n                                            _target.__children__.length - 1 < _move.pos ||\n                                            _info.drag === _info.target &&\n                                            _target.__index_real__ === _drag.__parent_real__ &&\n                                            _target.__children__.length - 1 === _drag.__index__ && _$scope.enabledMove)\n                                    ) {\n                                        _parent = treeScope.getNode(_target.__parent_real__);\n\n                                        _move.parent = _parent;\n                                        _move.pos    = _target.__index__ + 1;\n\n                                        _drop = _target;\n                                    } else {\n                                        // Not changed\n                                        return; // jmp out\n                                    }\n                                } else {\n                                    return; // jmp out\n                                }\n                            } else {\n                                // limited\n                                return;\n                            }\n                        }\n                    }\n\n                    if (_info.drag === _info.target &&\n                        _move.parent &&\n                        _drag.__parent_real__ === _move.parent.__index_real__ &&\n                        _drag.__index__ === _move.pos\n                    ) {\n                        isChanged = false;\n                    }\n\n                    if (treeScope.$callbacks.accept(_info, _move, isChanged)) {\n                        _info.move    = _move;\n                        _info.drop    = _drop;\n                        _info.changed = isChanged;\n                        _info.scope   = targetScope;\n\n                        if (targetScope.isTable) {\n                            $TreeDnDHelper.replaceIndent(\n                                treeScope,\n                                $params.placeElm,\n                                angular.isUndefinedOrNull(_move.parent) ? 1 : _move.parent.__level__ + 1\n                            );\n\n                            if (_drop) {\n                                _parent = (_move.parent ? _move.parent.__children__ : undefined) || _info.target.treeData;\n\n                                if (_drop.__index__ < _parent.length - 1) {\n                                    // Find fast\n                                    _drop  = _parent[_drop.__index__ + 1];\n                                    _scope = _info.target.getScope(_drop);\n                                    _scope.$element[0].parentNode.insertBefore(\n                                        $params.placeElm[0],\n                                        _scope.$element[0]\n                                    );\n                                } else {\n                                    _target = _info.target.getLastDescendant(_drop);\n                                    _scope  = _info.target.getScope(_target);\n                                    _scope.$element.after($params.placeElm);\n                                }\n                            } else {\n                                _scope = _info.target.getScope(_move.parent);\n                                if (_scope) {\n                                    if (_move.parent) {\n                                        _scope.$element.after($params.placeElm);\n\n                                    } else {\n                                        _scope.getElementChilds().prepend($params.placeElm);\n                                    }\n                                }\n                            }\n                        } else {\n                            _scope = _info.target.getScope(_drop || _move.parent);\n                            if (_drop) {\n                                _scope.$element.after($params.placeElm);\n                            } else {\n                                _scope.getElementChilds().prepend($params.placeElm);\n                            }\n                        }\n\n                        treeScope.showPlace();\n\n                        _$scope.$safeApply(function () {\n                            _$scope.$callbacks.dragMove(_info);\n                        });\n                    }\n\n                }\n            }\n\n            function _fnDragEnd(e, $params) {\n                e.preventDefault();\n                if ($params.dragElm) {\n                    var _passed  = false,\n                        _$scope  = $params.$scope,\n                        _scope   = _$scope.getScope($params.dragInfo.node),\n                        _element = _scope.$element;\n\n                    _$scope.$safeApply(function () {\n                        _passed = _$scope.$callbacks.beforeDrop($params.dragInfo);\n                    });\n\n                    // rollback all\n                    if (_scope.isTable) {\n                        _$scope.for_all_descendants(\n                            $params.dragInfo.node, function (_node, _parent) {\n                                _scope   = _$scope.getScope(_node);\n                                _element = _scope && _scope.$element;\n                                if (_scope && _element && (!_parent && _node.__visible__ || _parent.__expanded__)) {\n                                    if (_$scope.$class.hidden) {\n                                        _element.removeClass(_$scope.$class.hidden);\n                                    }\n                                }\n                                return _node.__visible__ === false || _node.__expanded__ === false;\n                            },\n                            undefined,\n                            true\n                        );\n                    } else {\n                        if (_$scope.$class.hidden) {\n                            _element.removeClass(_$scope.$class.hidden);\n                        }\n                    }\n\n                    $params.dragElm.remove();\n                    $params.dragElm = undefined;\n\n                    if (_$scope.enabledStatus) {\n                        _$scope.hideStatus();\n                    }\n\n                    if (_$scope.$$apply) {\n                        _$scope.$safeApply(function () {\n                            var _status = _$scope.$callbacks.dropped(\n                                $params.dragInfo,\n                                _passed\n                            );\n\n                            _$scope.$callbacks.dragStop($params.dragInfo, _status);\n                            clearData();\n                        });\n                    } else {\n                        _fnBindDrag($params);\n\n                        _$scope.$safeApply(function () {\n                            _$scope.$callbacks.dragStop($params.dragInfo, false);\n                            clearData();\n                        });\n                    }\n\n                }\n\n                function clearData() {\n                    $params.dragInfo.target.hidePlace();\n                    $params.dragInfo.target.targeting = false;\n\n                    $params.dragInfo = undefined;\n                    _$scope.$$apply  = false;\n                    _$scope.setDragging(undefined);\n                }\n\n                angular.element($params.$document).unbind('touchend', $params.dragEndEvent); // Mobile\n                angular.element($params.$document).unbind('touchcancel', $params.dragEndEvent); // Mobile\n                angular.element($params.$document).unbind('touchmove', $params.dragMoveEvent); // Mobile\n                angular.element($params.$document).unbind('mouseup', $params.dragEndEvent);\n                angular.element($params.$document).unbind('mousemove', $params.dragMoveEvent);\n                angular.element($params.$window.document.body).unbind('mouseleave', $params.dragCancelEvent);\n            }\n\n            function _fnDragStartEvent(e, $params) {\n                if ($params.$scope.$callbacks.draggable()) {\n                    _fnDragStart(e, $params);\n                }\n            }\n\n            function _fnBindDrag($params) {\n                $params.element.bind('touchstart mousedown', function (e) {\n                    $params.dragDelaying = true;\n                    $params.dragStarted  = false;\n\n                    _fnDragStartEvent(e, $params);\n\n                    $params.dragTimer = $timeout(\n                        function () {\n                            $params.dragDelaying = false;\n                        },\n                        $params.$scope.dragDelay\n                    );\n                });\n\n                $params.element.bind('touchend touchcancel mouseup', function () {\n                    $timeout.cancel($params.dragTimer);\n                });\n            }\n\n            function _fnKeydownHandler(e, $params) {\n                var _$scope = $params.$scope;\n                if (e.keyCode === 27) {\n                    if (_$scope.enabledStatus) {\n                        _$scope.hideStatus();\n                    }\n\n                    _$scope.$$apply = false;\n                    _fnDragEnd(e, $params);\n                } else {\n                    if (_$scope.enabledHotkey && e.shiftKey) {\n                        _$scope.enableMove(true);\n                        if (_$scope.enabledStatus) {\n                            _$scope.refreshStatus();\n                        }\n\n                        if (!$params.dragInfo) {\n                            return; // jmp out\n                        }\n\n                        var _scope   = _$scope.getScope($params.dragInfo.node),\n                            _element = _scope.$element;\n\n                        if (_scope.isTable) {\n                            _$scope.for_all_descendants(\n                                $params.dragInfo.node,\n                                function (_node, _parent) {\n                                    _scope   = _$scope.getScope(_node);\n                                    _element = _scope && _scope.$element;\n                                    if (_scope && _element && (!_parent && _node.__visible__ || _parent.__expanded__)) {\n                                        if (_$scope.$class.hidden) {\n                                            _element.addClass(_$scope.$class.hidden);\n                                        }\n                                    }\n\n                                    return _node.__visible__ === false || _node.__expanded__ === false;\n\n                                },\n                                undefined,\n                                true\n                            );\n                        } else {\n                            if (_$scope.$class.hidden) {\n                                _element.addClass(_$scope.$class.hidden);\n                            }\n                        }\n                    }\n                }\n            }\n\n            function _fnKeyupHandler(e, $params) {\n                var _$scope = $params.$scope;\n\n                if (_$scope.enabledHotkey && !e.shiftKey) {\n                    _$scope.enableMove(false);\n\n                    if (_$scope.enabledStatus) {\n                        _$scope.refreshStatus();\n                    }\n\n                    if (!$params.dragInfo) {\n                        return; // jmp out\n                    }\n\n                    var _scope   = _$scope.getScope($params.dragInfo.node),\n                        _element = _scope.$element;\n\n                    if (_scope.isTable) {\n                        _$scope.for_all_descendants(\n                            $params.dragInfo.node,\n                            function (_node, _parent) {\n                                _scope   = _$scope.getScope(_node);\n                                _element = _scope && _scope.$element;\n                                if (_scope && _element && (!_parent && _node.__visible__ || _parent.__expanded__)) {\n                                    if (_$scope.$class.hidden) {\n                                        _element.removeClass(_$scope.$class.hidden);\n                                    }\n                                }\n                                return _node.__visible__ === false || _node.__expanded__ === false;\n                            },\n                            undefined,\n                            true\n                        );\n                    } else {\n                        if (_$scope.$class.hidden) {\n                            _element.removeClass(_$scope.$class.hidden);\n                        }\n                    }\n                }\n            }\n\n            function _$init(scope, element, $window, $document) {\n\n                var $params        = {\n                        hasTouch:        'ontouchstart' in window,\n                        firstMoving:     undefined,\n                        dragInfo:        undefined,\n                        pos:             undefined,\n                        placeElm:        undefined,\n                        dragElm:         undefined,\n                        dragDelaying:    true,\n                        dragStarted:     false,\n                        dragTimer:       undefined,\n                        body:            document.body,\n                        html:            document.documentElement,\n                        document_height: undefined,\n                        document_width:  undefined,\n                        offsetEdge:      undefined,\n                        $scope:          scope,\n                        $window:         $window,\n                        $document:       $document,\n                        element:         element,\n                        bindDrag:        function () {\n                            _fnBindDrag($params);\n                        },\n                        dragEnd:         function (e) {\n                            _fnDragEnd(e, $params);\n                        },\n                        dragMoveEvent:   function (e) {\n                            _fnDragMove(e, $params);\n                        },\n                        dragEndEvent:    function (e) {\n                            scope.$$apply = true;\n                            _fnDragEnd(e, $params);\n                        },\n                        dragCancelEvent: function (e) {\n                            _fnDragEnd(e, $params);\n                        }\n                    },\n                    keydownHandler = function (e) {\n                        return _fnKeydownHandler(e, $params);\n                    },\n                    keyupHandler   = function (e) {\n                        return _fnKeyupHandler(e, $params);\n                    };\n\n                scope.dragEnd = function (e) {\n                    $params.dragEnd(e);\n                };\n\n                $params.bindDrag();\n\n                angular.element($window.document.body).bind('keydown', keydownHandler);\n                angular.element($window.document.body).bind('keyup', keyupHandler);\n\n                //unbind handler that retains scope\n                scope.$on('$destroy', function () {\n                    angular.element($window.document.body).unbind('keydown', keydownHandler);\n                    angular.element($window.document.body).unbind('keyup', keyupHandler);\n\n                    if (scope.statusElm) {\n                        scope.statusElm.remove();\n                    }\n\n                    if (scope.placeElm) {\n                        scope.placeElm.remove();\n                    }\n                });\n            }\n\n            return _$init;\n        }\n    ]);\n\nangular.module('ntt.TreeDnD')\n    .factory('$TreeDnDControl', function () {\n\n        function fnSetCollapse(node) {\n            node.__expanded__ = false;\n        }\n\n        /**\n         * Function set expand\n         * @callback fnSetExpand\n         * @param {Node} node\n         */\n        function fnSetExpand(node) {\n            node.__expanded__ = true;\n        }\n\n        function _$init(scope) {\n            /**\n             * Object Tree with field function custom\n             *\n             * @namespace\n             * @alias $scope.tree\n             */\n            var _tree = {\n                selected_node:       undefined,\n                on_select:           undefined,\n                /**\n                 * @type {$scope.for_all_descendants}\n                 */\n                for_all_descendants: scope.for_all_descendants,\n\n                /**\n                 * Select node in tree\n                 *\n                 * @param {Node|undefined} node\n                 *\n                 * @returns {Node|undefined}\n                 */\n                select_node: function (node) {\n                    var tree = scope.tree;\n\n                    var _selected = tree.deselect_node();\n\n                    if (typeof node === 'object' && node !== _selected) {\n                        node.__selected__ = true;\n\n                        tree.selected_node = node;\n\n                        tree.expand_all_parents(node);\n\n                        if (typeof tree.on_select === 'function') {\n                            tree.on_select(node);\n                        }\n                    }\n\n                    return node;\n                },\n\n                /**\n                 * Deselect node\n                 *\n                 * @returns {Node|undefined}\n                 */\n                deselect_node: function () {\n                    var tree = scope.tree;\n\n                    var _target;\n\n                    if (typeof tree.selected_node === 'object') {\n                        tree.selected_node.__selected__ = undefined;\n\n                        delete tree.selected_node.__selected__;\n\n                        _target = tree.selected_node;\n\n                        tree.selected_node = undefined;\n                    }\n\n                    return _target;\n                },\n\n                /**\n                 * Get parent of node selecting\n                 *\n                 * @param {Node|undefined} node\n                 *\n                 * @returns {Node|undefined}\n                 */\n                get_parent: function (node) {\n                    var tree = scope.tree;\n\n                    node = node || tree.selected_node;\n\n                    if (node && node.__parent_real__ !== undefined) {\n                        return scope.tree_nodes[node.__parent_real__];\n                    }\n                },\n\n\n                /**\n                 * Foreach ancestors in node\n                 *\n                 * @param {Node|undefined} node\n                 * @param {fnSetExpand} fn - Function callback\n                 *\n                 * @returns {boolean}\n                 */\n                for_all_ancestors: function (node, fn) {\n                    var tree = scope.tree;\n\n                    var _parent = tree.get_parent(node);\n                    if (_parent) {\n                        if (fn(_parent)) {\n                            return false;\n                        }\n\n                        return tree.for_all_ancestors(_parent, fn);\n                    }\n\n                    return true;\n                },\n\n                /**\n                 * Expand all parents of node selecting\n                 *\n                 * @param {Node|undefined} node\n                 */\n                expand_all_parents: function (node) {\n                    var tree = scope.tree;\n\n                    node = node || tree.selected_node;\n\n                    if (typeof node === 'object') {\n                        tree.for_all_ancestors(node, fnSetExpand);\n                    }\n                },\n\n\n                /**\n                 * Collapse all parents of node selecting\n                 *\n                 * @param {Node|undefined} node\n                 */\n                collapse_all_parents: function (node) {\n                    var tree = scope.tree;\n\n                    node = node || tree.selected_node;\n                    if (typeof node === 'object') {\n                        tree.for_all_ancestors(node, fnSetCollapse);\n                    }\n                },\n\n                /**\n                 * Reload data in scope\n                 *\n                 * @returns {Node|Node[]|undefined}\n                 */\n                reload_data: function () {\n                    return scope.reload_data();\n                },\n\n                /**\n                 * Add node into parent\n                 *\n                 * @param {Node|Node[]|undefined} parent\n                 * @param {Node} new_node\n                 * @param {undefined|int} [index]\n                 * @param {boolean} [parent_auto_expand=false]\n                 *\n                 * @returns {Object}\n                 */\n                add_node: function (parent, new_node, index, parent_auto_expand) {\n                    if (typeof parent === 'object') {\n                        if (typeof parent.__children__ !== 'object') {\n                            parent.__children__ = [];\n                        }\n\n                        if (index >= 0) {\n                            parent.__children__.splice(index, 0, new_node);\n                        } else {\n                            parent.__children__.push(new_node);\n                        }\n\n                        if (parent_auto_expand) {\n                            parent.__expanded__ = true;\n                        }\n                    } else {\n                        if (index >= 0) {\n                            scope.treeData.splice(index, 0, new_node);\n                        } else {\n                            scope.treeData.push(new_node);\n                        }\n                    }\n\n                    return new_node;\n                },\n\n                /**\n                 * Add node into root\n                 *\n                 * @param {Node|undefined} new_node\n                 *\n                 * @returns {Node|undefined}\n                 */\n                add_node_root: function (new_node) {\n                    if (typeof new_node === 'object') {\n                        var tree = scope.tree;\n\n                        tree.add_node(undefined, new_node);\n                    }\n\n                    return new_node;\n                },\n\n                /**\n                 * Expand all node\n                 */\n                expand_all: function () {\n                    var tree = scope.tree;\n\n                    var len = scope.treeData.length;\n                    for (var i = 0; i < len; i++) {\n                        tree.for_all_descendants(scope.treeData[i], fnSetExpand);\n                    }\n                },\n\n                /**\n                 * Collapse all node\n                 */\n                collapse_all: function () {\n                    var tree = scope.tree;\n\n                    var len = scope.treeData.length;\n                    for (var i = 0; i < len; i++) {\n                        tree.for_all_descendants(scope.treeData[i], fnSetCollapse);\n                    }\n                },\n\n                /**\n                 * Remove node (or node selecting)\n                 *\n                 * @param {Node|undefined} node - If `node` is Object then delete `node` else delete `node` selecting\n                 */\n                remove_node: function (node) {\n                    var tree = scope.tree;\n\n                    node = node || tree.selected_node;\n\n                    if (typeof node === 'object') {\n                        var _parent;\n\n                        if (node.__parent_real__ !== undefined) {\n                            _parent = tree.get_parent(node).__children__;\n                        } else {\n                            _parent = scope.treeData;\n                        }\n\n                        _parent.splice(node.__index__, 1);\n\n                        tree.reload_data();\n\n                        if (tree.selected_node === node) {\n                            tree.selected_node = undefined;\n                        }\n                    }\n                },\n\n                /**\n                 * Expand node (or node selecting)\n                 *\n                 * @param {Node|undefined} node\n                 *\n                 * @returns {Node|undefined}\n                 */\n                expand_node: function (node) {\n                    var tree = scope.tree;\n\n                    node = node || tree.selected_node;\n\n                    if (typeof node === 'object') {\n                        node.__expanded__ = true;\n\n                        return node;\n                    }\n                },\n\n                /**\n                 * Collapse node (or node selecting)\n                 *\n                 * @param {Node|undefined} node\n                 *\n                 * @returns {Node|undefined}\n                 */\n                collapse_node: function (node) {\n                    var tree = scope.tree;\n\n                    node = node || tree.selected_node;\n\n                    if (typeof node === 'object') {\n                        node.__expanded__ = false;\n\n                        return node;\n                    }\n                },\n\n                /**\n                 * Get node selected\n                 *\n                 * @returns {Node|undefined}\n                 */\n                get_selected_node: function () {\n                    var tree = scope.tree;\n\n                    return tree.selected_node;\n                },\n\n                /**\n                 * Get node first in root (or selecting)\n                 *\n                 * @returns {Node|undefined}\n                 */\n                get_first_node: function () {\n                    var tree = scope.tree;\n\n                    var wrapper = tree.selected_node;\n\n                    if (wrapper === undefined) {\n                        wrapper = scope.treeData;\n                    }\n\n                    if (typeof wrapper === 'object') {\n                        var len = wrapper.length;\n\n                        if (len > 0) {\n                            return wrapper[0];\n                        }\n                    }\n                },\n\n                /**\n                 * Get children of node (or selecting)\n                 *\n                 * @param {Node|undefined} node\n                 *\n                 * @returns {undefined|Node[]}\n                 */\n                get_children: function (node) {\n                    var tree = scope.tree;\n\n                    if (node === undefined && tree.selected_node === undefined) {\n                        return tree.treeData;\n                    }\n\n                    node = node || tree.selected_node;\n\n                    if (typeof node === 'object' && node.__children__ !== undefined) {\n                        return node.__children__;\n                    }\n                },\n\n                /**\n                 * Get siblings\n                 *\n                 * @param {Node|undefined} node\n                 *\n                 * @returns {undefined|Node[]}\n                 */\n                get_siblings: function (node) {\n                    var tree = scope.tree;\n\n                    node = node || tree.selected_node;\n                    if (typeof node === 'object') {\n                        var _parent = tree.get_parent(node),\n                            _target;\n\n                        if (_parent) {\n                            _target = _parent.__children__;\n                        } else {\n                            _target = scope.treeData;\n                        }\n\n                        return _target;\n                    }\n                },\n\n                /**\n                 * Get next sibling\n                 *\n                 * @param {Node|undefined} node\n                 *\n                 * @returns {Node|undefined}\n                 */\n                get_next_sibling: function (node) {\n                    var tree = scope.tree;\n\n                    node = node || tree.selected_node;\n                    if (typeof node === 'object') {\n                        var _target = tree.get_siblings(node);\n\n                        var n = _target.length;\n\n                        if (node.__index__ < n) {\n                            return _target[node.__index__ + 1];\n                        }\n                    }\n                },\n\n                /**\n                 * Get previous sibling\n                 *\n                 * @param {Node|undefined} node\n                 *\n                 * @returns {Node|undefined}\n                 */\n                get_prev_sibling: function (node) {\n                    var tree = scope.tree;\n\n                    node = node || tree.selected_node;\n\n                    var _target = tree.get_siblings(node);\n\n                    if (node.__index__ > 0) {\n                        return _target[node.__index__ - 1];\n                    }\n                },\n\n                /**\n                 * Get first child\n                 *\n                 * @param {Node|undefined} node\n                 *\n                 * @returns {Node|undefined}\n                 */\n                get_first_child: function (node) {\n                    var tree = scope.tree;\n\n                    node = node || tree.selected_node;\n                    if (typeof node === 'object') {\n                        var _target = node.__children__;\n\n                        if (_target && _target.length > 0) {\n                            return node.__children__[0];\n                        }\n                    }\n                },\n\n                /**\n                 * Get closest ancestor next sibling\n                 *\n                 * @param {Node|undefined} node\n                 *\n                 * @returns {Node|undefined}\n                 */\n                get_closest_ancestor_next_sibling: function (node) {\n                    var tree = scope.tree;\n\n                    node = node || tree.selected_node;\n\n                    var _target = tree.get_next_sibling(node);\n                    if (_target) {\n                        return _target;\n                    }\n\n                    var _parent = tree.get_parent(node);\n                    if (_parent) {\n                        return tree.get_closest_ancestor_next_sibling(_parent);\n                    }\n                },\n\n                /**\n                 * Get next node\n                 *\n                 * @param {Node|undefined} node\n                 *\n                 * @returns {Node|undefined}\n                 */\n                get_next_node: function (node) {\n                    var tree = scope.tree;\n\n                    node = node || tree.selected_node;\n\n                    if (typeof node === 'object') {\n                        var _target = tree.get_first_child(node);\n\n                        if (_target) {\n                            return _target;\n                        } else {\n                            return tree.get_closest_ancestor_next_sibling(node);\n                        }\n                    }\n                },\n\n                /**\n                 * Get previous node\n                 *\n                 * @param {Node|undefined} node\n                 *\n                 * @returns {Node|undefined}\n                 */\n                get_prev_node:       function (node) {\n                    var tree = scope.tree;\n\n                    node = node || tree.selected_node;\n\n                    if (typeof node === 'object') {\n                        var _target = tree.get_prev_sibling(node);\n\n                        if (_target) {\n                            return tree.get_last_descendant(_target);\n                        }\n\n                        return tree.get_parent(node);\n                    }\n                },\n                get_last_descendant: scope.getLastDescendant,\n\n                /**\n                 * Select parent node\n                 *\n                 * @param {Node|undefined} node\n                 *\n                 * @returns {Node|undefined}\n                 */\n                select_parent_node: function (node) {\n                    var tree = scope.tree;\n\n                    node = node || tree.selected_node;\n\n                    if (typeof node === 'object') {\n                        var _parent = tree.get_parent(node);\n\n                        if (_parent) {\n                            return tree.select_node(_parent);\n                        }\n                    }\n                },\n\n                /**\n                 * Select first node\n                 *\n                 * @returns {Node|undefined}\n                 */\n                select_first_node: function () {\n                    var tree = scope.tree;\n\n                    var firstNode = tree.get_first_node();\n\n                    return tree.select_node(firstNode);\n                },\n\n                /**\n                 * Select next sibling\n                 *\n                 * @param {Node|undefined} node\n                 *\n                 * @returns {Node|undefined}\n                 */\n                select_next_sibling: function (node) {\n                    var tree = scope.tree;\n\n                    node = node || tree.selected_node;\n\n                    if (typeof node === 'object') {\n                        var _target = tree.get_next_sibling(node);\n\n                        if (_target) {\n                            return tree.select_node(_target);\n                        }\n                    }\n                },\n\n                /**\n                 * Select previous sibling\n                 *\n                 * @param {Node|undefined} node\n                 *\n                 * @returns {*|Object}\n                 */\n                select_prev_sibling: function (node) {\n                    var tree = scope.tree;\n\n                    node = node || tree.selected_node;\n\n                    if (typeof node === 'object') {\n                        var _target = tree.get_prev_sibling(node);\n\n                        if (_target) {\n                            return tree.select_node(_target);\n                        }\n                    }\n                },\n\n                /**\n                 * Select next node\n                 *\n                 * @param {Node|undefined} node\n                 *\n                 * @returns {Node|undefined}\n                 */\n                select_next_node: function (node) {\n                    var tree = scope.tree;\n\n                    node = node || tree.selected_node;\n\n                    if (typeof node === 'object') {\n                        var _target = tree.get_next_node(node);\n\n                        if (_target) {\n                            return tree.select_node(_target);\n                        }\n                    }\n                },\n\n                /**\n                 * Select previous node\n                 *\n                 * @param {Node|undefined} node\n                 *\n                 * @returns {Node|undefined}\n                 */\n                select_prev_node: function (node) {\n                    var tree = scope.tree;\n\n                    node = node || tree.selected_node;\n\n                    if (typeof node === 'object') {\n                        var _target = tree.get_prev_node(node);\n\n                        if (_target) {\n                            return tree.select_node(_target);\n                        }\n                    }\n                }\n            };\n\n            return _tree;\n        }\n\n        return _$init;\n    });\n\nangular.module('template/TreeDnD/TreeDnD.html', []).run(\n    ['$templateCache', function ($templateCache) {\n        $templateCache.put(\n            'template/TreeDnD/TreeDnD.html',\n            '<table ng-class=\"$tree_class\">' +\n            '   <thead>' +\n            '       <tr>' +\n            '           <th ng-class=\"expandingProperty.titleClass\" ng-style=\"expandingProperty.titleStyle\">' +\n            '               {{expandingProperty.displayName || expandingProperty.field || expandingProperty}}' +\n            '           <\\/th>' +\n            '           <th ng-repeat=\"col in colDefinitions\" ng-class=\"col.titleClass\" ng-style=\"col.titleStyle\">' +\n            '               {{col.displayName || col.field}}' +\n            '           </th>' +\n            '       </tr>' +\n            '   </thead>' +\n            '   <tbody tree-dnd-nodes>' +\n            '       <tr tree-dnd-node=\"node\" ng-repeat=\"node in tree_nodes track by node.__hashKey__\" ' +\n            '           ng-if=\"(node.__inited__ || node.__visible__)\"' +\n            '           ng-click=\"onSelect(node)\" ' +\n            '           ng-class=\"(node.__selected__ ? \\' active\\':\\'\\')\">' +\n            '           <td tree-dnd-node-handle' +\n            '               ng-style=\"expandingProperty.cellStyle ? expandingProperty.cellStyle : {\\'padding-left\\': $callbacks.calsIndent(node.__level__)}\"' +\n            '               ng-class=\"expandingProperty.cellClass\"' +\n            '               compile=\"expandingProperty.cellTemplate\">' +\n            '               <a data-nodrag>' +\n            '                  <i ng-class=\"node.__icon_class__\" ng-click=\"toggleExpand(node)\" class=\"tree-icon\"></i>' +\n            '               </a>' +\n            '               {{node[expandingProperty.field] || node[expandingProperty]}}' +\n            '           </td>' +\n            '           <td ng-repeat=\"col in colDefinitions\" ng-class=\"col.cellClass\" ng-style=\"col.cellStyle\" compile=\"col.cellTemplate\">' +\n            '               {{node[col.field]}}' +\n            '           </td>' +\n            '       </tr>' +\n            '   </tbody>' +\n            '</table>'\n        );\n\n        $templateCache.put(\n            'template/TreeDnD/TreeDnDStatusCopy.html',\n            '<label><i class=\"fa fa-copy\"></i>&nbsp;<b>Copying</b></label>'\n        );\n\n        $templateCache.put(\n            'template/TreeDnD/TreeDnDStatusMove.html',\n            '<label><i class=\"fa fa-file-text\"></i>&nbsp;<b>Moving</b></label>'\n        );\n    }]\n);\n})();"]}